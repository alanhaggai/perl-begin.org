<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>


	<meta http-equiv="CONTENT-TYPE" content="text/html; charset=UTF-8">
	<title>Impatient Perl</title>
	<meta name="GENERATOR" content="OpenOffice.org 1.1.1  (Linux)">
	<meta name="CREATED" content="20030811;55800">
	<meta name="CHANGEDBY" content="Greg London">
	<meta name="CHANGED" content="20040724;14053900">
	<meta name="CLASSIFICATION" content="Perl Training Manual FAQ Beginners Guide Learn Perl Reference Manual">
	<meta name="DESCRIPTION" content="This is a Perl Training manual and reference manual. It is geared towards people who are somewhat familiar with at least one programming language. It covers everything from the basics of variables to the advanced topics like Object Oriented Programming and regular expressions. Please check the authors website to make sure you have the latest copy: www.greglondon.com  Enjoy! Have fun! And spread the word.">
	<meta name="KEYWORDS" content="Perl Training Manual FAQ Beginners Guide Learn Perl Reference Manual">
	<style type="text/css">
		@page { size: 8.5in 11in; margin-left: 1.25in; margin-right: 1.25in; margin-top: 1in; margin-bottom: 1in }
		P { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		P.western { font-family: "Times", serif; font-weight: medium }
		H1 { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		H1.western { font-family: "Times", serif; font-size: 16pt }
		H1.cjk { font-size: 16pt }
		H1.ctl { font-size: 16pt }
		H2 { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		H2.western { font-family: "Times", serif; font-size: 14pt; font-style: normal }
		H2.cjk { font-family: "HG Mincho Light J"; font-size: 14pt; font-style: italic }
		H2.ctl { font-family: "Arial Unicode MS"; font-size: 14pt; font-style: italic }
		H3 { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		H3.western { font-family: "Times", serif }
		H3.cjk { font-family: "HG Mincho Light J" }
		H3.ctl { font-family: "Arial Unicode MS" }
		H4 { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		H4.western { font-family: "Times", serif; font-size: 11pt; font-style: normal }
		H4.cjk { font-family: "HG Mincho Light J"; font-size: 11pt; font-style: italic }
		H4.ctl { font-family: "Arial Unicode MS"; font-size: 11pt; font-style: italic }
		H5 { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		H5.western { font-family: "Times", serif; font-size: 11pt }
		H5.cjk { font-family: "HG Mincho Light J"; font-size: 11pt }
		H5.ctl { font-family: "Arial Unicode MS"; font-size: 11pt }
		TD P { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		TD P.western { font-family: "Times", serif; font-weight: medium }
		TH P { margin-bottom: 0.08in; page-break-inside: avoid; page-break-before: auto }
		TH P.western { font-family: "Times", serif; font-style: italic }
		TH P.cjk { font-style: italic }
		TH P.ctl { font-style: italic }
		P.text-body-preceding-code-block-western { font-family: "Times", serif; font-weight: medium; page-break-after: avoid }
		P.text-body-preceding-code-block-cjk { page-break-after: avoid }
		P.text-body-preceding-code-block-ctl { page-break-after: avoid }
	</style>
</head><body dir="LTR" lang="en-US">
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif"><font style="font-size: 40pt;" size="7">Impatient
Perl</font></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">version:
24 July 2004</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">Copyright
2004 Greg London</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" align="LEFT"><font face="Times, serif">Permission is
granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.2 or any later
version published by the Free Software Foundation; with no Invariant
Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of
the license is included in the section entitled "GNU Free
Documentation License".</font></p>
<p class="western" align="LEFT"><br><br>
</p>
<p class="western" align="LEFT"><font face="Times, serif">Cover Art
(Front and Back) on the book version of Impatient Perl is excluded
from this license. Cover Art is Copyright Greg London 2004, All
Rights Reserved.</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">For
latest version of this work go to:</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Courier, monospace"><a href="http://www.greglondon.com/"><font face="Times, serif">http://www.greglondon.com</font></a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">This
document was created using OpenOffice version 1.1.0</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">(which
exports directly to PDF)</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Courier, monospace"><a href="http://www.openoffice.org/"><font face="Times, serif">http://www.openoffice.org</font></a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">running
RedHat Linux</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Courier, monospace"><a href="http://www.redhat.com/"><font face="Times, serif">http://www.redhat.com</font></a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">on
a x86 machine from</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Courier, monospace"><a href="http://www.penguincomputing.com/"><font face="Times, serif">http://www.penguincomputing.com</font></a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">To
buy a hardcopy of this document, go to:</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif"><a href="http://www.lulu.com/GregLondon">http://www.lulu.com/GregLondon</a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">It's
only $8.50 plus shipping and handling.</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">And
your purchase earns me 97 cents in royalties,</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">a
large chunk of which will go to taxes.</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">The
life you save may be my own.</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Times, serif">Thank
you.</font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-before: always;">
<br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<div id="Table-of-Contents1" dir="LTR" style="background: transparent none repeat scroll 0% 0%; -moz-background-clip: border; -moz-background-origin: padding; -moz-background-inline-policy: continuous;">
	<div id="Table-of-Contents1_Head" dir="LTR">
		<p style="margin-top: 0.17in; page-break-after: avoid;"><font face="Courier, monospace"><font style="font-size: 16pt;" size="4"><b>Table
		of Contents</b></font></font></p>
	</div>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#1.The%20Impatient%20Introduction%20to%20Perl%7Coutline">1
	The Impatient Introduction to Perl</a>	6</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.1.The%20history%20of%20perl%20in%20100%20words%20or%20less%7Coutline">1.1
	The history of perl in 100 words or less</a>	6</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.2.Basic%20Formatting%20for%20this%20Document%7Coutline">1.2
	Basic Formatting for this Document</a>	6</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.3.Do%20You%20Have%20Perl%20Installed%7Coutline">1.3
	Do You Have Perl Installed</a>	7</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.4.Your%20First%20Perl%20Script,%20EVER%7Coutline">1.4
	Your First Perl Script, EVER</a>	7</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.5.Default%20Script%20Header%7Coutline">1.5
	Default Script Header</a>	8</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.6.Free%20Reference%20Material%7Coutline">1.6
	Free Reference Material</a>	8</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.7.Cheap%20Reference%20Material%20%7Coutline">1.7
	Cheap Reference Material </a>	9</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#1.8.Acronyms%20and%20Terms%7Coutline">1.8
	Acronyms and Terms</a>	9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.Storage%7Coutline">2
	Storage</a>	10</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#2.1.Scalars%7Coutline">2.1
	Scalars</a>	10</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.Scalar%20Strings%7Coutline">2.1.1
	Scalar Strings</a>	11</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.1.String%20Literals%7Coutline">2.1.1.1
	String Literals</a>	11</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.2.Single%20quotes%20versus%20Double%20quotes%7Coutline">2.1.1.2
	Single quotes versus Double quotes</a>	11</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.3.chomp%7Coutline">2.1.1.3
	chomp</a>	12</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.4.concatenation%7Coutline">2.1.1.4
	concatenation</a>	12</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.5.repetition%7Coutline">2.1.1.5
	repetition</a>	12</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.6.length%7Coutline">2.1.1.6
	length</a>	12</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.7.substr%7Coutline">2.1.1.7
	substr</a>	12</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.8.split%7Coutline">2.1.1.8
	split</a>	13</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.9.join%7Coutline">2.1.1.9
	join</a>	13</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.10.qw%7Coutline">2.1.1.10
	qw</a>	13</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.1.11.Multi-Line%20Strings,%20HERE%20Documents%7Coutline">2.1.1.11
	Multi-Line Strings, HERE Documents</a>	14</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.Scalar%20Numbers%7Coutline">2.1.2
	Scalar Numbers</a>	15</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.1.Numeric%20Literals%7Coutline">2.1.2.1
	Numeric Literals</a>	15</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.2.Numeric%20Functions%7Coutline">2.1.2.2
	Numeric Functions</a>	15</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.3.abs%7Coutline">2.1.2.3
	abs</a>	15</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.4.int%7Coutline">2.1.2.4
	int</a>	15</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.5.trigonometry%20%28sin,cos,tan%29%7Coutline">2.1.2.5
	trigonometry (sin,cos,tan)</a>	16</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.6.exponentiation%7Coutline">2.1.2.6
	exponentiation</a>	16</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.7.sqrt%7Coutline">2.1.2.7
	sqrt</a>	16</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.8.natural%20logarithms%28exp,log%29%7Coutline">2.1.2.8
	natural logarithms(exp,log)</a>	16</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.2.9.random%20numbers%20%28rand,%20srand%29%7Coutline">2.1.2.9
	random numbers (rand, srand)</a>	17</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.Converting%20Between%20Strings%20and%20Numbers%7Coutline">2.1.3
	Converting Between Strings and Numbers</a>	17</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.1.Stringify%7Coutline">2.1.3.1
	Stringify</a>	17</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.1.1.sprintf%7Coutline">2.1.3.1.1
	sprintf</a>	18</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.2.Numify%7Coutline">2.1.3.2
	Numify</a>	18</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.2.1.oct%7Coutline">2.1.3.2.1
	oct</a>	19</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.2.2.hex%7Coutline">2.1.3.2.2
	hex</a>	19</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.3.2.3.Base%20Conversion%20Overview%7Coutline">2.1.3.2.3
	Base Conversion Overview</a>	19</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.4.Undefined%20and%20Uninitialized%20Scalars%7Coutline">2.1.4
	Undefined and Uninitialized Scalars</a>	20</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.Booleans%7Coutline">2.1.5
	Booleans</a>	21</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.1.FALSE%7Coutline">2.1.5.1
	FALSE</a>	22</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.2.TRUE%7Coutline">2.1.5.2
	TRUE</a>	22</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.3.Comparators%7Coutline">2.1.5.3
	Comparators</a>	23</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.Logical%20Operators%7Coutline">2.1.5.4
	Logical Operators</a>	23</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.1.Default%20Values%7Coutline">2.1.5.4.1
	Default Values</a>	24</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.2.Flow%20Control%7Coutline">2.1.5.4.2
	Flow Control</a>	25</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.3.Precedence%7Coutline">2.1.5.4.3
	Precedence</a>	25</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.4.Assignment%20Precedence%7Coutline">2.1.5.4.4
	Assignment Precedence</a>	25</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.5.Flow%20Control%20Precedence%7Coutline">2.1.5.4.5
	Flow Control Precedence</a>	25</font></p>
	<p style="margin-left: 0.79in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.5.4.6.Conditional%20Operator%7Coutline">2.1.5.4.6
	Conditional Operator</a>	26</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.6.References%7Coutline">2.1.6
	References</a>	27</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.7.Filehandles%7Coutline">2.1.7
	Filehandles</a>	28</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.1.8.Scalar%20Review%7Coutline">2.1.8
	Scalar Review</a>	28</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#2.2.Arrays%7Coutline">2.2
	Arrays</a>	28</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.1.scalar%20%28@array%29%20%7Coutline">2.2.1
	scalar (@array) </a>	30</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.2.push%28@array,%20LIST%29%7Coutline">2.2.2
	push(@array, LIST)</a>	30</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.3.pop%28@array%29%7Coutline">2.2.3
	pop(@array)</a>	30</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.4.shift%28@array%29%7Coutline">2.2.4
	shift(@array)</a>	31</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.5.unshift%28%20@array,%20LIST%29%7Coutline">2.2.5
	unshift( @array, LIST)</a>	31</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.6.foreach%20%28@array%29%7Coutline">2.2.6
	foreach (@array)</a>	31</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.7.sort%28@array%29%7Coutline">2.2.7
	sort(@array)</a>	32</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.8.reverse%28@array%29%7Coutline">2.2.8
	reverse(@array)</a>	33</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.9.splice%28@array%29%7Coutline">2.2.9
	splice(@array)</a>	34</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.2.10.Undefined%20and%20Uninitialized%20Arrays%7Coutline">2.2.10
	Undefined and Uninitialized Arrays</a>	34</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#2.3.Hashes%7Coutline">2.3
	Hashes</a>	34</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.3.1.exists%20%28%20$hash%7B$key%7D%20%29%7Coutline">2.3.1
	exists ( $hash{$key} )</a>	35</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.3.2.delete%20%28%20$hash%7Bkey%7D%20%29%7Coutline">2.3.2
	delete ( $hash{key} )</a>	37</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.3.3.keys%28%20%25hash%20%29%7Coutline">2.3.3
	keys( %hash )</a>	37</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.3.4.values%28%20%25hash%20%29%7Coutline">2.3.4
	values( %hash )</a>	38</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.3.5.each%28%20%25hash%20%29%7Coutline">2.3.5
	each( %hash )</a>	38</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#2.4.List%20Context%7Coutline">2.4
	List Context</a>	43</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#2.5.References%7Coutline">2.5
	References</a>	45</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.1.Named%20Referents%7Coutline">2.5.1
	Named Referents</a>	46</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.2.References%20to%20Named%20Referents%7Coutline">2.5.2
	References to Named Referents</a>	46</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.3.Dereferencing%7Coutline">2.5.3
	Dereferencing</a>	46</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.4.Anonymous%20Referents%7Coutline">2.5.4
	Anonymous Referents</a>	47</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.5.Complex%20Data%20Structures%7Coutline">2.5.5
	Complex Data Structures</a>	49</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.5.1.Autovivification%7Coutline">2.5.5.1
	Autovivification</a>	50</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.5.2.Multidimensional%20Arrays%7Coutline">2.5.5.2
	Multidimensional Arrays</a>	51</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.5.3.Deep%20Cloning,%20Deep%20Copy%7Coutline">2.5.5.3
	Deep Cloning, Deep Copy</a>	52</font></p>
	<p style="margin-left: 0.59in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.5.4.Data%20Persistence%7Coutline">2.5.5.4
	Data Persistence</a>	52</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.6.Stringification%20of%20References%7Coutline">2.5.6
	Stringification of References</a>	52</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#2.5.7.The%20ref%28%29%20function%7Coutline">2.5.7
	The ref() function</a>	53</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#3.Control%20Flow%7Coutline">3
	Control Flow</a>	54</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#3.1.Labels%7Coutline">3.1
	Labels</a>	56</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#3.2.last%20LABEL;%7Coutline">3.2
	last LABEL;</a>	56</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#3.3.next%20LABEL;%7Coutline">3.3
	next LABEL;</a>	56</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#3.4.redo%20LABEL;%7Coutline">3.4
	redo LABEL;</a>	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#4.Packages%20and%20Namespaces%20and%20Lexical%20Scoping%20%7Coutline">4
	Packages and Namespaces and Lexical Scoping </a>	56</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.1.Package%20Declaration%7Coutline">4.1
	Package Declaration</a>	56</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.2.Declaring%20Package%20Variables%20With%20our%7Coutline">4.2
	Declaring Package Variables With our</a>	57</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.3.Package%20Variables%20inside%20a%20Lexical%20Scope%7Coutline">4.3
	Package Variables inside a Lexical Scope</a>	58</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.4.Lexical%20Scope%7Coutline">4.4
	Lexical Scope</a>	58</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.5.Lexical%20Variables%7Coutline">4.5
	Lexical Variables</a>	59</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.6.Garbage%20Collection%7Coutline">4.6
	Garbage Collection</a>	60</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#4.6.1.Reference%20Count%20Garbage%20Collection%7Coutline">4.6.1
	Reference Count Garbage Collection</a>	61</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#4.6.2.Garbage%20Collection%20and%20Subroutines%7Coutline">4.6.2
	Garbage Collection and Subroutines</a>	61</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.7.Package%20Variables%20Revisited%7Coutline">4.7
	Package Variables Revisited</a>	62</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#4.8.Calling%20local%28%29%20on%20Package%20Variables%7Coutline">4.8
	Calling local() on Package Variables</a>	63</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#5.Subroutines%7Coutline">5
	Subroutines</a>	65</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.1.Subroutine%20Sigil%7Coutline">5.1
	Subroutine Sigil</a>	65</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.2.Named%20Subroutines%7Coutline">5.2
	Named Subroutines</a>	65</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.3.Anonymous%20Subroutines%7Coutline">5.3
	Anonymous Subroutines</a>	66</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.4.Data::Dumper%20and%20subroutines%7Coutline">5.4
	Data::Dumper and subroutines</a>	66</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.5.Passing%20Arguments%20to/from%20a%20Subroutine%7Coutline">5.5
	Passing Arguments to/from a Subroutine</a>	67</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.6.Accessing%20Arguments%20inside%20Subroutines%20via%20@_%7Coutline">5.6
	Accessing Arguments inside Subroutines via @_</a>	67</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.7.Dereferencing%20Code%20References%7Coutline">5.7
	Dereferencing Code References</a>	68</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.8.Implied%20Arguments%7Coutline">5.8
	Implied Arguments</a>	68</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.9.Subroutine%20Return%20Value%7Coutline">5.9
	Subroutine Return Value</a>	69</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.10.Returning%20False%7Coutline">5.10
	Returning False</a>	69</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.11.Using%20the%20caller%28%29%20Function%20in%20Subroutines%7Coutline">5.11
	Using the caller() Function in Subroutines</a>	70</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.12.The%20caller%28%29%20function%20and%20$wantarray%7Coutline">5.12
	The caller() function and $wantarray</a>	71</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#5.13.Context%20Sensitive%20Subroutines%20with%20wantarray%28%29%7Coutline">5.13
	Context Sensitive Subroutines with wantarray()</a>	72</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#6.Compiling%20and%20Interpreting%7Coutline">6
	Compiling and Interpreting</a>	72</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#7.Code%20Reuse,%20Perl%20Modules%7Coutline">7
	Code Reuse, Perl Modules</a>	73</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#8.The%20use%20Statement%7Coutline">8
	The use Statement</a>	74</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#9.The%20use%20Statement,%20Formally%7Coutline">9
	The use Statement, Formally</a>	74</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.1.The%20@INC%20Array%7Coutline">9.1
	The @INC Array</a>	75</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.2.The%20use%20lib%20Statement%7Coutline">9.2
	The use lib Statement</a>	76</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.3.The%20PERL5LIB%20and%20PERLLIB%20Environment%20Variables%7Coutline">9.3
	The PERL5LIB and PERLLIB Environment Variables</a>	76</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.4.The%20require%20Statement%7Coutline">9.4
	The require Statement</a>	76</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.5.MODULENAME%20-%3E%20import%20%28LISTOFARGS%29%7Coutline">9.5
	MODULENAME -&gt; import (LISTOFARGS)</a>	76</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#9.6.The%20use%20Execution%20Timeline%7Coutline">9.6
	The use Execution Timeline</a>	77</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#10.bless%28%29%7Coutline">10
	bless()</a>	78</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#11.Method%20Calls%7Coutline">11
	Method Calls</a>	79</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#11.1.Inheritance%7Coutline">11.1
	Inheritance</a>	81</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#11.2.use%20base%7Coutline">11.2
	use base</a>	82</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#11.3.INVOCANT-%3Eisa%28BASEPACKAGE%29%7Coutline">11.3
	INVOCANT-&gt;isa(BASEPACKAGE)</a>	83</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#11.4.INVOCANT-%3Ecan%28METHODNAME%29%7Coutline">11.4
	INVOCANT-&gt;can(METHODNAME)</a>	83</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#11.5.Interesting%20Invocants%7Coutline">11.5
	Interesting Invocants</a>	83</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#12.Procedural%20Perl%7Coutline">12
	Procedural Perl</a>	84</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#13.Object%20Oriented%20Perl%7Coutline">13
	Object Oriented Perl</a>	84</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#13.1.Class%7Coutline">13.1
	Class</a>	86</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#13.2.Polymorphism%7Coutline">13.2
	Polymorphism</a>	86</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#13.3.SUPER%7Coutline">13.3
	SUPER</a>	87</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#13.4.Object%20Destruction%7Coutline">13.4
	Object Destruction</a>	89</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#14.Object%20Oriented%20Review%7Coutline">14
	Object Oriented Review</a>	89</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.1.Modules%7Coutline">14.1
	Modules</a>	89</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.2.use%20Module%7Coutline">14.2
	use Module</a>	90</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.3.bless%20/%20constructors%7Coutline">14.3
	bless / constructors</a>	90</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.4.Methods%7Coutline">14.4
	Methods</a>	90</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.5.Inheritance%7Coutline">14.5
	Inheritance</a>	91</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#14.6.Overriding%20Methods%20and%20SUPER%7Coutline">14.6
	Overriding Methods and SUPER</a>	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#15.CPAN%7Coutline">15
	CPAN</a>	91</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#15.1.CPAN,%20The%20Web%20Site%7Coutline">15.1
	CPAN, The Web Site</a>	91</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#15.2.CPAN,%20The%20Perl%20Module%7Coutline">15.2
	CPAN, The Perl Module</a>	92</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#15.3.Plain%20Old%20Documentation%20%28POD%29%20and%20perldoc%7Coutline">15.3
	Plain Old Documentation (POD) and perldoc</a>	94</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#15.4.Creating%20Modules%20for%20CPAN%20with%20h2xs%7Coutline">15.4
	Creating Modules for CPAN with h2xs</a>	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#16.The%20Next%20Level%7Coutline">16
	The Next Level</a>	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#17.Command%20Line%20Arguments%7Coutline">17
	Command Line Arguments</a>	95</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#17.1.@ARGV%7Coutline">17.1
	@ARGV</a>	96</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#17.2.Getopt::Declare%7Coutline">17.2
	Getopt::Declare</a>	98</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#17.2.1.Getopt::Declare%20Sophisticated%20Example%7Coutline">17.2.1
	Getopt::Declare Sophisticated Example</a>	99</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#18.File%20Input%20and%20Output%7Coutline">18
	File Input and Output</a>	101</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.1.open%7Coutline">18.1
	open</a>	101</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.2.close%7Coutline">18.2
	close</a>	101</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.3.read%7Coutline">18.3
	read</a>	101</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.4.write%7Coutline">18.4
	write</a>	102</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.5.File%20Tests%7Coutline">18.5
	File Tests</a>	103</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.6.File%20Globbing%7Coutline">18.6
	File Globbing</a>	103</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#18.7.File%20Tree%20Searching%7Coutline">18.7
	File Tree Searching</a>	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#19.Operating%20System%20Commands%7Coutline">19
	Operating System Commands</a>	104</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#19.1.The%20system%28%29%20function%7Coutline">19.1
	The system() function</a>	104</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#19.2.The%20Backtick%20Operator%7Coutline">19.2
	The Backtick Operator</a>	105</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#19.3.Operating%20System%20Commands%20in%20a%20GUI%7Coutline">19.3
	Operating System Commands in a GUI</a>	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.Regular%20Expressions%7Coutline">20
	Regular Expressions</a>	105</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.1.Variable%20Interpolation%7Coutline">20.1
	Variable Interpolation</a>	107</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.2.Wildcard%20Example%7Coutline">20.2
	Wildcard Example</a>	108</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.3.Defining%20a%20Pattern%7Coutline">20.3
	Defining a Pattern</a>	108</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.4.Metacharacters%7Coutline">20.4
	Metacharacters</a>	109</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.5.Capturing%20and%20Clustering%20Parenthesis%7Coutline">20.5
	Capturing and Clustering Parenthesis</a>	111</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.5.1.$1,%20$2,%20$3,%20etc%20Capturing%20parentheses%7Coutline">20.5.1
	$1, $2, $3, etc Capturing parentheses</a>	111</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.5.2.Capturing%20parentheses%20not%20capturing%7Coutline">20.5.2
	Capturing parentheses not capturing</a>	112</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.6.Character%20Classes%7Coutline">20.6
	Character Classes</a>	112</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.6.1.Metacharacters%20Within%20Character%20Classes%7Coutline">20.6.1
	Metacharacters Within Character Classes</a>	112</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.7.Shortcut%20Character%20Classes%7Coutline">20.7
	Shortcut Character Classes</a>	113</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.8.Greedy%20%28Maximal%29%20Quantifiers%7Coutline">20.8
	Greedy (Maximal) Quantifiers</a>	113</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.9.Thrifty%20%28Minimal%29%20Quantifiers%7Coutline">20.9
	Thrifty (Minimal) Quantifiers</a>	114</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.10.Position%20Assertions%20/%20Position%20Anchors%7Coutline">20.10
	Position Assertions / Position Anchors</a>	115</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.10.1.The%20%5Cb%20Anchor%7Coutline">20.10.1
	The \b Anchor</a>	116</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.10.2.The%20%5CG%20Anchor%7Coutline">20.10.2
	The \G Anchor</a>	116</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.11.Modifiers%7Coutline">20.11
	Modifiers</a>	118</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.11.1.Global%20Modifiers%7Coutline">20.11.1
	Global Modifiers</a>	118</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.11.2.The%20m%20And%20s%20Modifiers%7Coutline">20.11.2
	The m And s Modifiers</a>	118</font></p>
	<p style="margin-left: 0.39in; margin-bottom: 0in;"><font face="Courier, monospace"><a href="#20.11.3.The%20x%20Modifier%7Coutline">20.11.3
	The x Modifier</a>	120</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.12.Modifiers%20For%20m%7B%7D%20Operator%7Coutline">20.12
	Modifiers For m{} Operator</a>	121</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.13.Modifiers%20for%20s%7B%7D%7B%7D%20Operator%7Coutline">20.13
	Modifiers for s{}{} Operator</a>	121</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.14.Modifiers%20for%20tr%7B%7D%7B%7D%20Operator%7Coutline">20.14
	Modifiers for tr{}{} Operator</a>	121</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.15.The%20qr%7B%7D%20function%7Coutline">20.15
	The qr{} function</a>	121</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.16.Common%20Patterns%7Coutline">20.16
	Common Patterns</a>	121</font></p>
	<p style="margin-left: 0.2in; margin-bottom: 0in; text-decoration: none;">
	<font face="Courier, monospace"><a href="#20.17.Regexp::Common%7Coutline">20.17
	Regexp::Common</a>	122</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#21.Parsing%20with%20Parse::RecDescent%7Coutline">21
	Parsing with Parse::RecDescent</a>	122</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#22.Perl,%20GUI,%20and%20Tk%7Coutline">22
	Perl, GUI, and Tk</a>	125</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace"><a href="#23.%20GNU%20Free%20Documentation%20License%7Coutline">23
	 GNU Free Documentation License</a>	127</font></p>
</div>
<p class="western" style="margin-bottom: 0in; text-decoration: none;"><br>
</p>
<p class="western" style="margin-bottom: 0in; text-decoration: none;"><br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-before: auto;">
<br>
</p>
<h1 class="western" style="page-break-inside: avoid; page-break-before: always;"><a name="1.The Impatient Introduction to Perl|outline"></a>
<font face="Times, serif">1 The Impatient Introduction to Perl</font></h1>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">This
document is for people who either want to learn perl or are already
programming in perl and just do not have the patience to scrounge for
information to learn and use perl. This document should also find use
as a handy desk reference for some of the more common perl related
questions.</font></p>
<h2 class="western" style="font-style: normal; page-break-inside: avoid;"><a name="1.1.The history of perl in 100 words or less|outline"></a>
<font face="Times, serif">1.1 The history of perl in 100 words or
less</font></h2>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">In
the mid 1980s, Larry Wall was working as a sys-admin and found that
he needed to do a number of common, yet oddball functions over and
over again. And he did not like any of the scripting languages that
were around at the time, so he invented Perl. Version 1 was released
circa 1987.  A few changes have occurred between then and now. The
current version of Perl has exceeded 5.8.0 and is a highly
recommended upgrade.</font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">Perl
6 is on the drawing board as a fundamental rewrite of the language.
It is not available yet, and probably will not be available for some
time. </font>
</p>
<h2 class="western" style="font-style: normal; page-break-inside: avoid;"><a name="1.2.Basic Formatting for this Document|outline"></a>
<font face="Times, serif">1.2 Basic Formatting for this Document</font></h2>
<p class="text-body-preceding-code-block-western">This document is
formatted into text sections, code sections, and shell sections. This
sentence is part of a text section. Text sections will extend to the
far left margin and will use a non-monospaced font. Text sections
contain descriptive text.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Code sections are indented.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">They also use a monospaced font.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">This is a code section, which
represents</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">code to type into a script.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">You will need to use a TEXT EDITOR, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">not a WORD PROCESSOR to create these
files.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Generally, the code is contained in
one file,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">and is executed via a shell command.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">If the code section covers multiple
files,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">each file will be labeled.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:MyFile.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">This code will be placed in a</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">file called MyFile.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:myscript.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">This code will be placed in a file</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">called myscript.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">The first line of myscript.pl will be
the</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">line with #!/usr/local/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; shell sections are indented like
code sections</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; shell sections also use
monospaced fonts.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; shell sections differ from code
sections in</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; that shell sections start with a
'&gt;' character</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; which represents a shell prompt.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; shell sections show commands to
type on </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; the command line.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; shell sections also show the
output of a script,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; if any exists. </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; In simple examples, the code is
shown in a </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; code section, immediately
followed by the output </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; from running the script. The
command to run</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; the script is dropped to save
space.</font></p>
<p class="text-body-preceding-code-block-western">As an example, the
code for a simple "Hello World" script is shown here. It
can be typed into a file of any name. The name of the file is not
important. The command to execute the script is not important either.
In this example, the code is important, and the output is important,
so they are they only things shown.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "Hello World\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Hello World</font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">THIS
DOCUMENT REFERS TO (LI/U)NIX PERL ONLY. Much of this will translate
to Mac Perl and Windows Perl, but the exact translation will be left
as an exercise to the reader.</font></p>
<h2 class="western" style="font-style: normal; page-break-inside: avoid;"><a name="1.3.Do You Have Perl Installed|outline"></a>
<font face="Times, serif">1.3 Do You Have Perl Installed</font></h2>
<p class="text-body-preceding-code-block-western">To find out if you
have perl installed and its version:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; perl -v</font></p>
<p class="text-body-preceding-code-block-western">You should have at
least version 5.004. If you have an older version or if you have no
perl installed at all, you can download it for free from</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"><a href="http://www.cpan.org/">http://www.cpan.org</a></font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">CPAN
is an acronym for Comprehensive Perl Archive Network. The CPAN site
contains the latest perl for download and installation, as well as a
TON of perl modules for your use.</font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">If
you are a beginner, get your sys-admin to install perl for you. Even
if you are not a beginner, get your sys-admin to install perl for
you. </font>
</p>
<h2 class="western" style="font-style: normal;"><a name="1.4.Your First Perl Script, EVER|outline"></a>
<font face="Times, serif">1.4 Your First Perl Script, EVER</font></h2>
<p class="text-body-preceding-code-block-western">Create a file
called hello.pl using your favorite text editor. Type in the
following:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/bin/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use strict; 	# comment</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print "Hello World \n";</font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">(The
 #! on the first line is sometimes pronounced "shebang")</font></p>
<p class="western" style="page-break-inside: avoid;"><font face="Times, serif">(The
.pl extension is simply a standard accepted extension for perl
scripts.)</font></p>
<p class="text-body-preceding-code-block-western">Run the script:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perl hello.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Hello World</font></p>
<p class="text-body-preceding-code-block-western">This calls perl and
passes it the name of the script to execute. You can save yourself a
little typing if you make the file executable:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; chmod +x hello.pl</font></p>
<p class="text-body-preceding-code-block-western">And then run the
script directly. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; hello.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Hello World</font></p>
<p class="text-body-preceding-code-block-western">If <font face="Courier, monospace">"."</font>
is not in your <font face="Courier, monospace">PATH</font> variable,
you will have to run the script by typing:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; ./hello.pl</font></p>
<p class="western" style="page-break-inside: avoid;">HOORAY! Now go
update your resume.</p>
<p class="western" style="page-break-inside: avoid;">Anything from a 
#  character to the end of the line is a comment. 
</p>
<h2 class="western" style="font-style: normal; page-break-inside: avoid;"><a name="1.5.Default Script Header|outline"></a>
1.5 Default Script Header</h2>
<p class="text-body-preceding-code-block-western">All the code
examples are assumed to have the following script header, unless
otherwise stated. It uses your PATH environment variable to determine
which perl executable to run. If you need to have different versions
of perl installed on your system, you can control which version of
perl they will run by changing your PATH variable without having to
change your script.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/bin/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use strict; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"><font face="Courier, monospace">use
</font><a href="data::Dumper"><font face="Courier, monospace">Data::Dumper</font></a><font face="Courier, monospace">;</font></font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="1.6.Free Reference Material|outline"></a>
1.6 <span style="font-style: normal;">Free Reference Material</span></h2>
<p class="text-body-preceding-code-block-western">You can get quick
help from the standard perl installation.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perl -h</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perldoc</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perldoc -h</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; perldoc perldoc</font></p>
<p class="western" style="page-break-inside: avoid;">FAQs on CPAN: 
<a href="http://www.cpan.org/cpan-faq.html">http://www.cpan.org/cpan-faq.html</a></p>
<p class="western" style="page-break-inside: avoid;">Mailing Lists on
CPAN: <a href="http://list.cpan.org/">http://list.cpan.org</a></p>
<p class="western" style="page-break-inside: avoid;">More free
documentation on the web:  <a href="http://www.perldoc.com/">http://www.perldoc.com</a></p>
<p class="western" style="page-break-inside: avoid;">Still more free
documentation on the web: <a href="http://learn.perl.org/">http://learn.perl.org</a></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="1.7.Cheap Reference Material |outline"></a>
1.7 Cheap Reference Material 
</h2>
<p class="western" style="page-break-inside: avoid;">"Programming
Perl" by Larry Wall, Tom Christiansen, and Jon Orwant. Highly
recommended book to have handy at all times. It is sometimes referred
to as the "Camel Book" by way of the camel drawing on its
cover. The publisher, O'Reilly, has printed enough computer books to
choke a, well, camel, and each one has a different animal on its
cover. Therefore if you hear reference to some animal book, it is
probably an O'Reilly book. Well, unless its the "Dragon Book",
because that refers to a book called "Compilers" by Aho,
Sethi, and Ullman. 
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="1.8.Acronyms and Terms|outline"></a>
1.8 Acronyms and Terms</h2>
<p class="western" style="page-break-inside: avoid;"><b>Perl</b>:
Originally, "Pearl" shortened to "Perl" to gain
status as a 4-letter word. Now considered an acronym for Practical
Extraction and Report Language, as well as Pathologically Eclectic
Rubbish Lister. The name was invented first. The acronyms followed.
Note that this is "Perl" with a capital "P". The
"perl" with a lower case "p" refers to the
exectuable found somewhere near /usr/local/bin/perl or via /bin/env
perl.</p>
<p class="western" style="page-break-inside: avoid;"><b>CPAN</b>:
Comprehensive Perl Archive Network. See <a href="http://www.cpan.org/">http://www.cpan.org</a>
for more.</p>
<p class="western" style="page-break-inside: avoid;"><b>DWIM</b>: Do
What I Mean. Once upon a time, the standard mantra for computer
inflexibility was this: "I really hate this darn machine, I wish
that they would sell it. It never does what I want, but only what I
tell it." DWIM-iness is an attempt to embed perl with telepathic
powers such that it can understand what you wanted to write in your
code even though you forgot to actually type it. Well, alright, DWIM
is just a way of saying the language was designed by some really lazy
programmers so that you could be even lazier than they were. (They
had to write perl in C, so they could not be TOO lazy.)</p>
<p class="text-body-preceding-code-block-western"><b>AUTOVIVIFY</b>: 
"auto" meaning "self". "vivify" meaning
"alive". To bring oneself to life. Generally applies to
perl variables that can grant themselves into being without an
explicit declaration from the programmer. Part of perl's DWIM-ness. 
"Autovivify" is a verb. The noun form is
"autovivification". Sometimes, autovivification is not what
you meant your code to do, and for some reason, when "do what I
mean" meets autovivification in perl, autovivification wins. And
now, a Haiku:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Do What I Mean and</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Autovivification</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">sometimes unwanted</font></p>
<p class="western"><b>TMTOWTDI</b>: There is More Than One Way To Do
It. An acknowledgement that any programming problem has more than one
solution. Rather than have perl decide which solution is best, it
gives you all the tools and lets you choose. This allows a programmer
to select the tool that will let him get his job done. Sometimes, it
gives a perl newbie just enough rope to hang himself.</p>
<p class="western"><b>Foo Fighters</b>: A phrase used around the time
of WWII by radar operators to describe a signal that could not be
explained. Later became known as a UFO. This has nothing to do with
perl, except that "foo" is a common variable name used in
perl.</p>
<p class="western">Fubar: Another WWII phrase used to indicate that a
mission had gone seriously awry or that a piece of equipment was
inoperative. An acronym for Fouled Up Beyond All Recognition and
similar interpretations. This has nothing to do with perl either,
except that fubar somehow got mangled into foobar, and perl is often
awash in variables named "foo" and "bar",
especially if the programmer wishes to hide the fact that he did not
understand his code well enough to come up with better names. If you
use a $foo variable in your code, you deserve to maintain it.</p>
<h1 class="western"><a name="2.Storage|outline"></a>2 Storage</h1>
<p class="western">Perl has three basic storage types: Scalars,
Arrays, and Hashes.</p>
<p class="western">The most basic storage type is a Scalar.</p>
<p class="western">Arrays and Hashes use Scalars to build more
complex data types.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="2.1.Scalars|outline"></a>
2.1 Scalars</h2>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
Scalars are preceded with a dollar sign sigil. A "$" is a
stylized "S".</p>
<p class="western" style="margin-left: 0.87in; page-break-after: avoid;">
sigil : A symbol. In Perl a sigil refers to the symbol in front of a
variable.</p>
<p class="western" style="page-break-after: avoid;">Scalars can store
Strings, Numbers (integers and floats),  References, and Filehandles.</p>
<p class="text-body-preceding-code-block-western">Perl is smart
enough to know which type you are putting into a scalar and handle
it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $diameter =  42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $pi = 3.1415;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $initial = 'g';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'John Doe';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $ref_to_name = \$name</font></p>
<p class="text-body-preceding-code-block-western">Without "use
strict;" and without declaring a variable with a "my",
using a variable causes perl to create one and initialize it to
undef. This undef value will stringify to "" or numify to
0, depending how the undefined variable is used. This is called
autovivication. (Stringification and Numification are covered later.)</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Autovivify : <i>to bring oneself to
life.</i></font></p>
<p class="text-body-preceding-code-block-western">In some situations,
autovivication is handy. However, in certain situations,
autovivification can be an unholy monster.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $circumference = $pie * $diameter;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># oops, $pie doesn't exist.
Autovivified to undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># numified to 0, therefore
$circumference is zero.</font></p>
<p class="western">Without <font face="Courier, monospace"> use
warnings; use strict;</font>  perl will autovivify a new variable
called "pie", initialize it to zero, and assume that is
what you meant to do. There is no reason that warnings and strictness
should not be turned on in your scripts. 
</p>
<h3 class="western"><a name="2.1.1.Scalar Strings|outline"></a>2.1.1 Scalar
Strings</h3>
<p class="western">Scalars can store strings. You do not have to
declare the length of the string, perl just handles it for you
automatically. 
</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.1.String Literals|outline"></a>
2.1.1.1 String Literals</h4>
<p class="text-body-preceding-code-block-western">String literals
must be in single or double quotes or you will get an error.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print hello;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Error: Unquoted string "hello"
may clash with reserved word</font></p>
<p class="text-body-preceding-code-block-western">You can use single
quotes or double quotes to set off a string literal:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'mud';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $greeting = "hello, $name\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $greeting;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; hello, mud</font></p>
<p class="text-body-preceding-code-block-western">You can also create
a list of string literals using the qw() function.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my ($first,$last)=qw( John Doe );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "first is '$first'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "last is '$last'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; first is 'John'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; last is 'Doe'</font></p>
<h4 class="western" style="font-style: normal; page-break-inside: avoid;"><a name="2.1.1.2.Single quotes versus Double quotes|outline"></a>
2.1.1.2 Single quotes versus Double quotes</h4>
<p class="text-body-preceding-code-block-western">Single quoted
strings are a "what you see is what you get" kind of thing.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'mud';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print 'hello $name';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; hello $name</font></p>
<p class="western">Double quotes means that you get SOME variable
interpolation during string evaluation. Complex variables, such as a
hash lookup, will not be interpolated properly in double quotes.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'mud';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "hello $name \n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; hello mud</font></p>
<p class="western"><font face="Times, serif"><font size="3">Note: a
double-quoted "\n" is a new-line character.</font></font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.3.chomp|outline"></a>
2.1.1.3 chomp</h4>
<p class="text-body-preceding-code-block-western">You may get rid of
a newline character at the end of a string by chomp-ing the string.
The chomp function removes one new line from the end of the string
even if there are multiple newlines at the end. If there are no
newlines, chomp leaves the string alone. The return value of chomp is
what was chomped (seldom used).</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">My $string = "hello world\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">chomp($string);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string' \n"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is 'hello world' ...</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.4.concatenation|outline"></a>
2.1.1.4 concatenation</h4>
<p class="text-body-preceding-code-block-western"><font face="Times, serif">String
concatenation uses the period character "."</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $fullname = 'mud' . "bath";</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.5.repetition|outline"></a>
2.1.1.5 repetition</h4>
<p class="text-body-preceding-code-block-western">Repeat a string
with the "x" operator.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $line = '-' x 80;  # $line is
eighty hypens</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.6.length|outline"></a>
2.1.1.6 length</h4>
<p class="text-body-preceding-code-block-western">Find out how many
characters are in a string with length().</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $len = length($line);	# $len is 80</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.7.substr|outline"></a>
2.1.1.7 substr</h4>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">substr ( STRING_EXPRESSION, OFFSET,
LENGTH);</font></p>
<p class="text-body-preceding-code-block-western">Spin, fold, and
mutilate strings using substr(). The substr function gives you fast
access to get and modify chunks of a string. You can quickly get a
chunk of LENGTH characters starting at OFFSET from the beginning or
end of the string (negative offsets go from the end). The substr
function then returns the chunk.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $chunk = substr('the rain in
spain', 9, 2);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "chunk is '$chunk'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; chunk is 'in' ...</font></p>
<p class="text-body-preceding-code-block-western">The substr function
can also be assigned to, replacing the chunk as well. You need a
string contained in a variable that can be modified, rather than
using a constant literal in the example above.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = 'the rain in spain';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">substr($string, 9, 2) = 'beyond';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is 'the rain beyond
spain' ...</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.8.split|outline"></a>
2.1.1.8 split</h4>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">split(/PATTERN/,
STRING_EXPRESSION,LIMIT);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Use the split
function to break a string expression into components when the
components are separated by a common substring pattern. For example,
tab separated data in a single string can be split into separate
strings.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $tab_sep_data =
"John\tDoe\tmale\t42";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my ($first,$last,$gender,$age) </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	= split(/\t/, $tab_sep_data);</font></p>
<p class="text-body-preceding-code-block-western">You can break a
string into individual characters by calling split with an empty
string pattern "".  The /PATTERN/ in split() is a Regular
Expression, which is complicated enough to get its own chapter.
However, some common regular expression PATTERNS for split are:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">\t	tab-separated data</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">\s+	whitespace-separated data</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">\s*,\s*	comma-separated data</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.9.join|outline"></a>
2.1.1.9 join</h4>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">join('SEPARATOR STRING', STRING1,
STRING2, ...);</font></p>
<p class="western" style="margin-left: 0.87in; margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Use join to stitch
a list of strings into a single string.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = join(" and ", </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	'apples', 'bananas', 'peaches');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is 'apples and bananas
and peaches'...</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.1.10.qw|outline"></a>
2.1.1.10 qw</h4>
<p class="text-body-preceding-code-block-western">The qw() function
takes a list of barewords and quotes them for you.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	join(" and ", qw(apples
bananas peaches));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is 'apples and bananas
and peaches'...</font></p>
<h4 class="western"><a name="2.1.1.11.Multi-Line Strings, HERE Documents|outline"></a>
2.1.1.11 Multi-Line Strings, HERE Documents</h4>
<p class="text-body-preceding-code-block-western">Perl allows you to
place a multi-line string in your code by using what it calls a "here
document”. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">My $string = &lt;&lt;”ENDOFDOCUMENT”;</font></p>
<p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">Do
What I Mean and</font></p>
<p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">Autovivification</font></p>
<p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">sometimes
unwanted</font></p>
<p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">ENDOFDOCUMENT</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string'”;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; string is 'Do What I Mean and</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Autovivification</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; sometimes unwanted' at ...</font></p>
<p class="western">The '&lt;&lt;' indicates a HERE document, followed
by the name of the label indicating the end of the here document. 
Enclosing the label in double quotes means that perl variables in the
document will get interpolated as strings. Enclosing the label in
single quotes means that no string interpolation occurs.</p>
<p class="western">Perl then reads the lines after the '&lt;&lt;' as
string literal content until it sees the end of string label
positioned at the beginning of a line.</p>
<h3 class="western" style="page-break-inside: avoid; page-break-before: always;"><a name="2.1.2.Scalar Numbers|outline"></a>
2.1.2 Scalar Numbers</h3>
<p class="text-body-preceding-code-block-western">Perl generally uses
floats internally to store numbers. If you specify something that is
obviously an integer, it will use an integer. Either way, you simply
use it as a scalar.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $days_in_week = 7;	# scalar =&gt;
integer</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $temperature = 98.6;	# scalar =&gt;
float</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.1.Numeric Literals|outline"></a>
2.1.2.1 Numeric Literals</h4>
<p class="western">Perl allows several different formats for numeric
literals, including integer, floating point, and scientific notation,
as well as decimal, octal, and hexadecimal. 
</p>
<p class="western">Binary numbers begin with "0b"</p>
<p class="western">hexadecimal numbers begin with "0x"</p>
<p class="western">Octal number begin with a "0"</p>
<p class="text-body-preceding-code-block-western">All other numeric
literals are assumbed to be decimal. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $solar_temp_c	= 1.5e7;		#
centigrade</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $solar_temp_f	= 27_000_000.0;	#
fahrenheit</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $base_address 	= 01234567;	# octal</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $high_address	= 0xfa94;	#
hexadecimal</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $low_address	= 0b100101;	# binary</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.2.Numeric Functions|outline"></a>
2.1.2.2 Numeric Functions</h4>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.3.abs|outline"></a>
2.1.2.3 abs</h4>
<p class="text-body-preceding-code-block-western">Use abs to get the
absolute value of a number.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $var1 = abs(-3.4);	# var1 is 3.4</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $var2 = abs(5.9);	# var2 is 5.9</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.4.int|outline"></a>
2.1.2.4 int</h4>
<p class="text-body-preceding-code-block-western">Use "int"
to convert a floating point number to an integer. Note that this
truncates everything after the decimal point, which means you do NOT
get rounding. Truncating means that positive numbers always get
smaller and negative numbers always get bigger.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $price = 9.95;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $dollars = int ($price);  </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># dollars is 9, not 10! false
advertising!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $y_pos = -5.9;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $y_int = int($y_pos);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># y_int is -5 (-5 is "bigger"
than -5.9)</font></p>
<p class="text-body-preceding-code-block-western">If you want to
round a float to the nearest integer, you will need to write a bit of
code. One way to accomplish it is to use sprintf:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $price = 9.95;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $dollars = sprintf("%.0f",
$price);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># dollars is 10</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.5.trigonometry (sin,cos,tan)|outline"></a>
2.1.2.5 trigonometry (sin,cos,tan)</h4>
<p class="text-body-preceding-code-block-western">The sin, cos, and
tan functions return the sine, cosine, and tangent of a value given
in RADIANS. If you have a value in DEGREES, multiply it by (pi/180)
first.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $angle = 45;                      
 # 45 deg</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $radians = $angle * ( 3.14 / 180
); # .785 rad</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $sine_deg = sin($angle);   # 0.707</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $sine_rad = sin($radians); # 0.707</font></p>
<p class="western">If you need inverse sine, cosine, or tangent, then
use the Math::Trig module on CPAN.</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.6.exponentiation|outline"></a>
2.1.2.6 exponentiation</h4>
<p class="text-body-preceding-code-block-western">Use the <font face="Courier, monospace">"**"</font>
operator to raise a number to some power.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $seven_squared 	= 7 ** 2; # 49</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $five_cubed    	= 5 ** 3; #125</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $three_to_the_fourth 	= 3 ** 4; #
81</font></p>
<p class="text-body-preceding-code-block-western">Use fractional
powers to take a root of a number:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $square_root_of_49 	=  49 **
(1/2);	# 7</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $cube_root_of_125 	= 125 **
(1/3);	# 5</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $fourth_root_of_81 	=  81 **
(1/4);	# 3</font></p>
<p class="western">Standard perl cannot handle imaginary numbers. Use
the Math::Complex module on CPAN.</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.7.sqrt|outline"></a>
2.1.2.7 sqrt</h4>
<p class="text-body-preceding-code-block-western">Use sqrt to take
the square root of a positive number.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $square_root_of_123 = sqrt(123); #
11.0905</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.8.natural logarithms(exp,log)|outline"></a>
2.1.2.8 natural logarithms(exp,log)</h4>
<p class="text-body-preceding-code-block-western">The <font face="Courier, monospace">exp</font>
function returns <i><font style="font-size: 16pt;" size="4">e</font></i>
to the power of the value given. To get <i><font style="font-size: 16pt;" size="4">e</font></i>,
call <font face="Courier, monospace">exp(1);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $value_of_e = exp(1); 	# 2.7183</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $big_num= exp(42);	# 2.7183 ** 42
= 1.7e18</font></p>
<p class="text-body-preceding-code-block-western">The log function
returns the inverse exp() function, which is to say, log returns the
number to which you would have to raise <i><font style="font-size: 16pt;" size="4">e</font></i>
to get the value passed in.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $inv_exp = log($big_num);	#
inv_exp = 42</font></p>
<p class="text-body-preceding-code-block-western">If you want another
base, then use this subroutine:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub log_x_base_b {return
log($_[0])/log($_[1]);}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># want the log base 10 of 12345</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># i.e. to what power do we need to
raise the</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># number 10 to get the value of
12345?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $answer = log_x_base_b(12345,10);
# answer = 4.1</font></p>
<p class="text-body-preceding-code-block-western">Note that inverse
natural logs can be done with exponentiation, you just need to know
the value of the magic number <i><font style="font-size: 16pt;" size="4">e</font></i>
 (~ 2.718281828). The exp function is straightforward exponentiation:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># big_num = 2.7183 ** 42 = 1.7e18</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $big_num = $value_of_e ** 42;	</font></p>
<p class="text-body-preceding-code-block-western">Natural logarithms
simply use the inverse of the value (i.e. 1/value) with
exponentiation.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># inv_exp = 2.7183 ** (1/1.7e18) = 42</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $inv_exp = $value_of_e **
(1/$big_num);</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.2.9.random numbers (rand, srand)|outline"></a>
2.1.2.9 random numbers (rand, srand)</h4>
<p class="western">The rand function is a pseudorandom number
generator (PRNG). 
</p>
<p class="western">If a value is passed in, rand returns a number
that satisfies ( 0 &lt;= return &lt;=input )</p>
<p class="western">If no value is passed in, rand returns a number in
the range ( 0 &lt;= return &lt; 1 )</p>
<p class="western">The srand function will seed the PRNG with the
value passed in. If no value is passed in, srand will seed the PRNG
with something from the system that will give it decent randomness.
You can pass in a fixed value to guarantee the values returned by
rand will always follow the same sequence (and therefore are
predictable). You should only need to seed the PRNG once. If you have
a version of perl greater than or equal to 5.004, you should not need
to call it at all, because perl will call srand at startup.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.3.Converting Between Strings and Numbers|outline"></a>
2.1.3 Converting Between Strings and Numbers</h3>
<p class="western" style="page-break-inside: avoid; page-break-before: auto;">
Many languages require the programmer to explicitely convert numbers
to strings before printing them out and to convert strings to numbers
before performing arithemetic on them. Perl is not one of these
languages.</p>
<p class="western">Perl will attempt to apply Do What I Mean to your
code and just Do The Right Thing. There are two basic conversions
that can occur: stringification and numification.</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.3.1.Stringify|outline"></a>
2.1.3.1 Stringify</h4>
<p class="western">Stringify: Converting something other than a
string to a string form.</p>
<p class="text-body-preceding-code-block-western">Perl will
automatically convert a number (integer or floating point) to a
string format before printing it out.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $mass = 7.3;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $volume = 4;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "mass is '$mass'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "volume is '$volume'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; mass is '7.3' ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; volumn is '4' ...</font></p>
<p class="western"><font face="Times, serif">Even though $mass is
stored internally as a floating point number and $volume is stored
internally as an integer, the code did not have to explicitely
convert these numbers to string format before printing them out. Perl
will attempt to convert the numbers into the appropriate string
representation. If you do not want the default format, use sprintf.</font></p>
<p class="text-body-preceding-code-block-western"><font face="Times, serif">If
you want to force stringification, simply concatenate a null string
onto the end of the value.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $mass = 7.3;			# 7.3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $string_mass = $mass .= '';	#
'7.3'</font></p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.3.1.1.sprintf|outline"></a>
2.1.3.1.1 sprintf</h5>
<p class="text-body-preceding-code-block-western">Use sprintf to
control exactly how perl will convert a number into string format.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sprintf ( FORMAT_STRING,
LIST_OF_VALUES );</font></p>
<p class="western" style="margin-left: 0.87in; margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p class="text-body-preceding-code-block-western">For example:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $pi = 3.1415;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = sprintf("%06.2f",$pi);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "str is '$str'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; str is '003.14' ...</font></p>
<p class="text-body-preceding-code-block-western">Decoding the above
format string:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">%  =&gt; format</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">0  =&gt; fill leading spaces with
zero</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">6  =&gt; total length, including
decimal point</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">.2 =&gt; put two places after the
decimal point</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">f  =&gt; floating point notation</font></p>
<p class="text-body-preceding-code-block-western">To convert a number
to a hexadecimal, octal, binary, or decimal formated string, use the
following FORMAT_STRINGS:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">hexadecimal	"%lx"	The
letter 'l' (L) </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">octal		"%lo"	indicates the
input is</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">binary		"%lb"	an integer,
possibly</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">decimal integer	"%ld"	a
Long integer.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">decimal float	"%f"	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">scientific	"%e"</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.3.2.Numify|outline"></a>
2.1.3.2 Numify</h4>
<p class="western">Numify: Converting something other than a number
to a numeric form.</p>
<p class="western">Sometimes you have string information that
actually represents a number. For example, a user might enter the
string "19.95" which must be converted to a float before
perl can perform any arithemetic on it.</p>
<p class="text-body-preceding-code-block-western">You can force
numification of a value by adding integer zero to it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-before: auto; page-break-after: avoid;">
<font face="Courier, monospace">my $user_input = '19.95';		# '19.95'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $price = $user_input+0;	# 19.95</font></p>
<p class="western"><font face="Times, serif">If the string is NOT in
base ten format, then use oct() or hex()</font></p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.3.2.1.oct|outline"></a>
2.1.3.2.1 oct</h5>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
The <font face="Courier, monospace">oct</font> function can take a
string that fits the octal, hexadecimal, or binary format and convert
it to an integer.</p>
<p class="western" style="page-break-after: avoid;">binary formatted
strings must start with "0b"</p>
<p class="western" style="page-break-after: avoid;">hexadecimal
formatted strings must start with "0x"</p>
<p class="western" style="page-break-after: avoid;">All other numbers
are assumed to be octal strings. 
</p>
<p class="western">Note: even though the string might not start with
a zero (as required by octal literals), oct will assume the string is
octal.  This means calling oct() on a decimal number could be a bad
thing.</p>
<p class="text-body-preceding-code-block-western">To handle a string
that could contain octal, hexadecimal, binary, OR decimal strings, 
you could assume that octal strings must start with "0".
Then, if the string starts with zero, call oct on it, else assume
it's decimal. This example uses regular expressions and the
conditional operator.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $num = ($str=~m{^0}) ? oct($str) :
$str + 0;</font></p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.3.2.2.hex|outline"></a>
2.1.3.2.2 hex</h5>
<p class="western">The hex() function takes a string in hex format
and converts it to integer. The hex() function is like oct() except
that hex() only handles hex base strings, and it does not require a
"0x" prefix.</p>
<h5 class="western"><a name="2.1.3.2.3.Base Conversion Overview|outline"></a>
2.1.3.2.3 Base Conversion Overview</h5>
<p class="text-body-preceding-code-block-western">Given a decimal
number:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $decimal=12;</font></p>
<p class="text-body-preceding-code-block-western">Convert from
decimal to another base using sprintf:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $hex = sprintf("%lx",
$decimal);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $oct = sprintf("%lo",
$decimal);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $bin = sprintf("%lb",
$decimal);</font></p>
<p class="text-body-preceding-code-block-western">If you want to pad
the most significant bits with zeroes and you know the width, use
this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># 08 assumes width is 8 characters</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $p_hex = sprintf("%08lx",
$decimal);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $p_oct = sprintf("%08lo",
$decimal);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $p_bin = sprintf("%08lb",
$decimal);</font></p>
<p class="text-body-preceding-code-block-western">If you have a
string and you want to convert it to decimal, use the conditional
operator and oct().</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub convert_to_decimal</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{ ($_[0]=~m{^0}) ? Oct($_[0]) : $_[0]
+ 0; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn convert_to_decimal('42');		# dec</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn convert_to_decimal('032');		#
oct</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn convert_to_decimal('0xff');		#
hex</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">warn
convert_to_decimal('0b1001011');	# bin</font></p>
<p class="text-body-preceding-code-block-western">If you want to know
how many bits it would take to store a number, convert it to binary
using sprintf (don't pad with zeroes) and then call length() on it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">warn length(sprintf("%lb",
255));  # 8</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.4.Undefined and Uninitialized Scalars|outline"></a>
2.1.4 Undefined and Uninitialized Scalars</h3>
<p class="western">All the examples above initialized the scalars to
some known value before using them. You can declare a variable but
not initialize it, in which case, the variable is undefined.</p>
<p class="western">If you use a scalar that is undefined, perl will
stringify or numify it based on how you are using the variable. 
</p>
<p class="western">An undefined scalar stringifies to an empty
string: ""</p>
<p class="western">An undefined scalar numifies to zero: 0</p>
<p class="western">Without warnings or strict turned on, this
conversion is silent. With warnings/strict on, the conversion still
takes place, but a warning is emitted.</p>
<p class="western">Since perl automatically performs this conversion
no matter what, there is no string or arithematic operation that will
tell you if the scalar is undefined or not. 
</p>
<p class="western">Use the defined() function to test whether a
scalar is defined or not.</p>
<p class="western">If the scalar is defined, the function returns a
boolean "true" (1)</p>
<p class="western">If the scalar is NOT defined, the function returns
a boolean "false" ("").</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">If you have a
scalar with a defined value in it, and you want to return it to its
uninitialized state, assign undef to it. This will be exactly as if
you declared the variable with no initial value.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $var;		# undef </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "test 1 :";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if(defined($var)) {print
"defined\n";} </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">else {print "undefined\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$var = 42;	# defined</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "test 2 :";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if(defined($var)) {print
"defined\n";} </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">else {print "undefined\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$var = undef;	# undef as if never
initialized</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "test 3 :";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if(defined($var)) {print
"defined\n";} </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">else {print "undefined\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; test 1 :undefined</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; test 2 :defined</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; test 3 :undefined</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.5.Booleans|outline"></a>
2.1.5 Booleans</h3>
<p class="text-body-preceding-code-block-western">Perl does not have
a boolean "type" per se. Instead, perl interprets scalar
strings and numbers as "true" or "false" based on
some rules:</p>
<ol>
	<li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">Strings
	"" and "0" are FALSE,</font></p>
</li></ol>
<p style="margin-left: 0.87in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">any other string or
stringification is TRUE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">2) Number 0 is FALSE, any other
number is TRUE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">3) all references are TRUE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">4) undef is FALSE</font></p>
<p class="western">Note that these are SCALARS. Any variable that is
not a SCALAR is first evaluated in scalar context, and then treated
as a string or number by the above rules. The scalar context of an
ARRAY is its size. An array with one undef value has a scalar() value
of 1 and is therefore evaluated as TRUE.</p>
<p class="text-body-preceding-code-block-western">A subroutine
returns a scalar or a list depending on the context in which it is
called. To explicitely return FALSE in a subroutine, use this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">return wantarray() ? () : 0;	# FALSE</font></p>
<p class="text-body-preceding-code-block-western">This is
sufficiently troublesome to type for such a common thing that an
empty return statement within a subroutine will do the same thing:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">return;			#FALSE</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.5.1.FALSE|outline"></a>
2.1.5.1 FALSE</h4>
<p class="text-body-preceding-code-block-western">The following
scalars are interpreted as FALSE:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">integer 	0	# false</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">float 	0.0	# false</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">string	'0'	# false</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">string	''	# false</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">undef		# false</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.5.2.TRUE|outline"></a>
2.1.5.2 TRUE</h4>
<p class="text-body-preceding-code-block-western">ALL other values
are interpreted as TRUE, which means the following scalars are
considered TRUE, even though you may have expected some of them to be
false.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">string	'0.0'	# true</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">string	'00'	# true</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">string	'false'	# true</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">float	3.1415	# true</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">integer	11	# true</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">string	'yowser'	# true</font></p>
<p class="western">If you are doing a lot of work with numbers on a
variable, you may wish to force numification on that variable
<font face="Courier, monospace">($var+0)</font> before it gets
boolean tested, just in case you end up with a string "0.0"
instead of a float 0.0 and get some seriously hard to find bugs.</p>
<p class="western">Note that the string '0.0' is TRUE, but ('0.0'+0)
will get numified to 0, which is FALSE. If you are processing a
number as a string and want to evaluate it as a BOOLEAN, make sure
you explicitely NUMIFY it before testing its BOOLEANNESS.</p>
<p class="western">Built in Perl functions that return a boolean will
return an integer one (1) for TRUE and an empty string ("")
for FALSE.</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.5.3.Comparators|outline"></a>
2.1.5.3 Comparators</h4>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
Comparison operators return booleans, specifically an integer <font style="font-size: 16pt;" size="4"><font face="Courier, monospace">1</font></font>
for true and a null string <font style="font-size: 16pt;" size="4"><font face="Courier, monospace">""</font></font>
for false. The <font face="Courier, monospace">"Comparison"</font>
operator ("<font face="Courier, monospace">&lt;=&gt;</font>"
and "<font face="Courier, monospace">cmp</font>") return a
-1, 0, or +1, indicating the compared values are less than, equal to,
or greater than. Distinct comparison operators exist for comparing
strings and for comparing numbers. 
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<table style="page-break-inside: avoid; border: black solid thin;" cellpadding="4" cellspacing="0" width="100%" rules="NONE" bgcolor="#ffffff">
	<col width="85*">
	<col width="88*">
	<col width="82*">
	<thead>
		<tr valign="TOP">
			<th width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>Function</b></i></font></font></font></p>
			</th>
			<th width="35%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>String</b></i></font></font></font></p>
			</th>
			<th width="32%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>Numeric</b></i></font></font></font></p>
			</th>
		</tr>
	</thead>
	<tbody>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>equal
				to</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">eq</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">==</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>not
				equal to</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">ne</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">!=</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>less
				than</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">lt</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">&lt;</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>greater
				than</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">gt</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">&gt;</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>less
				than or equal to</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">le</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">&lt;=</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>greater
				than or equal to</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">ge</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">&gt;=</font></font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="33%" bgcolor="#000000">
				<p class="western" style="page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#ffffff"><font face="Times, serif"><font size="3"><i><b>Comparison
				(&lt;-1, ==0,&gt;1)</b></i></font></font></font></p>
			</td>
			<td width="35%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">cmp</font></font></font></p>
			</td>
			<td width="32%">
				<p class="western" style="font-style: normal; page-break-inside: avoid; text-decoration: none; page-break-after: avoid;" align="LEFT">
				<font color="#000000"><font face="Times, serif"><font size="3">&lt;=&gt;</font></font></font></p>
			</td>
		</tr>
	</tbody>
</table>
<p class="western"><br><br>
</p>
<p class="western">Note that if you use a string operator to compare
two numbers, you will get their alphabetical string comparison. Perl
will stringify the numbers and then perform the compare. This will
occur silently; perl will emit no warning. And if you wanted the
numbers compared numerically but used string comparison, then you
will get the wrong result when you compare the strings (<font face="Courier, monospace">"9"
lt "100").</font></p>
<p class="western">String "9" is greater than (gt) string
"100".</p>
<p class="western">Number 9 is less than (&lt;=) number 100.</p>
<p class="western">If you use a numeric operator to compare two
strings, perl will attempt to numify the strings and then compare
them numerically. Comparing "John" &lt;= "Jacob"
will cause perl  to convert "John" into a number and fail
miserably. However, if warnings/strict is not on, it will fail
miserably and SILENTLY, assigning the numification of "John"
to integer zero.</p>
<p class="western">The numeric comparison operator '&lt;=&gt;' is
sometimes called the "spaceship operator".</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.Logical Operators|outline"></a>
2.1.5.4 Logical Operators</h4>
<p class="western">Perl has two sets of operators to perform logical
AND, OR, NOT functions. The difference between the two is that one
set has a higher precedence than the other set. 
</p>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
The higher precedence logical operators are the '&amp;&amp;', '||',
and '!' operators.</p>
<div align="RIGHT">
	<table style="page-break-after: avoid; page-break-inside: avoid; border: black solid thin;" cellpadding="4" cellspacing="0" width="605">
		<col width="56">
		<col width="58">
		<col width="117">
		<col width="340">
		<thead>
			<tr valign="TOP">
				<th width="56">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font style="font-size: 11pt;" size="2">function</font></p>
				</th>
				<th width="58">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font style="font-size: 11pt;" size="2">operator</font></p>
				</th>
				<th width="117">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font style="font-size: 11pt;" size="2">usage</font></p>
				</th>
				<th width="340">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font style="font-size: 11pt;" size="2">return value</font></p>
				</th>
			</tr>
		</thead>
		<tbody>
			<tr valign="TOP">
				<td width="56">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">AND</font></font></p>
				</td>
				<td width="58">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">&amp;&amp;</font></font></p>
				</td>
				<td width="117">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">$one
					&amp;&amp; $two</font></font></p>
				</td>
				<td width="340">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
					($one is false) $one else $two</font></font></p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="56">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">OR</font></font></p>
				</td>
				<td width="58">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">||</font></font></p>
				</td>
				<td width="117">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">$one
					|| $two</font></font></p>
				</td>
				<td width="340">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
					($one is true) $one else $two</font></font></p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="56">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">NOT</font></font></p>
				</td>
				<td width="58">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">!</font></font></p>
				</td>
				<td width="117">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">!
					$one</font></font></p>
				</td>
				<td width="340">
					<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="LEFT">
					<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
					($one is false) true else false</font></font></p>
				</td>
			</tr>
		</tbody>
	</table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
The lower precedence logical operators are the 'and', 'or', 'not',
and 'xor' operators.</p>
<table style="page-break-inside: avoid; border: black solid thin;" cellpadding="4" cellspacing="0" width="605">
	<col width="56">
	<col width="58">
	<col width="124">
	<col width="333">
	<thead>
		<tr valign="TOP">
			<th width="56">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font style="font-size: 11pt;" size="2">function</font></p>
			</th>
			<th width="58">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font style="font-size: 11pt;" size="2">operator</font></p>
			</th>
			<th width="124">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font style="font-size: 11pt;" size="2">usage</font></p>
			</th>
			<th width="333">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font style="font-size: 11pt;" size="2">return value</font></p>
			</th>
		</tr>
	</thead>
	<tbody>
		<tr valign="TOP">
			<td width="56">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">AND</font></font></p>
			</td>
			<td width="58">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">and</font></font></p>
			</td>
			<td width="124">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">$one
				and $two</font></font></p>
			</td>
			<td width="333">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
				($one is false) $one else $two</font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="56">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">OR</font></font></p>
			</td>
			<td width="58">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">or</font></font></p>
			</td>
			<td width="124">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">$one
				or $two</font></font></p>
			</td>
			<td width="333">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
				($one is true) $one else $two</font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="56">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">NOT</font></font></p>
			</td>
			<td width="58">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">not</font></font></p>
			</td>
			<td width="124">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">not
				$one</font></font></p>
			</td>
			<td width="333">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
				($one is false) true else false</font></font></p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="56">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">XOR</font></font></p>
			</td>
			<td width="58">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">xor</font></font></p>
			</td>
			<td width="124">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">$one
				xor $two</font></font></p>
			</td>
			<td width="333">
				<p class="western" style="page-break-inside: avoid; page-break-after: auto;" align="LEFT">
				<font face="Courier, monospace"><font style="font-size: 11pt;" size="2">if
				( ($one true and $two false) or ($one false and $two true) ) then
				return true else false</font></font></p>
			</td>
		</tr>
	</tbody>
</table>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western">Both sets of operators are very common in perl
code, so it is useful to learn how precedence affects their behavior.
But first, some examples of how to use them.</p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.1.Default Values|outline"></a>
2.1.5.4.1 Default Values</h5>
<p class="text-body-preceding-code-block-western">This subroutine has
two input parameters ($left and $right) with default values (1.0 and
2.0). If the user calls the subroutine with missing arguments, the
undefined parameters will instead receive their default values. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub mysub</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my( $left, $right )=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$left  ||= 1.0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$right ||= 2.0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# deal with $left and $right here.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">}</font></p>
<p class="text-body-preceding-code-block-western"><font face="Times, serif">The
'||=' operator is a fancy shorthand. This:</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$left ||= 1.0;</font></p>
<p class="text-body-preceding-code-block-western">is exactly the same
as this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$left = $left || 1.0;</font></p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.2.Flow Control|outline"></a>
2.1.5.4.2 Flow Control</h5>
<p class="text-body-preceding-code-block-western">The open() function
here will attempt to open $filename for reading and attach
$filehandle to it. If open() fails in any way, it returns FALSE, and
FALSE OR'ed with die() means that perl will evaluate the die()
function to finish the logical evalutation. It won't complete because
execution will die, but the end result is code that is actually quite
readable.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open (my $filehandle, $filename) </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	or die "cant open";</font></p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.3.Precedence|outline"></a>
2.1.5.4.3 Precedence</h5>
<p class="western">The reason we used '||' in the first example and
'or' in the second example is because the operators have different
precedence, and we used the one with the precedence we needed.</p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.4.Assignment Precedence|outline"></a>
2.1.5.4.4 Assignment Precedence</h5>
<p class="western">When working with an assignment, use '||' and
'&amp;&amp;', because they have a higher precedence than (and are
evaluated before) the assignement '='. The 'or' and 'and' operators
have a precedence that is LOWER than an assignment, meaning the
assignment would occur first, followed by any remaining 'and' and
'or' operators. 
</p>
<p class="text-body-preceding-code-block-western">Right:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $default = 0 || 1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># default is 1</font></p>
<p class="text-body-preceding-code-block-western">Wrong:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $default = 0 or 1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># default is 0</font></p>
<p class="text-body-preceding-code-block-western">The second (wrong)
example is equivalent to this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">(my $default = 0) or 1;</font></p>
<p class="western">which will ALWAYS assign $default to the first
value and discard the second value.</p>
<h5 class="western" style="page-break-inside: avoid;"><a name="2.1.5.4.5.Flow Control Precedence|outline"></a>
2.1.5.4.5 Flow Control Precedence</h5>
<p class="western">When using logical operators to perform flow
control, use 'or' and 'and' operators, because they have lower
precedence than functions and other statements that form the boolean
inputs to the 'or' or 'and' operator. The '||' and '&amp;&amp;' have
higher precedence than functions and may execute before the first
function call.</p>
<p class="text-body-preceding-code-block-western">Right:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close $fh or die "Error:could
not close";</font></p>
<p class="text-body-preceding-code-block-western">Wrong:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close $fh || die "Error: could
not close";</font></p>
<p class="text-body-preceding-code-block-western">The second (wrong)
example is equivalent to this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close ($fh || die "Error");</font></p>
<p class="western">which will ALWAYS evaluate $fh as true, NEVER die,
and close $fh. If close() fails, the return value is discarded, and
the program continues on its merry way.</p>
<p class="western">It is always possible to override precedence with
parentheses, but it is probably better to get in the habit of using
the right operator for the right job.</p>
<h5 class="western"><a name="2.1.5.4.6.Conditional Operator|outline"></a>
2.1.5.4.6 Conditional Operator</h5>
<p class="western">The conditional operator mimics the conditional
testing of an if-else block. The conditional operator uses three
operands, and is also called a trinary operator.</p>
<p class="western">As it happens, the conditional operator is perl's
ONLY trinary operator, so people sometimes call it the trinary or
ternary operator when they mean conditional operator. As long as perl
doesn't add another trinary operator, its not a problem. It is even
more rarely called the ?: operator.</p>
<p class="text-body-preceding-code-block-western">The conditional
operator has this form:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $RESULT = $BOOLEAN1 ? $VALUE1 :
$VALUE2;</font></p>
<p class="text-body-preceding-code-block-western">This can be
rewritten as an if-else block like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $RESULT;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($BOOLEAN1) { $RESULT = $VALUE1 }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">eles          { $RESULT = $VALUE2 }</font></p>
<p class="western">The conditional operator allows you to declare the
variable and perform the assignment all in one short line of code.</p>
<p class="western">Note that $BOOLEAN1,  $VALUE1 and $VALUE2 can be
replaced by any normal perl expression, rather than being limited to
a simple scalar value. One interesting expression that you could
replace $VALUE2 with is another conditional operator, effectively
allowing you to create a chain of if-elsif-elsif-else statements. For
example:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $RESULT = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  $BOOLEAN1 ? $VALUE1 </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	: $BOOLEAN2 ? $VALUE2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	: $BOOLEAN3 ? $VALUE3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	: $BOOLEAN4 ? $VALUE4</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	:             $VALUE5;</font></p>
<p class="text-body-preceding-code-block-western">The above example
is equivalent to this mouthful:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $RESULT;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">if($BOOLEAN1) { $RESULT = $VALUE1
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">elsif($BOOLEAN2) { $RESULT = $VALUE2
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">elsif($BOOLEAN3) { $RESULT = $VALUE3
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">elsif($BOOLEAN4) { $RESULT = $VALUE4
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">eles             { $RESULT = $VALUE5
}</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.6.References|outline"></a>
2.1.6 References</h3>
<p class="western">A reference points to the variable to which it
refers. It is kind of like a pointer in C, which says "the data
I want is at this address". Unlike C, you cannot manually alter
the address of a perl reference. You can only create a reference to a
variable that is visible from your current scope.</p>
<p class="text-body-preceding-code-block-western">Create a reference
by placing a "\" in front of the variable:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'John';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $age = 42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name_ref = \$name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $age_ref = \$age;</font></p>
<p class="text-body-preceding-code-block-western">Perl will stringify
a reference so that you can print it and see what it is.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "age_ref is '$age_ref'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; age_ref is 'SCALAR(0x812e6ec)'
...</font></p>
<p class="western">This tells you that $age_ref is a reference to a
SCALAR (which we know is called $age). It also tells you the address
of the variable to which we are referring is 0x812e6ec.</p>
<p class="western">You cannot referencify a string. I.E. you cannot
give perl a string, such as "SCALAR(0x83938949)" and have
perl give you a reference to whatever is at that address. Perl is
pretty loosy goosey about what it will let you do, but not even perl
is so crazy as to give people complete access to the system memory.</p>
<p class="text-body-preceding-code-block-western">You can dereference
a reference by putting an extra sigil (of the appropriate type) in
front of the reference variable.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'John';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $ref_to_name = \$name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $deref_name = $$ref_to_name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $deref_name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; John ...</font></p>
<p class="western">References are interesting enough that they get
their own section. But I introduce them here so that I can introduce
a really cool module that uses references: <a href="data::Dumper">Data::Dumper</a>.
<a href="data::Dumper">Data::Dumper</a> will take a reference to
ANYTHING and print out the thing to which it refers in a human
readable form.</p>
<p class="text-body-preceding-code-block-western">This does not seem
very impressive with a reference to a scalar:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'John';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $ref_to_name = \$name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn Dumper \$ref_to_name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; $VAR1 = \'John';</font></p>
<p class="western">But this will be absolutely essential when working
with Arrays and Hashes.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.7.Filehandles|outline"></a>
2.1.7 Filehandles</h3>
<p class="western">Scalars can store a filehandle. File IO gets its
own section, but I introduce it here to give a complete picture of
what scalars can hold.</p>
<p class="text-body-preceding-code-block-western">Given a scalar that
is undefined (uninitialized), calling open() on that scalar and a
string filename will tell perl to open the file specified by the
string, and store the handle to that file in the scalar. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open(my $fh, '&gt;out.txt');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $fh "hello world\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $fh "this is simple file
writing\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close($fh);</font></p>
<p class="western">The scalar <font face="Courier, monospace">$fh</font>
in the example above holds the filehandle to "out.txt".
Printing to the filehandle actually outputs the string to the file.</p>
<p class="western">There is some magic going on there that I have not
explained, but that is a quick intro to scalar filehandles.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.1.8.Scalar Review|outline"></a>
2.1.8 Scalar Review</h3>
<p class="western">Scalars can store STRINGS, NUMBERS (floats and
ints), REFERENCES, and FILEHANDLES.</p>
<p class="western">Stringify: to convert something to a string format</p>
<p class="western" style="page-break-after: avoid;">Numify: to convert
something to a numeric format</p>
<p class="western" style="page-break-after: avoid;">The following
scalars are interpreted as boolean FALSE:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">integer 0, float 0.0, string "0",
string "", undef</font></p>
<p class="western" style="page-break-before: auto; page-break-after: auto;">
All other scalar values are interpreted as boolean TRUE.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="2.2.Arrays|outline"></a>
2.2 Arrays</h2>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
Arrays are preceded with an "at" sigil. The "@"
is a stylized "a".</p>
<p class="western" style="page-break-after: avoid;">An array stores a
bunch of scalars that are accessed via an integer index.</p>
<p class="western" style="page-break-after: avoid;">Perl arrays are
ONE-DIMENSIONAL ONLY. (Do Not Panic.)</p>
<p class="western" style="page-break-after: avoid;">The first element
of an array always starts at ZERO (0). 
</p>
<p class="text-body-preceding-code-block-western" style="page-break-after: avoid;">
When you refer to an entire array, use the "@" sigil.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @numbers = qw ( zero one two three
);</font></p>
<p class="text-body-preceding-code-block-western">When you index into
the array, the "@" character changes to a "$" and
the numeric index is placed in square brackets.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @numbers = qw ( zero one two three
);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = $number[2];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $string;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; two ...</font></p>
<p class="text-body-preceding-code-block-western">The length of an
array is not pre-declared. Perl autovivifies whatever space it needs.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @months;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$months[1]='January';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$months[5]='May';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># $months[0] and $months[2..4] are
autovivified</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># and initialized to undef</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@months;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          undef,		 # index 0 is
undefined</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'January',	 #
$months[1]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ${\$VAR1-&gt;[0]}, #
this is same as undef</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ${\$VAR1-&gt;[0]}, #
undef</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ${\$VAR1-&gt;[0]}, #
undef</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'May'		 # $months[5]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="text-body-preceding-code-block-western">If you want to see
if you can blow your memory, try running this piece of code:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @mem_hog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$mem_hog[10000000000000000000000]=1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># the array is filled with undefs </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># except the last entry, which is
initialized to 1</font></p>
<p class="text-body-preceding-code-block-western">Arrays can store
ANYTHING that can be stored in a scalar</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @junk_drawer = ( 'pliers', 1,1,1,
'*', '//',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	 3.14, 9*11, 'yaba', 'daba' );</font></p>
<p class="text-body-preceding-code-block-western">Negative indexes
start from the end of the array and work backwards.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @colors = qw ( red green blue );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $last=$colors[-1];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "last is '$last'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; last is 'blue' ...</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.1.scalar (@array) |outline"></a>
2.2.1 scalar (@array) 
</h3>
<p class="text-body-preceding-code-block-western">To get how many
elements are in the array, use "scalar"</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @phonetic = qw ( alpha bravo
charlie delta );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $quantity = scalar(@phonetic);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $quantity;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; 4 ...</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">When you assign an
entire array into a scalar variable, you will get the same thing, but
calling scalar() is much more clear.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @phonetic = qw ( alpha bravo
charlie );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $quant = @phonetic;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $quant;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; 3 ...</font></p>
<p class="western">This is explained later in the "list context"
section.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.2.push(@array, LIST)|outline"></a>
2.2.2 push(@array, LIST)</h3>
<p class="text-body-preceding-code-block-western">Use push() to add
elements onto the end of the array (the highest index). This will
increase the length of the array by the number of items added.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @groceries = qw ( milk bread );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">push(@groceries, qw ( eggs bacon
cheese ));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@groceries;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'milk',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bread',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'eggs',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bacon',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'cheese'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.3.pop(@array)|outline"></a>
2.2.3 pop(@array)</h3>
<p class="text-body-preceding-code-block-western">Use pop() to get
the last element off of the end of the array (the highest index).
This will shorten the array by one. The return value of pop() is the
value popped off of the array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @names = qw ( alice bob charlie );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $last_name = pop(@names);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "popped = $last_name";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@names;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; popped = charlie ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'alice',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bob'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.4.shift(@array)|outline"></a>
2.2.4 shift(@array)</h3>
<p class="text-body-preceding-code-block-western">Use shift() to
remove one element from the beginning/bottom of an array (i.e. at
index zero). All elements will be shifted DOWN one index. The array
will be shorted by one. The return value is the value removed from
the array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @curses = qw ( fee fie foe fum );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $start = shift(@curses);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $start;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn Dumper \@curses;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; fee</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'fie',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'foe',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'fum'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.5.unshift( @array, LIST)|outline"></a>
2.2.5 unshift( @array, LIST)</h3>
<p class="text-body-preceding-code-block-western">use unshift() to
add elements to the BEGINNING/BOTTOM of an array (i.e. at index
ZERO). All the other elements in the array will be shifted up to make
room. This will length the array by the number of elements in LIST.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @trees = qw ( pine maple oak );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unshift(@trees, 'birch');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn Dumper \@trees;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'birch',	# index 0</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'pine',	# old index 0,
now 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'maple',	# 2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'oak'		# 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.6.foreach (@array)|outline"></a>
2.2.6 foreach (@array)</h3>
<p class="text-body-preceding-code-block-western">Use foreach to
iterate through all the elements of a list. Its formal definition is:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">LABEL foreach VAR (LIST) BLOCK</font></p>
<p class="western">This is a control flow structure that is covered
in more detail in the "control flow" section. The foreach
structure supports last, next, and redo statements.</p>
<p class="text-body-preceding-code-block-western">Use a simple
foreach loop to do something to each element in an array:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @fruits = qw ( apples oranges
lemons pears );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $fruit (@fruits)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "fruit is '$fruit'\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; fruit is 'apples'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; fruit is 'oranges'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; fruit is 'lemons'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; fruit is 'pears'</font></p>
<p class="text-body-preceding-code-block-western">DO NOT ADD OR
DELETE ELEMENTS TO AN ARRAY BEING PROCESSED IN A FOREACH LOOP.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @numbers = qw (zero one two
three);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $num (@numbers)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	shift(@numbers) if($num eq 'one');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "num is '$num'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; num is 'zero'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; num is 'one'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; num is 'three'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># note: I deleted 'zero', but I
failed to </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># print out 'two', which is still
part of array.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"># BAD!!</font></p>
<p class="text-body-preceding-code-block-western">VAR acts as an
alias to the element of the array itself. Changes to VAR propagate to
changing the array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @integers = ( 23, 142, 9384, 83948
);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $num (@integers)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ $num+=100; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@integers;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          123,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          242,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          9484,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          84048</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.7.sort(@array)|outline"></a>
2.2.7 sort(@array)</h3>
<p class="text-body-preceding-code-block-western">Use sort() to sort
an array alphabetically. The return value is the sorted version of
the array. The array passed in is left untouched.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @fruit = qw ( pears apples bananas
oranges );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @sorted_array = sort(@fruit);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@sorted_array ;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;$VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'apples',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bananas',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'oranges',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'pears'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="text-body-preceding-code-block-western">Sorting a list of
numbers will sort them alphabetically as well, which probably is not
what you want.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @scores = ( 1000, 13, 27, 200, 76,
150 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @sorted_array = sort(@scores);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@sorted_array ;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1000,		# 1's</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          13,		# 1's</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          150,		# 1's</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          200,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          27,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          76</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="western">The sort() function can also take a code block (
any piece of code between curly braces ) which defines how to perform
the sort if given any two elements from the array. The code block
uses two global variables, $a and $b, and defines how to compare the
two entries.</p>
<p class="text-body-preceding-code-block-western">This is how you
would sort an array numerically.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @scores = ( 1000, 13, 27, 200, 76,
150 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @sorted_array = sort {$a&lt;=&gt;$b}
(@scores);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@sorted_array ;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          13,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          27,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          76,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          150,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          200,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1000</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.8.reverse(@array)|outline"></a>
2.2.8 reverse(@array)</h3>
<p class="text-body-preceding-code-block-western">The reverse()
function takes a list and returns an array in reverse order. The last
element becomes the first element. The first element becomes the last
element.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @numbers = reverse
(1000,13,27,200,76,150);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@numbers ;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          150,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          76,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          200,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          27,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          13,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1000</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.9.splice(@array)|outline"></a>
2.2.9 splice(@array)</h3>
<p class="text-body-preceding-code-block-western">Use splice() to add
or remove elements into or out of any index range of an array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">splice ( ARRAY , OFFSET , LENGTH ,
LIST );</font></p>
<p class="text-body-preceding-code-block-western">The elements in
ARRAY starting at OFFSET and going for LENGTH indexes will be removed
from ARRAY. Any elements from LIST will be inserted at OFFSET into
ARRAY.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @words = qw ( hello there );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">splice(@words, 1, 0, 'out');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn join(" ", @words);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; hello out there ...</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.2.10.Undefined and Uninitialized Arrays|outline"></a>
2.2.10 Undefined and Uninitialized Arrays</h3>
<p class="western">An array is initialized as having no entries.
Therefore you can test to see if an array is initialized by calling
scalar() on it. This is equivalent to calling defined() on a scalar
variable. If scalar() returns false (i.e. integer 0), then the array
is uninitialized.</p>
<p class="text-body-preceding-code-block-western">If you want to
uninitialize an array that contains data, then you do NOT want to
assign it undef like you would a scalar. This would fill the array
with one element at index zero with a value of undefined.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @array = undef;	# WRONG</font></p>
<p class="text-body-preceding-code-block-western">To clear an array
to its original uninitialized state, assign an empty list to it. This
will clear out any entries, and leave you with a completely empty
array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @array = ();		# RIGHT</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="2.3.Hashes|outline"></a>
2.3 Hashes</h2>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
Hashes are preceded with a percent sign sigil. 
</p>
<p class="western" style="page-break-after: avoid;">The "%"
is a stylized "key/value" pair.</p>
<p class="western" style="page-break-after: avoid;">A hash stores a
bunch of scalars that are accessed via a string index called a "key"</p>
<p class="western" style="page-break-after: avoid;">Perl hashes are
ONE-DIMENSIONAL ONLY. (Do Not Panic.)</p>
<p class="western" style="page-break-after: avoid;">There is no order
to the elements in a hash. (Well, there is, but you should not use a
hash with an assumption about what order the data will come out.)</p>
<p class="western" style="page-break-after: avoid;">You can assign any
even number of scalars to a hash. Perl will extract them in pairs.
The first item will be treated as the key, and the second item will
be treated as the value.</p>
<p class="text-body-preceding-code-block-western" style="page-break-after: avoid;">
When you refer to an entire hash, use the "%" sigil.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my %info = qw ( name John age 42 );</font></p>
<p class="text-body-preceding-code-block-western">When you look up a
key in the hash, the "%" character changes to a "$"
and the key is placed in curly braces.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %info = qw ( name John age 42 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $data = $info{name};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn $data;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; John ...</font></p>
<p class="text-body-preceding-code-block-western">The keys of a hash
are not pre-declared. If the key does not exist during an ASSIGNMENT,
the key is created and given the assigned value.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %inventory;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$inventory{apples}=42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$inventory{pears}=17;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$inventory{bananas}=5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%inventory;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;$VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bananas' =&gt; 5,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'apples' =&gt; 42,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'pears' =&gt; 17</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<p class="text-body-preceding-code-block-western">If the key does not
exist during a FETCH, the key is NOT created, and undef is returned.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %inventory;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$inventory{apples}=42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $peaches = $inventory{peaches};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "peaches is '$peaches'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%inventory;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Use of uninitialized value in
concatenation </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; peaches is '' at ./test.pl line
13.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'apples' =&gt; 42</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         };</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.3.1.exists ( $hash{$key} )|outline"></a>
2.3.1 exists ( $hash{$key} )</h3>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
Use exists() to see if a key exists in a hash. You cannot simply test
the value of a key, since a key might exist but store a value of
FALSE</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = ( cats=&gt;2, dogs=&gt;1
);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless(exists($pets{fish}))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	{ print "No fish here\n";
}</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Warning: during
multi-key lookup, all the lower level keys are autovivified, and only
the last key has exists() tested on it. This only happens if you have
a hash of hash references. References are covered later, but this is
a "feature" specific to exists() that can lead to very
subtle bugs. Note in the following example, we explicitely create the
key "Florida", but we only test for the existence of
{Maine}-&gt;{StateBird}, which has the side effect of creating the
key {Maine} in the hash.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %stateinfo;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$stateinfo{Florida}-&gt;{Abbreviation}='FL';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if
(exists($stateinfo{Maine}-&gt;{StateBird}))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ warn "it exists"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%stateinfo;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'Florida' =&gt; {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                        
'Abbreviation' =&gt; 'FL'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                       },</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'Maine' =&gt; {}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<p class="text-body-preceding-code-block-western">You must test each
level of key individually, and build your way up to the final key
lookup if you do not want to autovivify the lower level keys.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %stateinfo;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$stateinfo{Florida}-&gt;{Abbreviation}='FL';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if (exists($stateinfo{Maine}))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">if
(exists($stateinfo{Maine}-&gt;{StateBird}))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">{ warn "it exists"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%stateinfo;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'Florida' =&gt; {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                        
'Abbreviation' =&gt; 'FL'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                       }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.3.2.delete ( $hash{key} )|outline"></a>
2.3.2 delete ( $hash{key} )</h3>
<p class="text-body-preceding-code-block-western">Use delete to
delete a key/value pair from a hash. Once a key is created in a hash,
assigning undef to it will keep the key in the hash and will only
assign the value to undef. The only way to remove a key/value pair
from a hash is with delete(). 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets =</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$pets{cats}=undef;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">delete($pets{fish});</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%pets;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'cats' =&gt; undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'dogs' =&gt; 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         };</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.3.3.keys( %hash )|outline"></a>
2.3.3 keys( %hash )</h3>
<p class="text-body-preceding-code-block-western">Use keys() to
return a list of all the keys in a hash. The order of the keys will
be based on the internal hashing algorithm used, and should not be
something your program depends upon. Note in the example below that
the order of assignment is different from the order printed out.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $pet (keys(%pets))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "pet is '$pet'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet is 'cats'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet is 'dogs'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; pet is 'fish'</font></p>
<p class="western">If the hash is very large, then you may wish to
use the each() function described below.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.3.4.values( %hash )|outline"></a>
2.3.4 values( %hash )</h3>
<p class="text-body-preceding-code-block-western">Use values() to
return a list of all the values in a hash. The order of the values
will match the order of the keys return in keys().</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @pet_keys = keys(%pets);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @pet_vals = values(%pets);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@pet_keys;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@pet_vals;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'cats',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'dogs',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'fish'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p class="western">If the hash is very large, then you may wish to
use the each() function described below.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.3.5.each( %hash )|outline"></a>
2.3.5 each( %hash )</h3>
<p class="text-body-preceding-code-block-western">Use each() to
iterate through each key/value pair in a hash, one at a time. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(my($pet,$qty)=each(%pets))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "pet='$pet',
qty='$qty'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='cats', qty='2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='dogs', qty='1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; pet='fish', qty='3'</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western">Every call to each() returns the next key/value
pair in the hash. After the last key/value pair is returned, the next
call to each() will return an empty list, which is boolean false.
This is how the while loop is able to loop through each key/value and
then exit when done.</p>
<p class="western">Every hash has one "each iterator"
attached to it. This iterator is used by perl to remember where it is
in the hash for the next call to each().</p>
<p class="text-body-preceding-code-block-western">Calling keys() on
the hash will reset the iterator. The list returned by keys() can be
discared.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">keys(%hash);</font></p>
<p class="western">Do not add keys while iterating a hash with
each().</p>
<p class="western">You can delete keys while iterating a hash with
each().</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">The each() function
does not have to be used inside a while loop. This example uses a
subroutine to call each() once and print out the result. The
subroutine is called multiple times without using a while() loop.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub one_time</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my($pet,$qty)=each(%pets);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# if key is not defined,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# then each() must have hit end of
hash</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if(defined($pet))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	    { print "pet='$pet',
qty='$qty'\n"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	else</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	    { print "end of hash\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# cats</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">keys(%pets);		# reset the hash
iterator</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# cats</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# end of hash</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# cats</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">one_time;		# dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='cats', qty='2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='dogs', qty='1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='cats', qty='2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='dogs', qty='1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='fish', qty='3'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; end of hash</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pet='cats', qty='2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; pet='dogs', qty='1'</font></p>
<p class="text-body-preceding-code-block-western" style="page-break-before: always;">
There is only one iterator variable connected with each hash, which
means calling each() on a hash in a loop that then calls each() on
the same hash another loop will cause problems. The example below
goes through the %pets hash and attempts to compare the quantity of
different pets and print out their comparison.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(my($orig_pet,$orig_qty)=each(%pets))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">while(my($cmp_pet,$cmp_qty)=each(%pets))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if($orig_qty&gt;$cmp_qty)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   print "there are more
$orig_pet "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."than $cmp_pet\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	else</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   print "there are less
$orig_pet "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."than $cmp_pet\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more cats than dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less cats than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more cats than dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less cats than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more cats than dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less cats than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more cats than dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less cats than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; ...</font></p>
<p class="western">The outside loop calls each() and gets "cats".
The inside loop calls each() and gets "dogs". The inside
loop continues, calls each() again, and gets "fish". The
inside loop calls each() one more time and gets an empty list. The
inside loop exits.</p>
<p class="western">The outside loop calls each() which continues
where the inside loop left off, namely at the end of the list, and
returns "cats". The code then enters the inside loop, and
the process repeats itself indefinitely.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">One solution for
this each() limitation is shown below. The inner loop continues to
call each() until it gets the key that matches the outer loop key.
The inner loop must skip the end of the hash (an undefined key) and
continue the inner loop. This also fixes a problem in the above
example in that we probably do not want to compare a key to itself.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	cats=&gt;2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	dogs=&gt;1, </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(my($orig_pet,$orig_qty)=each(%pets))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">while(1)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">my($cmp_pet,$cmp_qty)=each(%pets);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">next unless(defined($cmp_pet));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">last if($cmp_pet eq $orig_pet);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">if($orig_qty&gt;$cmp_qty)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
         <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
         <font face="Courier, monospace">print "there are more
$orig_pet "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."than $cmp_pet\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	 }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">else</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	 {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	 print "there are less
$orig_pet "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."than $cmp_pet\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	 }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more cats than dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less cats than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less dogs than fish</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are less dogs than cats</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; there are more fish than cats</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; there are more fish than dogs</font></p>
<p class="western">If you do not know the outer loop key, either
because its in someone else's code and they do not pass it to you, or
some similar problem, then the only other solution is to call keys on
the hash for all inner loops, store the keys in an array, and loop
through the array of keys using foreach. The inner loop will then not
rely on the internal hash iterator value.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="2.4.List Context|outline"></a>
2.4 List Context</h2>
<p class="text-body-preceding-code-block-western">List context is a
concept built into the grammar of perl. You cannot declare a "list
context" in perl the way you might declare an @array or %hash.
List context affects how perl executes your source code. Here is an
example.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @cart1=qw( milk bread butter);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @cart2=qw( eggs bacon juice );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @checkout_counter = ( @cart1,
@cart2 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@checkout_counter;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'milk',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bread',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'butter',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'eggs',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bacon',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'juice'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p class="western">Basically, two people with grocery carts, @cart1
and @cart2, pulled up to the @checkout_counter and unloaded their
carts without putting one of those separator bars in between them.
The person behind the @checkout_counter has no idea whose groceries
are whose.</p>
<p class="western">Everything in list context gets reduced to an
ordered series of scalars. The original container that held the
scalars is forgotten. 
</p>
<p class="western">In the above example the order of scalars is
retained: milk, bread, butter is the order of scalars in @cart1 and
the order of the scalars at the beginning of @checkout_counter.
However, looking at just @checkout_counter, there is no way to know
where the contents of @cart1 end and the contents of @cart2 begin. In
fact, @cart1 might have been empty, and all the contents of
@checkout_counter could belong to @cart2, but there is no way to
know.</p>
<p class="text-body-preceding-code-block-western">Sometimes, list
context can be extremely handy. We have used list context repeatedly
to initialize arrays and hashes and it worked as we would intuitively
expect:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets  =   ( fish=&gt;3, cats=&gt;2,
dogs=&gt;1 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @cart1 = qw( milk     bread   
eggs);</font></p>
<p class="text-body-preceding-code-block-western">The initial values
for the hash get converted into an ordered list of scalars</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">( 'fish', 3, 'cats', 2, 'dogs', 1 )</font></p>
<p class="western">These scalars are then used in list context to
initialize the hash, using the first scalar as a key and the
following scalar as its value, and so on throughout the list.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">List context
applies anytime data is passed around in perl. Scalars, arrays, and
hashes are all affected by list context. In the example below, @house
is intended to contain a list of all the items in the house. However,
because the %pets hash was reduced to scalars in list context, the
values 3,2,1 are disassociated from their keys. The @house variable
is not very useful.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = ( fish=&gt;3, cats=&gt;2,
dogs=&gt;1 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @refridgerator=qw(milk bread
eggs);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my
@house=('couch',%pets,@refridgerator,'chair');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@house;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;$VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'couch',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'cats',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'dogs',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'fish',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          3,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'milk',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bread',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'eggs',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'chair'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="text-body-preceding-code-block-western">There are times
when list context on a hash does make sense. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my
%encrypt=(tank=&gt;'turtle',bomber=&gt;'eagle');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %decrypt=reverse(%encrypt) ;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%decrypt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'eagle' =&gt; 'bomber',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'turtle' =&gt; 'tank'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<p class="western">The %encrypt hash contains a hash look up to
encrypt plaintext into cyphertext. Anytime you want to use the word
"bomber", you actually send the word "eagle". The
decryption is the opposite. Anytime you receive the word "eagle"
you need to translate that to the word "bomber". 
</p>
<p class="western">Using the %encrypt hash to perform decryption
would require a loop that called each() on the %encrypt hash, looping
until it found the value that matched the word received over the
radio. This could take too long.</p>
<p class="western">Instead, because there is no overlap between keys
and values, (two different words dont encrypt to the same word), we
can simply treat the %encrypt hash as a list, call the array
reverse() function on it, which flips the list around from end to
end, and then store that reversed list into a %decrypt hash.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="2.5.References|outline"></a>
2.5 References</h2>
<p class="western">References are a thing that refer (point) to
something else. 
</p>
<p class="western">The "something else" is called the
"referent", the thing being pointed to.</p>
<p class="western">Taking a reference and using it to access the
referent is called "dereferencing".</p>
<p class="text-body-preceding-code-block-western">A good real-world
example is a driver's license. Your license "points" to
where you live because it lists your home address. Your license is a
"reference". The "referent" is your home. And if
you have forgotten where you live, you can take your license and
"dereferencing" it to get yourself home.</p>
<p class="western"><img src="iperl_files/iperl_html_m2efc85d6.jpg" height="136" width="606" align="LEFT" border="0" alt="references demo"><br clear="LEFT"><br><br>
</p>
<p class="western">It is possible that you have roommates, which
would mean multiple references exist to point to the same home. But
there can only be one home per address.</p>
<p class="text-body-preceding-code-block-western">In perl, references
are stored in scalars. You can create a reference by creating some
data (scalar, array, hash) and putting a "\" in front of
it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %home= </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	fish=&gt;3,cats=&gt;2,dogs=&gt;1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	milk=&gt;1,bread=&gt;2,eggs=&gt;12,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $license_for_alice = \%home;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $license_for_bob   = \%home;</font></p>
<p class="text-body-preceding-code-block-western">Alice and Bob are
roommates and their licenses are references to the same %home. This
means that Alice could bring in a bunch of new pets and Bob could eat
the bread out of the refrigerator even though Alice might have been
the one to put it there. To do this, Alice and Bob need to
dereference their licenses and get into the original %home hash.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$ {$license_for_alice} {dogs} += 5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">delete($ {$license_for_bob} {milk});</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \%home;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'eggs' =&gt; 12,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'cats' =&gt; 2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bread' =&gt; 2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'dogs' =&gt; 6,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'fish' =&gt; 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<h3 class="western" style="page-break-inside: avoid;" id="sec2.5.1.Named-Referents-outline">2.5.1 Named Referents</h3>
<p class="text-body-preceding-code-block-western">A referent is any
original data structure: a scalar, array, or hash. Below, we declare
some named referents: age, colors, and pets. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $age = 42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @colors = qw( red green blue );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my %pets=(fish=&gt;3,cats=&gt;2,dogs=&gt;1);</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.2.References to Named Referents|outline"></a>
2.5.2 References to Named Referents</h3>
<p class="text-body-preceding-code-block-western">A reference points
to the referent. To take a reference to a named referent, put a "\"
in front of the named referent.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $ref_to_age = \$age;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $r_2_colors = \@colors;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $r_pets = \%pets;</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.3.Dereferencing|outline"></a>
2.5.3 Dereferencing</h3>
<p class="text-body-preceding-code-block-western">To dereference,
place the reference in curly braces and prefix it with the sigil of
the appropriate type. This will give access to the entire original
referent.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">${$ref_to_age}++; # happy birthday</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">pop(@{$r_2_colors});</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %copy_of_pets = %{$r_pets};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "age is '$age'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; age is '43'</font></p>
<p class="text-body-preceding-code-block-western">If there is no
ambiguity in dereferencing, the curly braces are not needed.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$$ref_to_age ++;  # another birthday</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "age is '$age'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; age is '44'</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">It is also possible
to dereference into an array or hash with a specific index or key.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @colors = qw( red green blue );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets=(fish=&gt;3,cats=&gt;2,dogs=&gt;1);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $r_colors = \@colors; my $r_pets =
\%pets;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">${$r_pets}  {dogs} += 5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">${$r_colors}[1]    = 'yellow';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@colors;  print Dumper
\%pets;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'red',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'yellow',	# green turned to
yellow</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'blue'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
        <font face="Courier, monospace">];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'cats' =&gt; 2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'dogs' =&gt; 6,	# 5 new
dogs</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
          <font face="Courier, monospace">'fish' =&gt; 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
        <font face="Courier, monospace">};</font></p>
<p class="western">Because array and hash referents are so common,
perl has a shorthand notation for indexing into an array or looking
up a key in a hash using a reference. Take the reference, follow it
by "-&gt;", and then follow that by either "[index]"
or "{key}".</p>
<p class="text-body-preceding-code-block-western">This:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">${$r_pets}  {dogs} += 5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">${$r_colors}[1]    = 'yellow';</font></p>
<p class="text-body-preceding-code-block-western">is exactly the same
as this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$r_pets-&gt;{dogs} += 5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$r_colors-&gt;[1] = 'yellow';</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.4.Anonymous Referents|outline"></a>
2.5.4 Anonymous Referents</h3>
<p class="text-body-preceding-code-block-western">Here are some
referents named age, colors, and pets. Each named referent has a
reference to it as well.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $age = 42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @colors = qw( red green blue );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets=(fish=&gt;3,cats=&gt;2,dogs=&gt;1);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $r_age = \$age;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $r_colors = \@colors;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $r_pets = \%pets;</font></p>
<p class="western">It is also possible in perl to create an ANONYMOUS
REFERENT. An anonymous referent has no name for the underlying data
structure and can only be accessed through the reference.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">To create an
anonymous array referent, put the contents of the array in square
brackets. The square brackets will create the underlying array with
no name, and return a reference to that unnamed array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $colors_ref = [ 'red', 'green',
'blue' ];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $colors_ref;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'red',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'green',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'blue'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="text-body-preceding-code-block-western">To create an
anonymous hash referent, put the contents of the hash in curly
braces. The curly braces will create the underlying hash with no
name, and return a reference to that unnamed hash.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $pets_ref = {
fish=&gt;3,cats=&gt;2,dogs=&gt;1 };</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $pets_ref;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'cats' =&gt; 2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'dogs' =&gt; 1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'fish' =&gt; 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<p class="western">Note that $colors_ref is a reference to an array,
but that array has no name to directly access its data. You must use
$colors_ref to access the data in the array.</p>
<p class="western">Likewise, $pets_ref is a reference to a hash, but
that hash has no name to directly access its data. You must use
$pets_ref to access the data in the hash.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.5.Complex Data Structures|outline"></a>
2.5.5 Complex Data Structures</h3>
<p class="text-body-preceding-code-block-western">Arrays and hashes
can only store scalar values. But because scalars can hold
references, complex data structures are now possible. Using
references is one way to avoid the problems associated with list
context. Here is another look at the house example, but now using
references.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my %pets = ( fish=&gt;3, cats=&gt;2,
dogs=&gt;1 );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @refridgerator=qw(milk bread
eggs);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $house={</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	pets=&gt;\%pets,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	refridgerator=&gt;\@refridgerator</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $house;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'pets' =&gt; {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                      'cats' =&gt;
2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                      'dogs' =&gt;
1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                      'fish' =&gt;
3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                    },</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'refridgerator' =&gt; [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                              
'milk',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                              
'bread',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                              
'eggs'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                             ]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        };</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western">The $house variable is a reference to an anonymous
hash, which contains two keys, "pets" and "refridgerator".
These keys are associated with values that are references as well,
one a hash reference and the other an array reference.</p>
<p class="text-body-preceding-code-block-western">Dereferencing a
complex data structure can be done with the arrow notation or by
enclosing the reference in curly braces and prefixing it with the
appropriate sigil.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># Alice added more canines</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$house-&gt;{pets}-&gt;{dogs}+=5;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># Bob drank all the milk</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">shift(@{$house-&gt;{refridgerator}});</font></p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.5.5.1.Autovivification|outline"></a>
2.5.5.1 Autovivification</h4>
<p class="text-body-preceding-code-block-western">Perl autovivifies
any structure needed when assigning or fetching from a reference. The
autovivified referents are anonymous. Perl will assume you know what
you are doing with your structures. In the example below, we start
out with an undefined scalar called $scal. We then fetch from this
undefined scalar, as if it were a reference to an array of a hash of
an array of a hash of an array. Perl autovivifies everything under
the assumption that that is what you wanted to do.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $val = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">$scal-&gt;[2]-&gt;{somekey}-&gt;[1]-&gt;{otherkey}-&gt;[1];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $scal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ${\$VAR1-&gt;[0]},</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            'somekey' =&gt; [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                          
${\$VAR1-&gt;[0]},</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                           {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                            
'otherkey' =&gt; []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                           }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;                         ]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="western">If this is NOT what you want to do, check for the
existence of each hash key and check that the array contains at least
enough array entries to handle the given index.</p>
<h4 class="western" style="page-break-inside: avoid;"><a name="2.5.5.2.Multidimensional Arrays|outline"></a>
2.5.5.2 Multidimensional Arrays</h4>
<p class="text-body-preceding-code-block-western">Perl implements
multidimensional arrays using one-dimensional arrays and references.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $mda;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">for(my $i=0;$i&lt;2;$i++)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">for(my $j=0;$j&lt;2;$j++)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">for(my $k=0;$k&lt;2;$k++)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$mda-&gt;[$i]-&gt;[$j]-&gt;[$k] = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	"row=$i, col=$j, depth=$k";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $mda;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=0, col=0,
depth=0',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=0, col=0,
depth=1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            ],</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=0, col=1,
depth=0',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=0, col=1,
depth=1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            ]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ],</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=1, col=0,
depth=0',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=1, col=0,
depth=1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            ],</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=1, col=1,
depth=0',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;              'row=1, col=1,
depth=1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;            ]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          ]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h4 class="western"><a name="2.5.5.3.Deep Cloning, Deep Copy|outline"></a>
2.5.5.3 Deep Cloning, Deep Copy</h4>
<p class="text-body-preceding-code-block-western">If you need to
create an entirely separate but identical clone of a complex data
structure, use the Storable.pm perl module. Storable comes standard
with perl 5.8. If you don't have 5.8 installed, consider an upgrade.
Otherwise, read the section about CPAN later in this document,
download Storable from CPAN, and install.</p>
<p class="text-body-preceding-code-block-western">Then use Storable
in your perl code, indicating you want to import the 'nstore',
'dclone', and 'retrieve' subroutines. The 'use' statement is
explained later in this document as well, for now, it isn't that
important. 
</p>
<p class="text-body-preceding-code-block-western">The 'dclone'
subroutine takes a reference to any kind of data structure and
returns a reference to a deep cloned version of that data structure. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Storable qw(nstore dclone
retrieve);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">$scal-&gt;[2]-&gt;{somekey}-&gt;[1]-&gt;{otherkey}-&gt;[1];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># $twin is an identical clone of
$scal</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $twin = dclone $scal;</font></p>
<h4 class="western"><a name="2.5.5.4.Data Persistence|outline"></a>2.5.5.4 Data
Persistence</h4>
<p class="text-body-preceding-code-block-western">The Storable.pm
module also contains two subroutines for storing the contents of any
perl data structure to a file and retrieving it later.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Storable qw(nstore dclone
retrieve);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">$scal-&gt;[2]-&gt;{somekey}-&gt;[1]-&gt;{otherkey}-&gt;[1];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">nstore ($scal, 'filename');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># exit, reboot computer, and restart
script</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $revived = retrieve('filename');</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.6.Stringification of References|outline"></a>
2.5.6 Stringification of References</h3>
<p class="text-body-preceding-code-block-western">Perl will stringify
a reference if you try to do anything string-like with it, such as
print it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $referent = 42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $reference = \$referent;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "reference is
'$reference'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; reference is 'SCALAR(0x812e6ec)'
...</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">But perl will not
allow you to create a string and attempt to turn it into a reference.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $reference = 'SCALAR(0x812e6ec)';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $value = $$reference;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Can't use string
("SCALAR(0x812e6ec)") as </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; a SCALAR ref while "strict
refs" in use</font></p>
<p class="text-body-preceding-code-block-western">Turning strict off
only gives you undef.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no strict;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $reference = 'SCALAR(0x812e6ec)';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $value = $$reference;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "value not defined"
unless(defined($value));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "value is '$value'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; value not defined </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Use of uninitialized value in
concatenation</font></p>
<p class="western">Because a reference is always a string that looks
something like "SCALAR(0x812e6ec)", it will evaluate true
when treated as a boolean, even if the value to which it points is
false.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="2.5.7.The ref() function|outline"></a>
2.5.7 The ref() function</h3>
<p class="text-body-preceding-code-block-western">The ref() function
takes a scalar and returns a string indicating what kind of referent
the scalar is referencing. If the scalar is not a reference, ref()
returns false (an empty string). 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $temp = \42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = ref($temp);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "string is '$string'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is 'SCALAR'</font></p>
<p class="text-body-preceding-code-block-western">Here we call ref()
on several types of variable:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub what_is_it </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($scalar)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $string = ref($scalar);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "string is '$string'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">what_is_it(  \'hello'   );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">what_is_it(  [1,2,3]    );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">what_is_it(  {cats=&gt;2}  );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">what_is_it(  42         );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; string is 'SCALAR'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; string is 'ARRAY'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; string is 'HASH'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; string is ''</font></p>
<p class="western"><font face="Times, serif">Note that this is like
stringification of a reference except without the address being part
of the string. Instead of SCALAR(0x812e6ec), its just SCALAR. Also
note that if you stringify a non-reference, you get the scalar value.
But if you call ref() on a non-reference, you get an empty string,
which is always false.</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="3.Control Flow|outline"></a>
3 Control Flow</h1>
<p class="text-body-preceding-code-block-western">Standard statements
get executed in sequential order in perl. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name = 'John Smith';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $greeting = "Hello, $name\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print $greeting;</font></p>
<p class="text-body-preceding-code-block-western">Control flow
statements allow you to alter the order of execution while the
program is running. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if( $price == 0 )</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "Free Beer!\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	}</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Perl supports the
following control flow structures:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># LABEL is an optional name that
identifies the </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># control flow structure. </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># It is a bareword identifier
followed by a colon.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># example==&gt;  MY_NAME: </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># SINGLE_STATEMENT ==&gt; a single
perl statement</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#		NOT including the semicolon.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#		print "hello\n"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># BLOCK ==&gt; zero or more
statements contained</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#		in curly braces { print "hi";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL BLOCK continue BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># BOOL ==&gt; boolean (see boolean
section above)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">SINGLE_STATEMENT if (BOOL);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if (BOOL) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if (BOOL) BLOCK else BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if (BOOL) BLOCK elsif (BOOL) BLOCK
elsif ()...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if (BOOL) BLOCK elsif (BOOL) BLOCK
... else BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless (BOOL) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless (BOOL) BLOCK else BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless (BOOL) BLOCK elsif (BOOL)
BLOCK elsif ()...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless (BOOL) BLOCK elsif (BOOL)
BLOCK ... else BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL while (BOOL) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL while (BOOL) BLOCK continue
BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL until (BOOL) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL until (BOOL) BLOCK continue
BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># INIT, TEST, CONT are all
expressions</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># INIT is an initialization
expression</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># INIT is evaluated once prior to
loop entry</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># TEST is BOOLEAN expression that
controls loop exit</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># TEST is evaluated each time after </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#            BLOCK is executed</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># CONT is a continuation expression</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># CONT is evaluated each time TEST is
evaluated TRUE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL for ( INIT; TEST; CONT ) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># LIST is a list of scalars, see
arrays and </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># list context sections later in text</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL foreach (LIST) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">LABEL foreach VAR (LIST) BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">LABEL foreach VAR (LIST) BLOCK
continue BLOCK</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="3.1.Labels|outline"></a>
3.1 Labels</h2>
<p class="western">Labels are always optional. A label is an
identifier followed by a colon. 
</p>
<p class="western">A label is used to give its associated control
flow structure a name.</p>
<p class="text-body-preceding-code-block-western">Inside a BLOCK of a
control flow structure, you can call 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">next; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">last; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">redo;</font></p>
<p class="text-body-preceding-code-block-western">If the structure
has a LABEL, you can call</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">next LABEL; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">last LABEL; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">redo LABEL;<font style="font-size: 11pt;" size="2">
</font></font>
</p>
<p class="western">If no label is given to next, last, or redo, then
the command will operate on the inner-most control structure. If a
label is given, then the command will operate on the control
structure given.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="3.2.last LABEL;|outline"></a>
3.2 last LABEL;</h2>
<p class="western">The last command goes to the end of the entire
control structure. It does not execute any continue block if one
exists.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="3.3.next LABEL;|outline"></a>
3.3 next LABEL;</h2>
<p class="western">The next command skips the remaining BLOCK. if
there is a continue block, execution resumes there. After the
continue block finishes, or if no continue block exists, execution
starts the next iteration of the control construct if it is a loop
construct.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="3.4.redo LABEL;|outline"></a>
3.4 redo LABEL;</h2>
<p class="western">The redo command skips the remaining BLOCK. It
does not execute any continue block (even if it exists). Execution
then resumes at the start of the control structure without evaluating
the conditional again.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="4.Packages and Namespaces and Lexical Scoping |outline"></a>
4 Packages and Namespaces and Lexical Scoping 
</h1>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.1.Package Declaration|outline"></a>
4.1 Package Declaration</h2>
<p class="text-body-preceding-code-block-western">Perl has a package
declaration statement that looks like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">package NAMESPACE;</font></p>
<p class="western">This package declaration indicates that the rest
of the enclosing block, subroutine, eval, or file belongs to the
namespace given by NAMESPACE.</p>
<p class="text-body-preceding-code-block-western" style="page-break-before: auto;">
The standard warnings, strictness, and <a href="data::Dumper">Data::Dumper</a>
are attached to the namespace in which they were turned on with "use
warnings;" etc.  Anytime you declare a new package namespace,
you will want to "use" these again.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package SomeOtherPackage;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p class="text-body-preceding-code-block-western">All perl scripts
start with an implied declaration of:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">package main;</font></p>
<p class="text-body-preceding-code-block-western">You can access
package variables with the appropriate sigil, followed by the package
name, followed by a double colon, followed by the variable name. This
is called a package QUALIFIED variable meaning the package name is
explicitely stated.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$package_this::age;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">@other_package::refridgerator;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">%package_that::pets;</font></p>
<p class="western">If you use an UNQUALIFIED variable in your code,
perl assumes it is in the the most recently declared package
namespace that was declared.</p>
<p class="western">When you have strict-ness turned on, there are two
ways to create and use package variables:</p>
<p class="text-body-preceding-code-block-western">1) Use the fully
package qualified name everywhere in your code:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># can use variable without declaring
it with 'my'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$some_package::answer=42;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">warn "The value is
'$some_package::answer'\n";</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.2.Declaring Package Variables With our|outline"></a>
4.2 Declaring Package Variables With our</h2>
<p class="text-body-preceding-code-block-western">2) Use "our"
to declare the variable.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package this_package;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $name='John';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">warn "name is '$name'";</font></p>
<p class="western">Using "our" is the preferred method. You
must have perl 5.6.0 or later for "our" declarations.</p>
<p class="western">The difference between the two methods is that
always using package qualified variable names means you do NOT have
to declare the package you are in. You can create variables in ANY
namespace you want, without ever having to declare the namespace
explicitely. You can even declare variables in someone else's package
namespace. There is no restrictions in perl that prevent you from
doing this.</p>
<p class="western">To encourage programmers to play nice with each
other's namespaces, the "our" function was created.
Declaring a variable with "our" will create the variable in
the current namespace. If the namespace is other than "main",
then you will need to declare the package namespace explicitely.
However, once a package variable is declared with "our",
the fully package qualified name is NOT required, and you can refer
to the variable just on its variable name, as example (2) above
refers to the $name package variable.</p>
<p class="text-body-preceding-code-block-western">We do not HAVE to
use the "our" shortcut even if we used it to declare it.
The "our" declaration is a shorthand for declaring a
package variable. Once the package variable exists, we can access it
any way we wish.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Hogs;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $speak = 'oink';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "Hogs::speak    is
'$Hogs::speak'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Hogs::speak    is 'oink' ...</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.3.Package Variables inside a Lexical Scope|outline"></a>
4.3 Package Variables inside a Lexical Scope</h2>
<p class="text-body-preceding-code-block-western">When you declare a
package inside a code block, that package namespace declaration
remains in effect until the end of the block, at which time, the
package namespace reverts to the previous namespace.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Hogs;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $speak = 'oink';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{ # START OF CODE BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	package Heifers;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	our $speak = 'moo';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">} # END OF CODE BLOCK</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "speak is '$speak'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; speak is 'oink' ...</font></p>
<p class="western">The Heifers namespace still exists, as does all
the variables that were declared in that namespace. Its just that
outside the code block, the "our Heifers;" declaration has
worn off, and we now have to use a fully package qualified name to
get to the variables in Heifers package. This "wearing off"
is a function of the code block being a "lexical scope" and
a package declaration only lasts to the end of the current lexical
scope.</p>
<p class="text-body-preceding-code-block-western">The package
variables declared inside the code block "survive" after
the code block ends.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{ </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	package Heifers;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	our $speak = 'moo';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">} </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "Heifers::speak is
'$Heifers::speak'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Heifers::speak is 'moo'</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.4.Lexical Scope|outline"></a>
4.4 Lexical Scope</h2>
<p class="western">Lexical refers to words or text. A lexical scope
exists while execution takes place inside of a particular chunk of
source code. In the above examples, the "package Heifers;"
only exists inside the curly braces of the source code. Outside those
curly braces, the package declaration has gone out of scope, which is
a technical way of saying its "worn off".</p>
<p class="western">Scope refers to vision, as in telescope. Within a
lexical scope, things that have lexical limitations (such as a
package declaration) are only "visible" inside that lexical
space.</p>
<p class="western">So "lexical scope" refers to anything
that is visible or has an effect only withing a certain boundary of
the source text or source code. The easiest way to demonstrate
lexical scoping is lexical variables, and to show how lexical
variables differ from "our" variables.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.5.Lexical Variables|outline"></a>
4.5 Lexical Variables</h2>
<p class="text-body-preceding-code-block-western">Lexical variables
declared inside a lexical scope do not survive outside the lexical
scope. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no warnings;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no strict;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{ </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $speak = 'moo';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">} </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "speak is '$speak'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; speak is ''</font></p>
<p class="western">The lexical variable "$speak" goes out
of scope at the end of the code block (at the "}"
character), so it does not exist when we try to print it out after
the block. We had to turn warnings and strict off just to get it to
compile because with warnings and strict on, perl will know $speak
does not exist when you attempt to print it, so it will throw an
exception and quit.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Lexically scoped
variables have three main features:</p>
<p class="text-body-preceding-code-block-western" style="margin-left: 0.87in;">
<br><br>
</p>
<p class="text-body-preceding-code-block-western" style="margin-left: 0.87in;">
1) Lexical variables do not belong to any package namespace, so you
cannot prefix them with a package name:</p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no warnings;</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package main;</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $cnt='I am just a lexical';</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "main::cnt is
'$main::cnt'";</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 1.74in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; main::cnt is ''</font></p>
<p class="western" style="margin-left: 0.87in;">2) Lexical variables
are only directly accessible from the point where they are declared
to the end of the nearest enclosing block, subroutine, eval, or file.</p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no strict;</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $some_lex = 'I am lex';</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "some_lex is '$some_lex'";</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 1.74in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; some_lex is ''</font></p>
<p class="western" style="margin-left: 0.87in;">3) Lexical variables
are subject to "garbage collection" at the end of scope. If
nothing is using a lexical variable at the end of scope, perl will
remove it from its memory. Every time a variable is declared with
"my", it is created dynamically, during execution. The
location of the variable will change each time. Note in the example
below, we create a new $lex_var each time through the loop, and
$lex_var is at a different address each time.</p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @cupboard;</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">for (1 .. 5)</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $lex_var = 'canned goods';</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $lex_ref = \$lex_var;</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	push(@cupboard, $lex_ref);</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "$lex_ref\n";</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; SCALAR(0x812e770)</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; SCALAR(0x812e6c8)</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; SCALAR(0x812e6e0)</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; SCALAR(0x81624c8)</font></p>
<p style="margin-left: 1.74in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; SCALAR(0x814cf64)</font></p>
<p class="western">Lexical variables are just plain good. They
generally keep you from stepping on someone else's toes. They also
keep your data more private than a package variable. Package
variables are permanent, never go out of scope, never get garbage
collected, and are accessible from anyone's script.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.6.Garbage Collection|outline"></a>
4.6 Garbage Collection</h2>
<p class="western">When a lexical variable goes out of scope, perl
will check to see if anyone is using that variable, and if no one is
using it, perl will delete that variable and free up memory. 
</p>
<p class="western">The freed up memory is not returned to the system,
rather the freed up memory is used for possible declarations of new
lexically scoped variables that could be declared later in the
program. 
</p>
<p class="western">This means that your program will never get
smaller because of lexical variables going of of scope. Once the
memory is allocated for perl, it remains under perl's jurisdiction.
But perl can use garbage collected space for other lexical variables.</p>
<p class="text-body-preceding-code-block-western">If a lexical
variable is a referent of another variable, then the lexical will not
be garbage collected when it goes out of scope. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">no strict;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $referring_var;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $some_lex = 'I am lex';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$referring_var=\$some_lex;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "some_lex is '$some_lex'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "referring var refers to
'$$referring_var'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; some_lex is ''</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; referring var refers to 'I am
lex'</font></p>
<p class="western">When the lexical $some_lex went out of scope, we
could no longer access it directly. But since $referring_var is a
reference to $some_lex, then $some_lex was never garbage collected,
and it retained its value of "I am lex". The data in
$some_lex was still accessible through referring_var.</p>
<p class="western">Note that the named variable $some_lex went out of
scope at the end of the code block and could not be accessed by name.</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="4.6.1.Reference Count Garbage Collection|outline"></a>
4.6.1 Reference Count Garbage Collection</h3>
<p class="text-body-preceding-code-block-western">Perl uses reference
count based garbage collection. It is rudimentary reference counting,
so circular references will not get collected even if nothing points
to the circle. The example below shows two variables that refer to
each other but nothing refers to the two variables. Perl will not
garbage collect these variables even though they are completely
inaccessible by the end of the code block.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($first,$last);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	($first,$last)=(\$last,\$first);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">}</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="4.6.2.Garbage Collection and Subroutines|outline"></a>
4.6.2 Garbage Collection and Subroutines</h3>
<p class="western">Garbage collection does not rely strictly on
references to a variable to determine if it should be garbage
collected. If a subroutine uses a lexical variable, then that
variable will not be garbage collected as long as the subroutine
exists.</p>
<p class="western">Subroutines that use a lexical variable declared
outside of the subroutine declaration are called "CLOSURES".</p>
<p class="text-body-preceding-code-block-western">In the example
below, the lexical variable, $cnt, is declared inside a code block
and would normally get garbage collected at the end of the block.
However, two subroutines are declared in that same code block that
use $cnt, so $cnt is not garbage collected. Since $cnt goes out of
scope, the only things that can access it after the code block are
the subroutines. Note that a reference to $cnt is never taken,
however perl knows that $cnt is needed by the subroutines and
therefore keeps it around.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $cnt=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	sub inc{$cnt++; print "cnt is
'$cnt'\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	sub dec{$cnt--; print "cnt is
'$cnt'\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">inc;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">inc;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">inc;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">dec;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">dec;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">inc;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cnt is '1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cnt is '2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cnt is '3'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cnt is '2'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cnt is '1'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; cnt is '2'</font></p>
<p class="western">Subroutine names are like names of package
variables. The subroutine gets placed in the current declared package
namespace. Therefore, named subroutines are like package variables in
that, once declared, they never go out of scope or get garbage
collected.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.7.Package Variables Revisited|outline"></a>
4.7 Package Variables Revisited</h2>
<p class="western">Package variables are not evil, they are just
global variables, and they inherit all the possible problems
associated with using global variables in your code. 
</p>
<p class="western">In the event you DO end up using a package
variable in your code, they do have some advantages. They are global,
which means they can be a convenient way for several different blocks
of perl code to talk amongst themselves using an agreed upon global
variable as their channel.</p>
<p class="text-body-preceding-code-block-western" style="page-break-before: auto;">
Imagine several subroutines across several files that all want to
check a global variable: $Development::Verbose. If this variable is
true, these subroutines print detailed information. If it is false,
these subroutines print little or no information.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Development;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $Verbose=1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Compile  { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "compiling\n"; }
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Link  { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "linking\n"; }  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Run { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "running\n"; }  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Compile;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Link;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Run;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; compiling</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; linking</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; running</font></p>
<p class="western">The three subroutines could be in different files,
in different package namespaces, and they could all access the
$Development::Verbose variable and act accordingly.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="4.8.Calling local() on Package Variables|outline"></a>
4.8 Calling local() on Package Variables</h2>
<p class="western">When working with global variables, there are
times when you want to save the current value of the global variable,
set it to a new and temporary value, execute some foreign code that
will access this global, and then set the global back to what it was.</p>
<p class="text-body-preceding-code-block-western" style="page-break-before: auto;">
<font face="Times, serif">Continuing the previous example, say we
wish to create a RunSilent subroutine that stores
$Development::Verbose in a temp variable, calls the original Run
routine, and then sets $Development::Verbose back to its original
value.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Development;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $Verbose=1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Compile  { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "compiling\n"; }
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Link  { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "linking\n"; }  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Run { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($Development::Verbose)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ print "running\n"; }  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub RunSilent  {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $temp = $Development::Verbose;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$Development::Verbose=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	Run;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$Development::Verbose=$temp;  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Compile;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Link;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">RunSilent;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; compiling</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; linking</font></p>
<p class="western">This can also be accomplished with the "local()"
function.  The local function takes a package variable, saves off the
original value, allows you to assign a temp value to it. That new
value is seen by anyone accessing the variable. And at the end of the
lexical scope in which local() was called, the original value for the
variable is returned.</p>
<p class="text-body-preceding-code-block-western">The RunSilent
subroutine could be written like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub RunSilent  {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	local($Development::Verbose)=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	Run; }</font></p>
<p class="western">Perl originally started with nothing but package
variables. The "my" lexical variables were not introduced
until perl version 4. So to deal with all the package variables, perl
was given the local() function.  Local is also a good way to create a
temporary variable and make sure you dont step on someone else's
variable of the same name.</p>
<p class="western" style="page-break-before: always;"><br><br>
</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="5.Subroutines|outline"></a>
5 Subroutines</h1>
<p class="western">Perl allows you to declare named subroutines and
anonymous subroutines, similar to the way you can declare named
variables and anonymous variables.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.1.Subroutine Sigil|outline"></a>
5.1 Subroutine Sigil</h2>
<p class="western">Subroutines  use the ampersand ( &amp; ) as their
sigil. But while the sigils for scalars, arrays, and hashes are
mandatory, the sigil for subroutines is optional. 
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.2.Named Subroutines|outline"></a>
5.2 Named Subroutines</h2>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Below is the named
subroutine declaration syntax:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">sub NAME BLOCK</font></p>
<p class="western">NAME can be any valid perl identifier.</p>
<p class="western">BLOCK is a code block enclosed in parenthesis.</p>
<p class="text-body-preceding-code-block-western">The NAME of the
subroutine is placed in the current package namespace, in the same
way "our" variables go into the current package namespace.
So once a named subroutine is declared, you may access it with just
NAME if you are in the correct package, or with a fully package
qualified name if you are outside the package. And you can use the
optional ampersand sigil in either case.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package MyArea;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Ping {print "ping\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
 <font face="Courier, monospace">Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
 <font face="Courier, monospace">MyArea::Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;MyArea::Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ping</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ping</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ping</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; ping</font></p>
<p class="text-body-preceding-code-block-western">Once the current
package declaration changes, you MUST use a fully package qualified
subroutine name to call the subroutine.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package MyArea;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Ping {print "ping\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package YourArea;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">MyArea::Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;MyArea::Ping;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;Ping; # error, looking in
current package YourArea</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ping</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ping</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Undefined subroutine
&amp;YourArea::Ping</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.3.Anonymous Subroutines|outline"></a>
5.3 Anonymous Subroutines</h2>
<p class="text-body-preceding-code-block-western">Below is the
anonymous subroutine declaration syntax:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">sub BLOCK</font></p>
<p class="text-body-preceding-code-block-western">This will return a
code reference, similar to how [] returns an array reference, and
similar to how {} returns a hash reference. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub what_is_it </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($scalar)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $string = ref($scalar);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "ref returned
'$string'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $temp = sub {print "Hello\n";};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">what_is_it($temp);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; ref returned 'CODE'</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.4.Data::Dumper and subroutines|outline"></a>
5.4 <a href="data::Dumper">Data::Dumper</a> and subroutines</h2>
<p class="text-body-preceding-code-block-western">The contents of the
code block are invisible to anything outside the code block. For this
reason, things like <a href="data::Dumper">Data::Dumper</a> cannot
look inside the code block and show you the actual code. Instead it
does not even try and just gives you a place holder that returns a
dummy string.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $temp = sub {print "Hello\n";};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper $temp;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; $VAR1 = sub { "DUMMY"
};</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.5.Passing Arguments to/from a Subroutine|outline"></a>
5.5 Passing Arguments to/from a Subroutine</h2>
<p class="western">Any values you want to pass to a subroutine get
put in the parenthesis at the subroutine call. For normal
subroutines, all arguments go through the list context crushing
machine and get reduced to a list of scalars. The original containers
are not known inside the subroutine. The subroutine will not know if
the list of scalars it recieves came from scalars, arrays, or hashes.
 
</p>
<p class="western">To avoid some of the list context crushing, a
subroutine can be declared with a prototype, which are discussed
later.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.6.Accessing Arguments inside Subroutines via @_|outline"></a>
5.6 Accessing Arguments inside Subroutines via @_</h2>
<p class="text-body-preceding-code-block-western">Inside the
subroutine, the arguments are accessed via a special array called @_,
since all the arguments passed in were reduced to list context, these
arguments fit nicely into an array. The @_ array can be processed
just like any other regular array. If the arguments are fixed and
known, the preferred way to extract them is to assign @_ to a list of
scalars with meaningful names.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub compare {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($left,$right)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return $left&lt;=&gt;$right;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">}</font></p>
<p class="text-body-preceding-code-block-western">The @_ array is
"magical" in that it is really a list of aliases for the
original arguments passed in. Therefore, assigning a value to an
element in @_ will change the value in the original variable that was
passed into the subroutine call. Subroutine parameters are
effectively IN/OUT.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub swap { (@_) = reverse(@_); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $one = "I am one";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $two = "I am two";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">swap($one,$two);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "one is '$one'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "two is '$two'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; one is 'I am two' </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; two is 'I am one' </font>
</p>
<p class="text-body-preceding-code-block-western">Assigning to the
entire @_ array does not work, you have to assign to the individual
elements. If swap were defined like this, the variables $one and $two
would remain unchanged.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub swap {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($left,$right)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	@_ = ($right,$left);   #WRONG</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">}</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.7.Dereferencing Code References|outline"></a>
5.7 Dereferencing Code References</h2>
<p class="text-body-preceding-code-block-western">Dereferencing a
code reference causes the subroutine to be called. A code reference
can be dereferenced by preceding it with an ampersand sigil or by
using the arrow operator and parenthesis "-&gt;()". The
preferred way is to use the arrow operator with parens.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $temp = sub {print "Hello\n";};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;{$temp};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&amp;$temp;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$temp-&gt;(); # preferred</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Hello</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Hello</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Hello</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.8.Implied Arguments|outline"></a>
5.8 Implied Arguments</h2>
<p class="text-body-preceding-code-block-western">When calling a
subroutine with the "&amp;" sigil prefix and no
parenthesis, the current @_ array gets implicitely passed to the
subroutine being called. This can cause subtly odd behaviour if you
are not expecting it.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub second_level {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print Dumper \@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub first_level {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# using '&amp;' sigil and no parens.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# doesn't look like I'm passing any
params</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# but perl will pass @_ implicitely.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	&amp;second_level;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">first_level(1,2,3);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="text-body-preceding-code-block-western">This generally is
not a problem with named subroutines because you probably will not
use the "&amp;" sigil. However, when using code
referernces, dereferencing using the "&amp;" may cause
imlied arguments to be passed to the new subroutine. For this reason,
the arrow operator is the preferred way to dereference a code
reference.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$code_ref-&gt;();   # pass nothing,
no implicit @_</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$code_ref-&gt;(@_); # explicitly pass
@_</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$code_ref-&gt;( 'one', 'two' ); #
pass new parameters</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.9.Subroutine Return Value|outline"></a>
5.9 Subroutine Return Value</h2>
<p class="text-body-preceding-code-block-western">Subroutines can
return a single value or a list of values. The return value can be
explicit, or it can be implied to be the last statement of the
subroutine. An explicit return statement is the preferred approach if
any return value is desired.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># return a single scalar</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub ret_scal {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return "boo";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal_var = ret_scal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \$scal_var;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># return a list of values</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub ret_arr {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return (1,2,3);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @arr_var = ret_arr;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@arr_var;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = \'boo';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.10.Returning False|outline"></a>
5.10 Returning False</h2>
<p class="western">The return value of a subroutine is often used
within a boolean test. The problem is that the subroutine needs to
know if it is called in scalar context or array context.</p>
<p class="western">Returning a simple "undef" value (or 0
or 0.0 or "") will work in scalar context, but in array
context, it will create an array with the first element set to undef.
In boolean context, an array with one or more elements is considered
true.</p>
<p class="text-body-preceding-code-block-western">A return statement
by itself will return undef in scalar context and an empty list in
list context. This is the preferred way to return false in a
subroutine.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub this_is_false {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return;	# undef or empty list</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal_var = this_is_false;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @arr_var = this_is_false;</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.11.Using the caller() Function in Subroutines|outline"></a>
5.11 Using the caller() Function in Subroutines</h2>
<p class="text-body-preceding-code-block-western">The caller()
function can be used in a subroutine to find out information about
where the subroutine was called from and how it was called. Caller
takes one argument that indicates how far back in the call stack to
get its information from. For information about the current
subroutine, use caller(0).</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub HowWasICalled {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my @info = caller(0);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print Dumper \@info;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">HowWasICalled;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;$VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'main',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          './test.pl',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          13,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'main::HowWasICalled',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          1,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          undef,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          2,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'UUUUUUUUUUUU'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
The caller() function returns a list of information in the following
order</p>
<table style="page-break-after: avoid; page-break-inside: avoid; border: black solid thin;" cellpadding="4" cellspacing="0" width="593">
	<col width="54">
	<col width="117">
	<col width="396">
	<thead>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">0</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$package</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">package namespace at time of call</font></p>
			</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">1</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$filename</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">filename where called occurred</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">2</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$line</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">line number in file where call
				occurred</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">3</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$subroutine</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">name of subroutine called</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">4</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$hasargs</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">true if explicit arguments passed
				in</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">5</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$wantarray</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">list=1, scalar=0, void=undef</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">6</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$evaltext</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">evaluated text if an eval block</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">7</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$is_require</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">true if created by "require"
				or "use"</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">8</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$hints</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">internal use only, disregard</font></p>
			</td>
		</tr>
		<tr>
			<td valign="BOTTOM" width="54">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;" align="RIGHT">
				<font face="Courier, monospace">9</font></p>
			</td>
			<td valign="TOP" width="117">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">$bitmask</font></p>
			</td>
			<td valign="TOP" width="396">
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				<font face="Courier, monospace">internal use only, disregard</font></p>
			</td>
		</tr>
	</tbody>
</table>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p class="western"><font face="Times, serif">Note in the example
above, the code is in a file called test.pl. The call occurred in
package main, the default package namespace, and it occurred at line
13 of the file. The package qualified name of the subroutine that was
called was  main::HowWasICalled. The package qualified name must be
given since you dont know what package is current where the
subroutine was called from, that information is hidden in lexical
scope.</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.12.The caller() function and $wantarray|outline"></a>
5.12 The caller() function and $wantarray</h2>
<p class="text-body-preceding-code-block-western">The argument of
interest is the $wantarray argument. This indicates what return value
is expected of the subroutine from where it was called. The
subroutine could have been called in void context meaning the return
value is thrown away. Or it could have been called and the return
value assigned to a scalar. Or it could have been called and the
return value assigned to a list of scalars.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub CheckMyWantArray</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my @info = caller(0);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $wantarray = $info[5];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$wantarray='undef'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		unless(defined($wantarray));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "wantarray is
'$wantarray'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">CheckMyWantArray;			# undef</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal = CheckMyWantArray;	# 0</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @arr  = CheckMyWantArray;	# 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; wantarray is 'undef'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; wantarray is '0'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; wantarray is '1'</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="5.13.Context Sensitive Subroutines with wantarray()|outline"></a>
5.13 Context Sensitive Subroutines with wantarray()</h2>
<p class="text-body-preceding-code-block-western">You can use the
wantarray variable from caller() to create a subroutine that is
sensitive to the context in which it was called.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub ArrayProcessor {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my @info = caller(0);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $wantarray = $info[5];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return unless(defined($wantarray));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if($wantarray)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ return @_; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	else</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{ return scalar(@_); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @arr=qw(alpha bravo charlie);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">ArrayProcessor(@arr);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $scal = ArrayProcessor(@arr);    
# 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @ret_arr  = ArrayProcessor(@arr);
# alpha ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "scal is '$scal'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@ret_arr;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; scal is '3'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;$VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'alpha',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'bravo',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'charlie'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        ];</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="6.Compiling and Interpreting|outline"></a>
6 Compiling and Interpreting</h1>
<p class="western">When perl works on your source code, it will
always be in one of two modes: compiling or interpreting. Perl has
some hooks to allow access into these different cycles. They are code
blocks that are prefixed with BEGIN, CHECK, INIT, and END.</p>
<p class="western">Compiling: translating the source text into
machine usable internal format.</p>
<p class="western">Interpreting: executing the machine usable,
internal format.</p>
<p class="western">The BEGIN block is immediate.</p>
<p class="western">BEGIN -&gt; execute block as soon as it is
compiled, even before compiling anything else.</p>
<p class="western" style="page-break-before: auto; page-break-after: avoid;">
The other blocks, including normal code, do not execute until after
the entire program has been compiled. When anything other than a
BEGIN block is encountered, they are compiled and scheduled for
exeuction, but perl continues compiling the rest of the program.</p>
<p class="western" style="page-break-after: avoid;">CHECK -&gt;
Schedule these blocks for execution after all source code has been
compiled.</p>
<p class="western" style="page-break-after: avoid;">INIT-&gt; Schedule
these blocks for execution after the CHECK blocks have executed.</p>
<p class="western" style="page-break-after: avoid;">normal code -&gt;
Schedule normal code to execute after all INIT blocks.</p>
<p class="western" style="page-break-after: avoid;">END -&gt; Schedule
for execution after normal code has completed.</p>
<p class="western"><br><br>
</p>
<p class="western">Multiple BEGIN  blocks are executed immediately in
NORMAL declaration order.</p>
<p class="western">Multiple CHECK blocks are scheduled to execute in
REVERSE declaration order.</p>
<p class="western">Multiple INIT blocks are scheduled to execute in
NORMAL declaration order.</p>
<p class="western">Multiple ENDblocks are scheduled to execute in
REVERSE declaration order.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">END { print "END 1\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">CHECK { print "CHECK 1\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">BEGIN { print "BEGIN 1\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">INIT { print "INIT 1\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "normal\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">INIT { print "INIT 2\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">BEGIN { print "BEGIN 2\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">CHECK { print "CHECK 2\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">END { print "END 2\n" }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; BEGIN 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; BEGIN 2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; CHECK 2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; CHECK 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; INIT 1</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; INIT 2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; normal</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; END 2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; END 1</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="7.Code Reuse, Perl Modules|outline"></a>
7 Code Reuse, Perl Modules</h1>
<p class="western"><font face="Times, serif">Lets say you come up
with some really great chunks of perl code that you want to use in
several different programs. Perhaps you have some subroutines that
are especially handy, and perhaps they have some private data
associated with them. The best place to put code to be used in many
different programs is in a "Perl Module", and then "use"
that module.</font></p>
<p class="western"><font face="Times, serif">A perl module is really
just a file with an invented name and a ".pm" extension.
The "pm" is short for "perl module". If you had
some handy code for modeling a dog, you might put it in a module
called Dog.pm, and then you would use the "use" statement
to read in the module.</font></p>
<p class="western">The content of a perl module is any valid perl
code. Generally, perl modules contain declarations, such as
subroutine declarations and possibly declarations of private or
public variables. These declared subroutines can be called and public
variables can be accessed by any perl script that uses the module. 
</p>
<p class="western">It is standard convention that all perl modules
start out with a "package" declaration that declares the
package namespace to be the same as the module name. After any new
package declaration you will need to turn on warnings, etc.</p>
<p class="text-body-preceding-code-block-western">Here is an example
of our Dog module.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename: Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { print "Woof!\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">1; # MUST BE LAST STATEMENT IN FILE</font></p>
<p class="western">All perl modules must end with "1;"
otherwise you will get a compile error:</p>
<p class="western">Dog.pm did not return a true value ...</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="8.The use Statement|outline"></a>
8 The use Statement</h1>
<p class="text-body-preceding-code-block-western">The "use"
statement allows a perl script to bring in a perl module and use
whatever declarations have been made available by the module.
Continuing our example, a file called script.pl could bring in the
Dog module like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Dog::Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Woof!</font></p>
<p class="western">Both files, Dog.pm and script.pl, would have to be
in the same directory.  
</p>
<p class="western">The Dog module declares its package namespace to
be Dog. The module then declares a subroutine called "Speak",
which, like any normal subroutine, ends up in the current package
namespace, Dog. Once the Dog module has been used, anyone can call
the subroutine by calling Dog::Speak;</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="9.The use Statement, Formally|outline"></a>
9 The use Statement, Formally</h1>
<p class="text-body-preceding-code-block-western">The "use"
statement can be formally defined as this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use MODULENAME ( LISTOFARGS );</font></p>
<p class="text-body-preceding-code-block-western">The "use"
statement is exactly equivalent to this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">BEGIN</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	require MODULENAME;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	MODULENAME-&gt;import( LISTOFARGS );</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	}</font></p>
<p class="text-body-preceding-code-block-western">The MODULENAME
follows the package namespace convention, meaning it would be either
a single identifier or multiple identifiers separated by
double-colons. These are all valid MODULENAMES:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Pets::Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Pets::Dog::GermanShepard;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use Pets::Cat::Persian;</font></p>
<p class="western">User created module names should be mixed case.
Module names with all lower case are reserved for built in pragmas,
such as "use warnings;" Module names with all upper case
letters are just ugly and could get confused with built in words.</p>
<p class="western">The "require" statement is what actually
reads in the module file. 
</p>
<p class="western">When performing the search for the module file,
"require" will translate the double-colons into whatever
directory separator is used on your system. For Linux style systems,
it would be a "/". So perl would look for
Pets::Dog::GermanShepard in Pets/Dog/ for a file called
GermanShepard.pm</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.1.The @INC Array|outline"></a>
9.1 The @INC Array</h2>
<p class="western">The "require" statement will look for
the module path/file in all the directories listed in a global array
called @INC. Perl will initialize this array to some default
directories to look for any modules. If you want to create a
subdirectory just for your modules, you can add this subdirectory to
@INC and perl will find any modules located there.</p>
<p class="text-body-preceding-code-block-western">Because the
"require" statement is in a BEGIN block, though, it will
execute immediately after being compiled. So this will not work:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">push(@INC,'/home/username/perlmodules');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use Dogs;</font></p>
<p class="text-body-preceding-code-block-western">This is because the
"push" statement will get compiled and then be scheduled
for execution after the entire program has been compiled. The "use"
statement will get compiled and executed immediately, before the
"push" is executed, so @INC will not be changed when "use"
is called.</p>
<p class="text-body-preceding-code-block-western">You could say
something like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">BEGIN {
push(@INC,'/home/username/perlmodules'); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use Dogs;</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.2.The use lib Statement|outline"></a>
9.2 The use lib Statement</h2>
<p class="text-body-preceding-code-block-western">The "use lib"
statement is my preferred way of adding directory paths to the @INC
array, because it does not need a BEGIN block. Just say something
like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use lib '/home/username/perlmodules';</font></p>
<p class="text-body-preceding-code-block-western">Also, for you Linux
heads, note that the home directory symbol "~" is only
meaningful in a linux shell. Perl does not understand it. So if you
want to include a directory under your home directory, you will need
to call "glob" to translate "~" to something perl
will understand. The "glob" function uses the shell
translations on a path.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use lib glob('~/perlmodules');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use Dogs;</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.3.The PERL5LIB and PERLLIB Environment Variables|outline"></a>
9.3 The PERL5LIB and PERLLIB Environment Variables</h2>
<p class="western">The "require" statement also searches
for MODULENAME in any directories listed in the environment variable
called PERL5LIB. The PERL5LIB variable is a colon separated list of
directory paths. Consult your shell documentation to determine how to
set this environment variable.</p>
<p class="western">If you don't have PERL5LIB set, perl will search
for MODULENAME in any directory listed in the PERLLIB environment
variable.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.4.The require Statement|outline"></a>
9.4 The require Statement</h2>
<p class="western">Once the require statement has found the module,
perl compiles it. Because the require statement is in a BEGIN block,
the module gets executed immediately as well.</p>
<p class="western">This means any executable code gets executed. Any
code that is not a declaration will execute at this point. 
</p>
<p class="western">The  MODULENAME-&gt;import statement is then
executed.</p>
<p class="western"><br><br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.5.MODULENAME -&gt; import (LISTOFARGS)|outline"></a>
9.5 MODULENAME -&gt; import (LISTOFARGS)</h2>
<p class="western">The  MODULENAME-&gt;import(LISTOFARGS) statement
is a "method call", which has not been introduced yet. A
method call is a fancy way of doing a subroutine call with a couple
of extra bells and whistles bolted on.</p>
<p class="western">Basically, if your perl module declares a
subroutine called "import" then it will get executed at
this time. 
</p>
<p class="western">More advancedly, one of the bells and whistles of
a method call is a thing called "inheritance", which has
not been introduced yet. So, to be more accurate, if your perl module
OR ITS BASE CLASS(ES) declares a subroutine called "import"
then it will get executed at this time.</p>
<p class="western"><font face="Times, serif">The import method is a
way for a module to import subroutines or variables to the caller's
package.  This happens when you use </font><a href="data::Dumper"><font face="Times, serif">Data::Dumper</font></a><font face="Times, serif">
in your script. Which is why you can say </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"><font face="Courier, monospace">use
</font><a href="data::Dumper"><font face="Courier, monospace">Data::Dumper</font></a><font face="Courier, monospace">;
</font></font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print Dumper \@var;</font></p>
<p class="text-body-preceding-code-block-western">instead of having
to say:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"><font face="Courier, monospace">use
</font><a href="data::Dumper"><font face="Courier, monospace">Data::Dumper</font></a><font face="Courier, monospace">;
</font></font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print Data::Dumper \@var;</font></p>
<p class="western">A subroutine called "Dumper" gets
imported into your package namespace. 
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="9.6.The use Execution Timeline|outline"></a>
9.6 The use Execution Timeline</h2>
<p class="text-body-preceding-code-block-western">The following
example shows the complete execution timeline during a use statement.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl  </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "just before use Dog";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog ('GermanShepard');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "just after use Dog";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Dog::Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "executing normal code";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { print "Woof!\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub import { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "calling import";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "with the following
args\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print Dumper \@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1; # MUST BE LAST STATEMENT IN FILE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; executing normal code at Dog.pm
line 4.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; calling import at Dog.pm line 7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; with the following args</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'Dog',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'GermanShepard'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; just before use Dog at
./script.pl line 4.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; just after use Dog at
./script.pl line 6.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Woof!</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="10.bless()|outline"></a>
10 bless()</h1>
<p class="western">The bless() function is so simple that people
usually have a hard time understanding it because they make it far
more complicated than it really is. All bless does is change the
string that would be returned when ref() is called. The bless()
function is the basis for Object Oriented Perl, but bless() by itself
is overwhelmingly simple.</p>
<p class="text-body-preceding-code-block-western">Quick reference
refresher: Given an array referent, @arr, and a reference,
$rarr=\@arr, then calling ref($rarr) will return the string "ARRAY".</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @arr=(1,2,3);		# referent</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $rarr = \@arr;		# reference to
referent</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = ref($rarr);	# call ref()</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "str is '$str'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; str is 'ARRAY'</font></p>
<p class="text-body-preceding-code-block-western">Normally, ref()
will return SCALAR, ARRAY, HASH, CODE, or empty-string depending on
what type of referent it is referred to. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(\4);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref([]);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref({});</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(sub{});</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "'".ref(4)."'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; SCALAR at ./script.pl line 4.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ARRAY at ./script.pl line 5.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; HASH at ./script.pl line 6.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; CODE at ./script.pl line 7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; '' at ./script.pl line 8.</font></p>
<p class="western">The bless function takes a reference and a string
as input.</p>
<p class="western">The bless function modifies the referent pointed
to by the reference and attaches the given string such that ref()
will return that string.</p>
<p class="text-body-preceding-code-block-western">The bless function
will then return the original reference.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">bless REFERENCE, STRING;</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Here is an example
of bless() in action. Note this is exactly the same as the code in
the first example, but with one line added to do the bless:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @arr=(1,2,3);		# referent</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $rarr = \@arr;		# reference to
referent</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">bless($rarr, "Counter");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = ref($rarr);	# call ref()</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "str is '$str'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; str is 'Counter'</font></p>
<p class="text-body-preceding-code-block-western">Since bless()
returns the reference, we can call ref() on the return value and
accomplish it in one line:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $sca=4;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(bless(\$sca,"Four"));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(bless([],"Box"));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(bless({},"Curlies"));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn ref(bless(sub{},"Action"));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Four at ./script.pl line 5.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Box at ./script.pl line 6.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Curlies at ./script.pl line 7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Action at ./script.pl line 8.</font></p>
<p class="western">All bless() does is affect the value returned by
ref(). That is it.</p>
<p class="western">You might be wondering why the word "bless"
was chosen. If a religious figure took water and blessed it, then
people would refer to it as "holy water". The constitution
and makeup of the water did not change, however it was given a new
name, and because of that name it might be used differently.</p>
<p class="western">In perl, bless() changes the name of a referent.
It does not affect the contents of the referent, only the name
returned by ref(). But because of this new name, the referent might
be used differently or behave differently. We will see this
difference with method calls.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="11.Method Calls|outline"></a>
11 Method Calls</h1>
<p class="western">We have seen method calls before. The
<font face="Courier, monospace">MODULENAME-&gt;import(LISTOFARGS)</font>
was a method call, but we had to do some handwaving to get beyond it,
calling it a fancy subroutine call.</p>
<p class="text-body-preceding-code-block-western">Quick review of
package qualified subroutine names: When you declare a subroutine, it
goes into the current package namespace. You can call the subroutine
using its short name if you are still in the package. Or you can use
the fully qualified package name, and be guaranteed it will work
every time.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { print "Woof\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Dog::Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Woof</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Woof</font></p>
<p class="text-body-preceding-code-block-western">A method call is
similar. Here is the generic definition:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">INVOCANT -&gt; METHOD ( LISTOFARGS );</font></p>
<p class="text-body-preceding-code-block-western">The INVOCANT is the
thing that "invoked" the METHOD. An invocant can be several
different things, but the simplest thing it can be is just a bareword
package name to go look for the subroutine called METHOD. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Dog -&gt; Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Woof</font></p>
<p class="western">So it is almost the same as using a package
qualified subroutine name Dog::Speak. So what is different?</p>
<p class="text-body-preceding-code-block-western">First, the INVOCANT
always gets unshifted into the @_ array in the subroutine call.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
<a href="data::Dumper">Data::Dumper</a>;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print Dumper \@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Dog -&gt; Speak (3);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'Dog',	# INVOCANT</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           3		# first user
argument </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p class="western">This may not seem very useful, but an INVOCANT can
be many different things, some more useful than others.</p>
<p class="western">The second difference between a subroutine call
and a method call is inheritance.</p>
<p class="western"><br><br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="11.1.Inheritance|outline"></a>
11.1 Inheritance</h2>
<p class="text-body-preceding-code-block-western">Say you want to
model several specific breeds of dogs. The specific breeds of dogs
will likely be able to inherit some behaviours (subroutine/methods)
from a base class that describes all dogs. Say we model a German
Shepard that has the ability to track a scent better than other
breeds. But German Shepards still bark like all dogs.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($invocant, $count) = @_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "invocant is '$invocant'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	for(1 .. $count) { warn "Woof";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Shepard.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Shepard;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use base Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Track { warn "sniff, sniff";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Shepard;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Shepard-&gt;Speak(2);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Shepard-&gt;Track;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; invocant is 'Shepard' at Dog.pm
line 6.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Woof at Dog.pm line 8.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Woof at Dog.pm line 8.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; sniff, sniff at Shepard.pm line
4.</font></p>
<p class="western">Notice that script.pl used Shepard, not Dog. And
script.pl always used Shepard as the invocant for its method calls.
When script.pl called Shepard-&gt;Speak, perl first looked in the
Shepard namespace for a subroutine called Shepard::Speak. It did not
find one. So then it looked and found a BASE of Shepard called Dog.
It then looked for a subroutine called Dog::Speak, found one, and
called that subroutine.</p>
<p class="western">Also notice that the subroutine Dog::Speak
received an invocant of "Shepard". Even though perl ended
up calling Dog::Speak, perl still passes Dog::Speak the original
invocant, which was "Shepard" in this case.</p>
<p class="western">Shepard INHERITED the Speak subroutine from the
Dog package.</p>
<p class="western">The unexplained bit of magic is that inheritance
uses the "use base" statement to determine what packages to
inherit from.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="11.2.use base|outline"></a>
11.2 use base</h2>
<p class="text-body-preceding-code-block-western">This statement:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use base MODULENAME;</font></p>
<p class="text-body-preceding-code-block-western">is functionally
identical to this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">BEGIN</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	require MODULENAME;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	push(@ISA, MODULENAME);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	}</font></p>
<p class="western">The require statement goes and looks for
MODULENAME.pm using the search pattern that we described in the "use"
section earlier.</p>
<p class="western">The push(@ISA,MODULENAME) is new. When a method
call looks in a package namespace for a subroutine and does not find
one, it will then go through the contents of the @ISA array. The @ISA
array contains any packages that are BASE packages of the current
package.</p>
<p class="western">The @ISA array is named that way because "Shepard"
IS A "Dog", therefore ISA.</p>
<p class="western" style="page-break-after: avoid;">The search order
is depth-first, left-to-right. This is not necessarily the "best"
way to search, but it is how perl searches, so you will want to learn
it. If this approach does not work for your application, you can
change it with a module from CPAN.</p>
<p class="western" style="page-break-after: avoid;">Imagine a Child
module has the following family inheritance tree:</p>
<p class="western" style="page-break-after: avoid;"><img src="iperl_files/iperl_html_m5238e28d.jpg" height="244" width="606" align="LEFT" border="0" alt="inheritance diagram"><br clear="LEFT"><br><br>
</p>
<p class="text-body-preceding-code-block-western">Perl will search
for Child-&gt;Method through the inheritance tree in the following
order:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Child</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Father</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">FathersFather</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">FathersMother</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Mother</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">MothersFather</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">MothersMother</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="11.3.INVOCANT-&gt;isa(BASEPACKAGE)|outline"></a>
11.3 INVOCANT-&gt;isa(BASEPACKAGE)</h2>
<p class="text-body-preceding-code-block-western">The "isa"
method will tell you if BASEPACKAGE exists anywhere in the @ISA
inheritance tree.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Child-&gt;isa("MothersMother");
# TRUE</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Child-&gt;isa("Shepard"); #
FALSE</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="11.4.INVOCANT-&gt;can(METHODNAME)|outline"></a>
11.4 INVOCANT-&gt;can(METHODNAME)</h2>
<p class="text-body-preceding-code-block-western">The "can"
method will tell you if the INVOCANT can call METHODNAME
successfully.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Shepard-&gt;can("Speak"); #
TRUE (Woof)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Child-&gt;can("Track"); #
FALSE (can't track a scent)</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="11.5.Interesting Invocants|outline"></a>
11.5 Interesting Invocants</h2>
<p class="text-body-preceding-code-block-western">So far we have only
used bareword invocants that correspond to package names. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Shepard-&gt;Track;</font></p>
<p class="western">Perl allows a more interesting invocant to be used
with method calls: a blessed referent.</p>
<p class="western">Remember bless() changes the string returned by
ref(). Well, when using a reference as an invocant, perl will call
ref() on the reference and use the string returned as starting
package namespace to begin searching for the method/subroutine.</p>
<p class="text-body-preceding-code-block-western">Here is our simple
Dog example but with a blessed invocant.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($invocant, $count) = @_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "invocant is '$invocant'";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	for(1 .. $count) { warn "Woof";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $invocant=bless {},'Dog'; ###
BLESSED INVOCANT</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$invocant-&gt;Speak(2);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; invocant is
'Dog=HASH(0x8124394)' at Dog.pm line 6</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Woof at Dog.pm line 8.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Woof at Dog.pm line 8.</font></p>
<p class="western">The  <font face="Courier, monospace">my
$invocant=bless {},"Dog";</font>  is the new line. The
bless part creates an anonymous hash, {}, and blesses it with the
name "Dog". If you called ref($invocant), it would return
the string "Dog".</p>
<p class="western">So perl uses "Dog" as its "child"
class to begin its method search through the hierarchy tree. When it
finds the method, it passes the original invocant, the anonmous hash,
to the method as the first argument.</p>
<p class="western">Well, since we have an anonymous hash passed
around anyway, maybe we could use it to store some information about
the different dogs that we are dealing with. In fact, we already know
all the grammar we need to know about Object Oriented Perl
Programming, we just need to speak different sentences now.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="12.Procedural Perl|outline"></a>
12 Procedural Perl</h1>
<p class="text-body-preceding-code-block-western">So far, all the
perl coding we have done has been "procedural" perl. When
you hear "procedural" think of "Picard", as in
Captain Picard of the starship Enterprise. Picard always gave the
ship's computer commands in the form of procedural statements. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Computer, set warp drive to 5.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Computer, set shields to "off".</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Computer, fire weapons: phasers and
photon torpedoes.</font></p>
<p class="text-body-preceding-code-block-western">The subject of the
sentences was always "Computer". In procedural programming,
the subject "computer" is implied, the way the subject
"you" is implied in the sentence: "Stop!"</p>
<p class="text-body-preceding-code-block-western">The verb and direct
object of Picard's sentences become the subroutine name in
proceedural programming. Whatever is left become arguments passed in
to the subroutine call.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">set_warp(5);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">set_shield(0);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">fire_weapons qw(phasers
photon_torpedoes);</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="13.Object Oriented Perl|outline"></a>
13 Object Oriented Perl</h1>
<p class="text-body-preceding-code-block-western">Object oriented
perl does not use an implied "Computer" as the subject for
its sentences. Instead, it uses what was the direct object in the
procedural sentences and makes it the subject in object oriented
programming.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Warp Drive, set yourself to 5.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Shields, set yourself to "off".</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Phasors, fire yourself.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">Torpedoes, fire yourself.</font></p>
<p class="western">But how would we code these sentences?</p>
<p class="western">Let's start with a familiar example, our Dog
module. Assume we want to keep track of several dogs at once. Perhaps
we are coding up an inventory system for a pet store. 
</p>
<p class="western">First, we want a common way to handle all pets, so
we create an Animal.pm perl module. This module contains one
subroutine that takes the invocant and a Name, puts the Name into a
hash, blesses the hash, and returns a reference to the hash. This
return value becomes a "Animal" object. This subroutine is
an object contructor.</p>
<p class="western">Then we create a Dog module that uses Animal as
its base to get the contructor. We then add a method to let dogs
bark. The method prints the name of the dog when they bark so we know
who said what.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">The script.pl
creates three dogs and stores them in an array. The script then goes
through the array and calls the Speak method on each object.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Animal.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Animal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub New </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($invocant,$name)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return
bless({Name=&gt;$name},$invocant);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use base Animal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my ($obj)=@_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $name=$obj-&gt;{Name};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "$name says Woof"; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @pets;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># create 3 Dog objects and put them
in @pets array</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $name qw(Butch Spike
Fluffy)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ push(@pets, Dog-&gt;New($name)); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># have every pet speak for
themselves.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $pet (@pets)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ $pet-&gt;Speak; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Butch says Woof at Dog.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Spike says Woof at Dog.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Fluffy says Woof at Dog.pm line
7.</font></p>
<p class="western">Notice the last foreach loop in script.pl says
$pet-&gt;Speak. This is object oriented programming, because if you
translated that statement to English, it would be "Pet, speak
for yourself". The subject of the sentence is "Pet",
rather than the implied "Computer" of procedural
programming.</p>
<p class="text-body-preceding-code-block-western">Object Oriented
Programming statements are of the form:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$subject -&gt; verb ( adjectives,
adverbs, etc );</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="13.1.Class|outline"></a>
13.1 Class</h2>
<p class="western">The term "class" is just an Object
Oriented way of saying "package and module".</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="13.2.Polymorphism|outline"></a>
13.2 Polymorphism</h2>
<p class="western">Polymorphism is a real fancy way of saying having
different types of objects that have the same methods.</p>
<p class="western">Expanding our previous example, we might want to
add a Cat class to handle cats at the pet store. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Cat.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Cat;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use base Animal;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $obj=shift;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $name=$obj-&gt;{Name};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "$name says Meow"; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">1;</font></p>
<p class="text-body-preceding-code-block-western">Then we modify
script.pl to put some cats in the @pets array.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl  </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl   </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog; use Cat;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @pets;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#create some dog objects</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $name qw(Butch Spike
Fluffy)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ push(@pets, Dog-&gt;New($name)); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># create some cat objects</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $name qw(Fang Furball
Fluffy)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ push(@pets, Cat-&gt;New($name)); }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># have all the pets say something.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $pet (@pets)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ $pet-&gt;Speak; } # polymorphism
at work</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Butch says Woof at Dog.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Spike says Woof at Dog.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Fluffy says Woof at Dog.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Fang says Meow at Cat.pm line 7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Furball says Meow at Cat.pm line
7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Fluffy says Meow at Cat.pm line
7.</font></p>
<p class="western">Notice how the last loop goes through all the pets
and has each one speak for themselves. Whether its a dog or cat, the
animal will say whatever is appropriate for its type.</p>
<p class="western">This is polymorphism. The code processes a bunch
of objects and calls the same method on each object. And each object
just knows how to do what it should do.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="13.3.SUPER|outline"></a>
13.3 SUPER</h2>
<p class="western">SUPER:: is an interesting bit of magic that allows
a child object with a method call that same method name in its
parent's class. 
</p>
<p class="text-body-preceding-code-block-western">Back to the dogs.
To shorten the example, the constructor New was moved to Dog.pm. The
Shepard module uses Dog as its base, and has a Speak method that
growls, and then calls its ancestor's Dog version of speak.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub New {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return bless({Name=&gt;$_[1]},$_[0]);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $name=$_[0]-&gt;{Name};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "$name says Woof"; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Shepard.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Shepard;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use base Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Speak { </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $name=$_[0]-&gt;{Name};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn "$name says Grrr"; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$_[0]-&gt;SUPER::Speak;	### SUPER</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Shepard;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $dog=Shepard-&gt;New("Spike");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$dog-&gt;Speak;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Spike says Grrr at Shepard.pm
line 6.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Spike says Woof at Dog.pm line
8.</font></p>
<p class="western">Without the magic of SUPER, the only way that
Shepard can call Dog's version of speak is to use a fully package
qualified name Dog::Speak(); But this scatters hardcoded names of the
base class throughout Shepard, which would make changing the base
class a lot of work.</p>
<p class="western">If Shepard's version of Speak simply said
$_[0]-&gt;Speak, it would get into an infinite loop calling itself
recursively. SUPER is a way of saying, "look at my ancestors and
call their version of this method."</p>
<p class="western">There are some limitations with SUPER. Consider
the big family tree inheritance diagram in the "use base"
section of this document (the one with Child as the root, Father and
Mother as parents, and FathersFather, FathersMother, etc as
grandparents). 
</p>
<p class="western">Imagine an object of type "Child". If 
"Father" has a method called Speak and that method calls
SUPER::Speak, the only modules that will get looked at is
"FathersFather" and "FathersMother". SUPER looks
up the hierarchy starting at the class from where it was called. This
means if the method FathersFather needed to call was in
MothersMother, then SUPER will not work.</p>
<p class="western">This could be considered a good thing, since you
would assume that Father was designed only knowing about
FathersFather and FathersMother. When Father was coded, MothersMother
was a complete stranger he would not meet for years to come. So
designing Father to rely on his future, have-not-even-met-her-yet
mother-in-law, could be considered a bad thing.</p>
<p class="western">However, it is legitimate to have what you might
consider to be "universal" methods that exist for every
class. Instead of a class called "Child" imagine a class
called "CoupleAboutToGetMarried", and every base class has
a method called "ContributeToWedding". In that case, every
class could do its part, and then call SUPER::ContributeToWedding.
The FatherOfTheBride would pay for the wedding, the FatherOfTheGroom
would pay for the rehersal dinner, and so on and so forth.</p>
<p class="western">Unfortunately, there is no easy, built-in way to
do this in perl. 
</p>
<p class="western">I will refer you to the "NEXT.pm" module
available on CPAN.</p>
<p class="western">SUPER does have its uses, though. Many times a
class might exist that does ALMOST what you want it to do. Rather
than modify the original code to do what you want it to, you could
instead create a derived class that inherits the base class and
rewrite the method to do what you want it to do. For example, you
might want a method that calls its parent method but then multiplies
the result by minus one or something. In cases like this, SUPER will
do the trick.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="13.4.Object Destruction|outline"></a>
13.4 Object Destruction</h2>
<p class="text-body-preceding-code-block-western">Object destruction
occurs when all the references to a specific object have gone out of
lexical scope, and the object is scheduled for garbage collection.
Just prior to deleting the object and any of its internal data, perl
will call the DESTROY method on the object. If no such method exists,
perl silently moves on and cleans up the object data.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:Dog.pm</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">package Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub New {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	return bless({Name=&gt;$_[1]},$_[0]);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub DESTROY {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	warn (($_[0]-&gt;{Name})." has
been sold"); </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/local/env perl </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Dog;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $dog=Dog-&gt;New("Spike");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$dog=undef;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Spike has been sold at Dog.pm
line 7.</font></p>
<p class="western">The DESTROY method has similar limitations as
SUPER. With an object that has a complex hierarchical family tree,
perl will only call the FIRST method of DESTROY that it finds in the
ancestry. If Mother and Father both have a DESTROY method, then
Mother's not going to handle her demise properly and you will likely
have ghosts when you run your program. 
</p>
<p class="western">The NEXT.pm module on CPAN also solves this
limitation.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="14.Object Oriented Review|outline"></a>
14 Object Oriented Review</h1>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.1.Modules|outline"></a>
14.1 Modules</h2>
<p class="western">The basis for code reuse in perl is a module. A
perl module is a file that ends in ".pm" and declares a
package namespace that (hopefully) matches the name of the file. The
module can be designed for procedural programming or object oriented
programming (OO). If the module is OO, then the module is sometimes
referred to as a "class".</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.2.use Module|outline"></a>
14.2 use Module</h2>
<p class="text-body-preceding-code-block-western">The code in a perl
module can be made available to your script by saying "use
MODULE;" The "use" statement will look for the module
in the directories listed in the PERL5LIB environment variable and
then the directories listed in the @INC variable. The best way to add
directories to the @INC variable is to say</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">use lib "/path/to/dir";</font></p>
<p class="western">Any double-colons (::) in the module name being
used get converted to a directory separator symbol of the operating
system.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.3.bless / constructors|outline"></a>
14.3 bless / constructors</h2>
<p class="western">If the module is designed for procedural
programming, it will provide subroutine declarations that can be
called like normal subroutines. If the module is designed for object
oriented use, it will declare subroutines that will be used as
constructors or methods. 
</p>
<p class="western">Constructors are subroutines that create a
reference to some variable, use the reference to bless the variable
into the class, and then return the reference. Once its referent is
blessed,  it can be used as an object, and the reference is a handy
way of passing the object around. 
</p>
<p class="western">The object is usually a hash. Keys to the hash
correspond to object attribute names, and the Values correspond to
the attribute values specific to that particular instance. In the
Animal.pm module example, one key was "Name", and different
instances had Name values of "Fluffy", "Spike",
and so on.</p>
<p class="text-body-preceding-code-block-western">The best way of
calling a constructor is to use the arrow operator:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $object =
Classname-&gt;Constructor(arguments);</font></p>
<p class="text-body-preceding-code-block-western">In the Animal.pm
class, this would look like:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $pet = Animal-&gt;New('Spike')</font></p>
<p class="western">The name of the constructor can be any valid
subroutine name, but is usually "new" or "New".</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.4.Methods|outline"></a>
14.4 Methods</h2>
<p class="western">Once an instance of an object has been
constructed, methods can be called on the instance to get
information, change values, perform operations, etc. A method is
simply a subroutine that receives a reference to the instance
variable as its first argument. Methods should be thought of as
"actions" to be performed on the instance, or "verbs"
in a sentences with instances being the "subject".</p>
<p class="text-body-preceding-code-block-western">In the above
examples, "Speak" was a method that used the Name of the
instance  to print out "$name says woof". The preferred way
of calling a method is using the arrow method.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$ObjectInstance -&gt; Method ( list
of arguments );</font></p>
<p class="text-body-preceding-code-block-western">In the Animal.pm
example, this would look like:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$pet-&gt;Speak;</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.5.Inheritance|outline"></a>
14.5 Inheritance</h2>
<p class="western">Classes can inherit methods from base classes.
This allows many similar classes to put all their common methods in a
single base class. To have a class inherit from a base class, use the
"use base" statement.</p>
<p class="western">use base BaseClassName;</p>
<p class="western">In one example above, the Cat and Dog classes both
inherit from a common Animal class. Both Dog and Cat classes inherit
the constructor "New" method from the Animal base class.</p>
<p class="western">The classes Cat and Dog inherit from the base
class Animal. Cat and Dog are "derived" from Animal.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="14.6.Overriding Methods and SUPER|outline"></a>
14.6 Overriding Methods and SUPER</h2>
<p class="western">Classes can override the methods of their base
classes. If a base class contains a method called "MethodName",
then a derived class can override the base class method by declaring
its own subroutine called MethodName.</p>
<p class="western">In the examples above, the GermanShepard derived
class overrode the Dog base class Speak method with its own method.</p>
<p class="text-body-preceding-code-block-western">If a derived class
overrides a method of its base class, it may want to call its base
class method. The only way to accomplish this is with the SUPER::
pseudopackage name. The GermanShepard method named Speak called the
Dog version of Speak by calling:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$obj-&gt;SUPER::Speak;</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="15.CPAN|outline"></a>
15 CPAN</h1>
<p class="western">CPAN is an acronym for "Comprehensive Perl
Archive Network". There is a CPAN website, which contains a
plethora of perl module for anyone to download. There is also a CPAN
perl module, which provides a shell interface for automating the
downloading of perl modules from the CPAN website. A "perldoc"
utility comes with perl that allows viewing of POD, which is "Plain
Old Documentation" embedded within the perl modules downloaded
from CPAN. And finally, there is a "h2xs" utility, which
automates the creation of a module to be uploaded to CPAN.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="15.1.CPAN, The Web Site|outline"></a>
15.1 CPAN, The Web Site</h2>
<p class="text-body-preceding-code-block-western">CPAN is a website
that contains all things perl: help, FAQs, source code to install
perl, and most importantly, a plethora of perl module so that you can
re-use someone else's code.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace"><a href="http://www.cpan.org/"><font face="Courier, monospace">http://www.cpan.org</font></a></font></p>
<p class="western">CPAN contains a number of search engines. Once you
find a module that might do what you need, you can view the README
file that is usually available online before actually downloading the
module. If the README looks promising, then download the tarball,
which will be a file with a tar.gz extension. 
</p>
<p class="text-body-preceding-code-block-western">Here is the
standard installation steps for a module. This example is for the
NEXT.pm module, which is contained in <a href="http://next-0.60.tar.gz/">NEXT-0.60.tar.gz</a>
(you should use the latest version, if available.)</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; gunzip <a href="http://next-0.60.tar.gz/">NEXT-0.60.tar.gz</a></font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; tar -xf <a href="http://next-0.60.tar/">NEXT-0.60.tar</a></font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; cd NEXT-0.60</font></p>
<p class="text-body-preceding-code-block-western">From here, most
modules install with the exact same commands:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perl Makefile.PL</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; make</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; make test</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; su root</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; make install</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; exit </font>
</p>
<p class="western">The "make install" step requires root
priveledges. The "exit" step is shown just so you remember
to log out from root. 
</p>
<p class="western">If you do not have root priveledges and the module
is pure perl (just a .pm file), then  you can copy the .pm file to
your home directory (or anywhere you have read/write priveledges),
and then set your PERL5LIB environment variable to point to that
directory.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="15.2.CPAN, The Perl Module|outline"></a>
15.2 CPAN, The Perl Module</h2>
<p class="western"><font face="Times, serif">The CPAN.pm module is a
module that automates the installation process. you give it the name
of a module, and it downloads it from the web, untars it, and
installs it for you. More interestingly, it will install any
dependencies for you as well. If you install a module that requires a
separate module, it installs both modules for you with one command.</font></p>
<p class="western"><font face="Times, serif">CPAN.pm will want you to
have lynx installed on your machine. Lynx is a text-based webbrowser.
CPAN.pm will also want ncftpget, which is an Internet file transfer
program for scripts. Install these on your system before running the
CPAN module.</font></p>
<p class="text-body-preceding-code-block-western">The CPAN.pm module
is run from a shell mode as root (you need root priviledges to do the
install). Change to root, and then run the CPAN.pm module shell. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; su root</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; perl -MCPAN -e shell</font></p>
<p class="western">The first time it is run, it will ask you a bunch
of configuration questions. Most can be answered with the default
value (press &lt;return&gt;).  
</p>
<p class="text-body-preceding-code-block-western">Here is a log from
the CPAN being run for the first time on my machine:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Are you ready for manual
configuration? [yes]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">CPAN build and cache directory?
[/home/greg/.cpan]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Cache size for build directory (in
MB)? [10]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Perform cache scanning (atstart or
never)? [atstart]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Cache metadata (yes/no)? [yes]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your terminal expects ISO-8859-1
(yes/no)? [yes]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Policy on building prerequisites
(follow, ask or ignore)? [ask]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your gzip program?
[/usr/bin/gzip]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your tar program? [/bin/tar]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your unzip program?
[/usr/bin/unzip]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your make program?
[/usr/bin/make]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your lynx program? []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; /usr/bin/lynx</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your wget program?
[/usr/bin/wget]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your ncftpget program? [] </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; /usr/bin/ncftpget</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Where is your ftp program?
[/usr/bin/ftp]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">What is your favorite pager program?
[/usr/bin/less]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">What is your favorite shell?
[/bin/bash]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Parameters for the 'perl Makefile.PL'
command?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your choice:  []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Parameters for the 'make' command?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your choice:  []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Parameters for the 'make install'
command?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your choice:  []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Timeout for inactivity during
Makefile.PL? [0]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your ftp_proxy?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your http_proxy?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your no_proxy?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Select your continent (or several
nearby continents) []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; 5</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Select your country (or several
nearby countries) []</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; 3</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Select as many URLs as you like,</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">put them on one line, separated by
blanks [] </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; 3 5 7 11 13</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Enter another URL or RETURN to quit:
[]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">Your favorite WAIT server?</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace"><font size="2">[wait:</font><a href="http://www.greglondon.com/Telos"><font size="2">//ls6-www.informatik.uni-dortmund.de</font></a><font size="2">:1404]</font></font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt;</font></p>
<p class="text-body-preceding-code-block-western">That last line is
actually the cpan shell prompt. The next time you run cpan, it will
go directly to the cpan shell prompt. The first thing you will
probably want to do is make sure you have the latest and greatest
cpan.pm module with all the trimmings. At the cpan shell prompt, type
the following command:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">cpan&gt; install Bundle::CPAN</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt; reload cpan</font></p>
<p class="text-body-preceding-code-block-western">You should then be
able to install any perl module with a single command. If cpan
encounters any problems, it will not install the module. If you wish
to force the install,  then use the "force" command.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt; force install Tk</font></p>
<p class="western">Or you can get the tarball from <a href="http://www.cpan.org/">www.cpan.org</a>
and install it manually.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="15.3.Plain Old Documentation (POD) and perldoc|outline"></a>
15.3 Plain Old Documentation (POD) and perldoc</h2>
<p class="text-body-preceding-code-block-western">Modules on CPAN are
generally documented with POD. POD embeds documentation directly into
the perl code. You do not need to know POD to write perl code. But
you will want to know how to read POD from all the modules you
download from CPAN. Perl comes with a builtin utility called
"perldoc" which allows you to look up perl documentation in
POD format.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perldoc perldoc</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perldoc NEXT</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; perldoc Data::Dumper</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="15.4.Creating Modules for CPAN with h2xs|outline"></a>
15.4 Creating Modules for CPAN with h2xs</h2>
<p class="text-body-preceding-code-block-western">If you wish to
create a module that you intend to upload to CPAN, perl comes with a
utility "h2xs" which, among other things, will create a
minimal set of all the files needed. This first command will create a
directory called "Animal" and populate it with all the
files you need. The remainder of the commands show you what steps you
need to take to create a .tar.gz tarball that can be uploaded to CPAN
and downloaded by others using the cpan.pm module.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; h2xs -X -n Animal	# create the
structure</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cd Animal/lib		# go into module
dir</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; edit Animal.pm		# edit module</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cd ../t		# go into test dir</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; edit Animal.t		# edit test</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; cd ..			# go to make directory</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; perl Makefile.PL	# create make
file</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; make			# run make</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; make test		# run the test in t/</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; make dist		# create a .tar.gz
file </font>
</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="16.The Next Level|outline"></a>
16 The Next Level</h1>
<p class="western">You now know the fundamentals of procedural perl
and object oriented perl. From this point forward, any new topics may
include a discussion of a perl builtin feature or something available
from CPAN. Some of perl's builtin features are somewhat limited and a
CPAN module greatly enhances and/or simplifies its usage.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="17.Command Line Arguments|outline"></a>
17 Command Line Arguments</h1>
<p class="text-body-preceding-code-block-western">Scripts are often
controlled by the arguments passed into it via the command line when
the script is executed. Arguments might be a switch, such as "-h"
to get help.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; myscript.pl -h</font></p>
<p class="text-body-preceding-code-block-western">A "-v"
switch might turn verboseness on.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; anotherscript.pl -v</font></p>
<p class="text-body-preceding-code-block-western">Switches might by
followed by an argument associated with the switch. A "-in"
switch might be followed by a filename to be used as input.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; thatscript.pl -in data.txt</font></p>
<p class="text-body-preceding-code-block-western">An argument could
indicate to stop processing the remaining arguments and to process
them at a later point in the script. The "--" argument
could be used to indicate that arguments before it are to be used as
perl arguments and that arguments after it are to be passed directly
to a compiler program that the script will call.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; mytest.pl -in test42.txt --
+define+FAST</font></p>
<p class="western">More advanced arguments:</p>
<p class="western">Single character switches can be lumped together.
Instead of "-x -y -z", you could say 
</p>
<p class="western">"-xyz".</p>
<p class="text-body-preceding-code-block-western">Options can be
stored in a separate file. A file might contain a number of options
always needed to do a standard function, and using "-f
optionfile.txt" would be easier than putting those options on
the command line each and every time that function is needed. This
would allow a user to use the option file and then add other options
on the command line.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; thisscript.pl -f optionfile.txt
-v</font></p>
<p class="western">Options can have full and abreviated versions to
activate the same option. 
</p>
<p class="western">The option "-verbose" can also work as
"-v".</p>
<p class="text-body-preceding-code-block-western">Options operate
independent of spacing. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">-f=options.txt</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">-f = options.txt</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="17.1.@ARGV|outline"></a>
17.1 @ARGV</h2>
<p class="text-body-preceding-code-block-western">Perl provides
access to all the command line arguments via a global array @ARGV.
The text on the command line is broken up anywhere whitespace occurs,
except for quoted strings. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/bin/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@ARGV;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; script.pl -v -f options.txt
"hello world"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          '-v',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          '-f',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'options.txt',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;          'hello world'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p class="text-body-preceding-code-block-western">If you need to pass
in a wild-card such as *.txt then you will need to put it in quotes
or your operating system will replace it with a list of files that
match the wildcard pattern.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#!/usr/bin/env perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">###filename:script.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use warnings; use strict; use
Data::Dumper;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print Dumper \@ARGV;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ./test.pl *.pl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'script.pl',</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           'test.pl'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; ./test.pl "*.pl"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; $VAR1 = [</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;           '*.pl'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;         ];</font></p>
<p class="text-body-preceding-code-block-western">Simple processing
of @ARGV would shift off the bottom argument, process it, and move on
to the next argument. The following example will handle simple
command line arguments described above.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># create a package variable for each
option</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $fn;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $debug=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># create subroutines for options that
do things</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub print_help </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">{ print "-d for debug\n-f
for filename\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># get the first/next argument and
process it.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(scalar(@ARGV))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $arg=shift(@ARGV);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   if($arg eq '-h') {print_help;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	elsif($arg eq '-f') {$fn =
shift(@ARGV);}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	elsif($arg eq '-d') {$debug=1;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	else { die "unknown argument
'$arg'";  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	}</font></p>
<p class="western">Package (our) variables are used instead of
lexical (my) variables because command line arguments should be
considered global and package variables are accessible everywhere. If
you wrote a script that used "-d" to turn on debug
information, you would want this to turn on debugging in any separate
modules that you write, not just your script.pl script. Package
"main" is the default package and a good place to put
command line argument related variables. Outside of package main,
code would check for $main::debug being true or false.</p>
<p class="western">If you need to handle a few simple command line
arguments in your script, then the above example of processing @ARGV
one at a time is probably sufficient. If you need to support more
advanced command line arguments, or a lot of simple ones, you should
look at Getopt::Declare.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="17.2.Getopt::Declare|outline"></a>
17.2 Getopt::Declare</h2>
<p class="text-body-preceding-code-block-western">The Getopt::Declare
module allows for an easy way to define more complicated command line
arguments. The above example with -h,-f, and -d options could be
written using Getopt::Declare like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Getopt::Declare;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $fn='';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $debug=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $args = Getopt::Declare-&gt;new( q
(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-in &lt;filename&gt;	Define input
file </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {$main::fn=$filename;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-d		Turn debugging On </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {$main::debug=1;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	&lt;unknown&gt;	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   { die "unknown arg
'$unknown'\n"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">));</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "Debug is '$debug'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print "fn is '$fn'\n";</font></p>
<p class="text-body-preceding-code-block-western">The text passed
into Getopt::Declare is a multi-line quoted q() string. This string
defines the arguments that are acceptable. Notice that -h is not
defined in the string. This is because Getopt::Declare recognizes -h
to print out help based on the declaration.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; script.pl -h</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;Options:</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;        -in &lt;filename&gt; 
Define input file</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;        -d              Turn
debugging On</font></p>
<p class="western">The argument declaration and the argument
description is separated by one or more tabs in the string passed
into Getopt::Declare.</p>
<p class="western">The &lt;unknown&gt; marker is used to define what
action to take with unknown arguments, arguments that are not defined
in the declaration.</p>
<p class="western">The text within the curly braces
{$main::fn=$filename;} is treated as executable code and evaled if
the declared argument is encountered on the command line. Note that
within the curly braces, the global variables $fn and $debug are used
with their full package name. Also, not that the starting curly brace
must begin on its own line separate from the argument declaration and
description.</p>
<p class="western">Getopt::Declare recognizes -v as a version command
line argument. If -v is on the command line, it will print out the
version of the file based on $main::VERSION (if it exists) and the
date the file was saved.</p>
<p class="western">If [undocumented] is contained anywhere in the
command line argument description, then that argument will not be
listed in the help text, but will still be recognized if placed on
the command line (secret arguments)</p>
<p class="western">A [ditto] flag in the description will use the
same text description as the argument just before it, and any action
associated with it.</p>
<p class="western">A short and long version of the same argument can
be listed by placing the optional second half in square brackets:
-verb[ose] This will recognise -verb and -verbose as the same
argument.</p>
<p class="western">Normally, a declared argument will only be allowed
to occur on the command line once. If the argument can occur more
than once, place [repeatable] in the description.</p>
<p class="western">Inside the curly braces, calling finish() with a
true value will cause the command line arguments to stop being
processed at that point.</p>
<h3 class="western"><a name="17.2.1.Getopt::Declare Sophisticated Example|outline"></a>
17.2.1 Getopt::Declare Sophisticated Example</h3>
<p class="western">The example on the next page shows Getopt::Declare
being used more to its potential.</p>
<ol>
	<li><p class="western">Filenames to be handled by the script can be
	listed on the command line without any argument prefix</p>
	</li><li><p class="western">Verbosity can be turned on with -verbose. It
	can be turned off with -quiet. 
	</p>
	</li><li><p class="western">An undocumented -Dump option turns on
	dumping.</p>
	</li><li><p class="western">Any options after a double dash (--) are left
	in @ARGV for later processing.</p>
	</li><li><p class="western">Additional arguments can be placed in an
	external file and loaded with -args filename. The Error() subroutine
	will report the name of the file containing any error while
	processing the arguments. Argument files can refer to other argument
	files, allowing nested argument files.</p>
	</li><li><p class="western">Any arguments that are not defined will
	generate an error.</p>
</li></ol>
<p class="western"><br><br>
</p>
<p class="western"><br><br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># advanced command line argument
processing</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Getopt::Declare;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $arg_file='Command Line';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $VERSION=1.01;	# -v will use this</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our @files;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $debug=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $verbose=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $dump=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Verbose {if($verbose){print
$_[0];}}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub Error {die"Error: ".($_[0]).</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	" from '$arg_file'\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $grammar = q(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-args &lt;input&gt;	Arg file
[repeatable]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	<font face="Courier, monospace">unless(-e
$input)</font></font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  {main::Error("no file
'$input'");}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	main::Verbose("Parsing
'$input'\n");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  {</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  local($main::arg_file);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  $main::arg_file = $input;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  $main::myparser-&gt;parse([$input]);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	main::Verbose</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  ("finished parsing
'$input'\n");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	main::Verbose </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  ("returning to
'$main::arg_file'\n");</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-d		Turn debugging On </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{$main::debug=1;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-verb[ose]	Turn verbose On</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{$main::verbose=1;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-quiet	Turn verbose Off</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{$main::verbose=0;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	--Dump		[undocumented] Dump on</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{$main::dump=1;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-h		Print Help</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{$main::myparser-&gt;usage;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	--		Argument separator</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{finish(1);}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	&lt;unknown&gt;	Filename
[repeatable]</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if($unknown!~m{^[-+]})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  {push(@main::files,$unknown);}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	else</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	  {main::Error("unknown arg
'$unknown'");}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">our $myparser = new Getopt::Declare </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	($grammar,['-BUILD']);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$myparser-&gt;parse();</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="18.File Input and Output|outline"></a>
18 File Input and Output</h1>
<p class="western">Perl has a number of functions used for reading
from and writing to files. All file IO revolves around file handles. 
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.1.open|outline"></a>
18.1 open</h2>
<p class="text-body-preceding-code-block-western">To generate a
filehandle and attach it to a specific file, use the open() function.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open(my $filehandle, 'filename.txt') </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	or die "Could not open file";</font></p>
<p class="western">If the first argument to open() is an undefined
scalar, perl will create a filehandle and assign it to that scalar.
This is available in perl version 5.6 and later and is the preferred
method for dealing with filehandles.</p>
<p class="text-body-preceding-code-block-western">The second argument
to open() is the name of the file and an optional flag that indicates
to open the file as read, write, or append. The filename is a simple
string, and the flag, if present, is the first character of the
string. The valid flags are defined as follows:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"><font face="Courier, monospace">'&lt;'</font>	Read.
Do not create. </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	Do not clobber existing file.
DEFAULT.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"><font face="Courier, monospace">'&gt;'</font>	Write.
Create if non-existing. </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	Clobber if already exists.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"><font face="Courier, monospace">'&gt;&gt;'</font>	Append.
Create if non-existing. </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	Do not clobber existing file.</font></p>
<p class="western">If no flag is specified, the file defaults to
being opened for read.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.2.close|outline"></a>
18.2 close</h2>
<p class="text-body-preceding-code-block-western">Once open, you can
close a filehandle by calling the close function and passing it the
filehandle.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close($filehandle) or die "Could
not close";</font></p>
<p class="western">If the filehandle is stored in a scalar, and the
scalar goes out of scope or is assigned undef, then perl will
automatically close the filehandle for you.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.3.read|outline"></a>
18.3 read</h2>
<p class="western">Once open, you can read from a filehandle a number
of ways. The most common is to read the filehandle a line at a time
using the "angle" operator. The angle operator is the
filehandle surrounded by angle brackets. i.e.   <font face="Courier, monospace">&lt;$filehandle&gt;
</font>When used as the boolean conditional controlling a while()
loop, the loop reads the filehandle a line at a time until the end of
file is reached. Each pass through the conditional test reads the
next line from the file and places it in the <font face="Courier, monospace">$_</font>
variable.</p>
<p class="text-body-preceding-code-block-western">This script shows a
cat -n style function.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open (my $fh, 'input.txt') or die
"could not open";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $num=0;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(&lt;$fh&gt;)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$num++;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $line = $_;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	chomp($line);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "$num: $line\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	}</font></p>
<p class="western">The above example is useful if every line of the
file contains the same kind of information, and you are just going
through each line and parsing it.</p>
<p class="text-body-preceding-code-block-western">Another way to read
from a filehandle is to assign the angle operator of the filehandle
to a scalar. This will read the next line from the filehandle. But it
requires that you test the return value to make sure it is defined,
otherwise you hit the end of file.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">defined(my $line = &lt;$fh&gt;) or
die "premature eof";</font></p>
<p class="text-body-preceding-code-block-western">To make a little
more useful, you can wrap it up in a subroutine to hide the error
checking. You can then call the subroutine each time you want a line.
This is useful if you are reading a file where every line has a
different meaning, and you need to read it in a certain order.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Carp;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open (my $fh, 'input.txt');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub nlin </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">defined(my $line = &lt;$fh&gt;) or
croak "premature eof";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">chomp($line);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">return $line;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $name=nlin;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $addr=nlin;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $age =nlin;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">print "Name: $name, address:
$addr, age: $age\n";</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.4.write|outline"></a>
18.4 write</h2>
<p class="text-body-preceding-code-block-western">If the file is
opened for write or append, you can write to the filehandle using the
print function.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">open (my $fh, '&gt;output.txt');</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $fh "once\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $fh "upon\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $fh "a time\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">close $fh;</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.5.File Tests|outline"></a>
18.5 File Tests</h2>
<p class="text-body-preceding-code-block-western">Perl can perform
tests on a file to glean information about the file. All tests return
a true (1) or false ("") value about the file. All the
tests have the following syntax:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">-x FILE</font></p>
<p class="western">The "x" is a single character indicating
the test to perform. FILE is a filename (string) or filehandle.</p>
<p class="text-body-preceding-code-block-western">Some common tests
include:</p>
<ul>
	<li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-e	file
	exists</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-f	file
	is a plain file</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-d	file
	is a directory</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-l	file
	is a symbolic link</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-r	file
	is readable</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-w	file
	is writable</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-z	file
	size is zero</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-p	file
	is a named pipe</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">-S	file
	is a socket</font></p>
	</li><li><p style="margin-bottom: 0.14in; page-break-after: auto;"><font face="Courier, monospace">-T	file
	is a text file (perl's definition)</font></p>
</li></ul>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.6.File Globbing|outline"></a>
18.6 File Globbing</h2>
<p class="text-body-preceding-code-block-western">The glob() function
takes a string expression and returns a list of files that match that
expression using shell style filename expansion and translation.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @files = glob ( STRING_EXPRESSION
);</font></p>
<p class="text-body-preceding-code-block-western">For example, if you
wish to get a list of all the files that end with a .txt expression:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my @textfiles = glob ("*.txt");</font></p>
<p class="text-body-preceding-code-block-western">This is also useful
to translate Linux style "~" home directories to a usable
file path. The "~" in Linux is a shell feature that is
translated to the user's real directory path under the hood. Perl's
open() function cannot open "~/list.txt" because "~"
only means something to the shell. To translate to a real directory
path, use glob().</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $startup_file = glob('~/.cshrc');</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="18.7.File Tree Searching|outline"></a>
18.7 File Tree Searching</h2>
<p class="text-body-preceding-code-block-western">For sophisticated
searching, including searches down an entire directory structure, use
the <a href="http://www.greglondon.com/Find">File::Find</a> module. It is
included in perl 5.6.1.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use File::Find;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $pwd=`pwd`; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">chomp($pwd);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">find(\&amp;process,$pwd);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">sub process { ... }</font></p>
<p class="western">The process() subroutine is a subroutine that you
define. The process() subroutine will be called on every file and
directory in $pwd and recursively into every subdirectory and file
below.</p>
<p class="western">The package variable <font face="Courier, monospace">$File::Find::name</font>
contains the name of the current file or directory. Your process()
subroutine can read this variable and perform whatever testing it
wants on the fullname. If you process() was called on a file and not
just a directory, the path to the file is available in
<font face="Courier, monospace">$File::Find::dir</font> and the name
of the file is in <font face="Courier, monospace">$_</font>.</p>
<p class="western">If your process() subroutine sets the package
variable <font face="Courier, monospace">$File::Find::prune</font> to
1, then find() will not recurse any further into the current
directory.</p>
<p class="text-body-preceding-code-block-western">This process()
subroutine prints out all .txt files encountered and it avoids
entering any CVS directories.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">sub process</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $fullname = $File::Find::name;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if ($fullname =~ m{\.txt$})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {print "found text file
$fullname\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if((-d $fullname) and
($fullname=~m{CVS}))</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	   {$File::Find::prune=1; return;}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">}</font></p>
<p class="western">For more information:  perldoc <a href="http://www.greglondon.com/Find">File::Find</a></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="19.Operating System Commands|outline"></a>
19 Operating System Commands</h1>
<p class="text-body-preceding-code-block-western">Two ways to issue
operating system commands within your perl script are the system
function and the backtick operator.</p>
<ol>
	<li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">system("command
	string"); </font>
	</p>
	</li><li><p style="margin-bottom: 0.14in; page-break-after: auto;"><font face="Courier, monospace">`command
	string`;</font></p>
</li></ol>
<h2 class="western" style="page-break-inside: avoid;"><a name="19.1.The system() function|outline"></a>
19.1 The system() function</h2>
<p class="text-body-preceding-code-block-western">If you want to
execute some command and you do not care what the output looks like,
you just want to know if it worked, then you will likely want to use
the system() function. The system() function executes the command
string in a shell and returns you the return code of the command. In
Linux, a return value of ZERO is usually good, a non-zero indicates
some sort of error. So to use the system() function and check the
return value, you might do something like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $cmd = "rm -f junk.txt";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">system($cmd)==0 or die "Error:
could not '$cmd'";</font></p>
<p class="western">When you execute a command via the system()
function, the output of the command goes to STDOUT, which means the
user will see the output scroll by on the screen, and then it is lost
forever.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="19.2.The Backtick Operator|outline"></a>
19.2 The Backtick Operator</h2>
<p class="text-body-preceding-code-block-western">If you want to
capture the STDOUT of a operating system command, then you will want
to use the backtick operator. A simple example is the "finger"
command on Linux. If you type:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">linux&gt; finger username</font></p>
<p class="text-body-preceding-code-block-western">Linux will dump a
bunch of text to STDOUT. If you call system() on the finger command,
all this text will go to STDOUT and will be seen by the user when
they execute your script. If you want to capture what goes to STDOUT
and manipulate it within your script, use the backtick operator. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $string_results = `finger
username`;</font></p>
<p class="western">The $string_results variable will contain all the
text that would have gone to STDOUT. You can then process this in
your perl script like any other string.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="19.3.Operating System Commands in a GUI|outline"></a>
19.3 Operating System Commands in a GUI</h2>
<p class="western">If your perl script is generating a GUI using the
Tk package, there is a third way to run system commands within your
perl script, using the Tk::ExecuteCommand module. This is a very cool
module that allows you to run system commands in the background as a
separate process from your main perl script. The module provides the
user with a "Go/Cancel" button and allows the user to
cancel the command in the middle of execution if it is taking too
long.</p>
<p class="western">We have not covered the GUI toolkit for perl (Tk),
but if you are doing system commands in perl and you are using Tk,
you should look into Tk::ExecuteCommand.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="20.Regular Expressions|outline"></a>
20 Regular Expressions</h1>
<p class="western">Regular expressions are the text processing
workhorse of perl. With regular expressions, you can search strings
for patterns, find out what matched the patterns, and substitute the
matched patterns with new strings. 
</p>
<p class="text-body-preceding-code-block-western">There are three
different regular expression operators in perl:</p>
<ol>
	<li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">match		m{PATTERN}</font></p>
	</li><li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">substitute	s{OLDPATTERN}{NEWPATTERN}</font></p>
	</li><li><p style="margin-bottom: 0.14in; page-break-after: auto;"><font face="Courier, monospace">transliterate	tr{OLD_CHAR_SET}{NEW_CHAR_SET}</font></p>
</li></ol>
<p class="western">Perl allows any delimiter in these operators, such
as {} or () or // or ## or just about any character you wish to use.
The most common delimiter used is probably the m// and s///
delimiters, but I prefer to use m{} and s{}{} because they are
clearer for me.</p>
<p class="text-body-preceding-code-block-western">There are two ways
to "bind" these operators to a string expression:</p>
<ol>
	<li><p style="margin-bottom: 0in; page-break-after: avoid;"><font face="Courier, monospace">=~	pattern
	does match string expression</font></p>
	</li><li><p style="margin-bottom: 0.14in; page-break-after: auto;"><font face="Courier, monospace">!~	pattern
	does NOT match string expression</font></p>
</li></ol>
<p class="text-body-preceding-code-block-western">Binding can be
thought of as "Object Oriented Programming" for regular
expressions. Generic OOP structure can be represented as</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$subject -&gt; verb ( adjectives,
adverbs, etc );</font></p>
<p class="text-body-preceding-code-block-western">Binding in Regular
Expressions can be looked at in a similar fashion:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$string =~ verb ( pattern );</font></p>
<p class="western">where "verb" is limited to 'm' for
match, 's' for substitution, and 'tr' for translate.</p>
<p class="text-body-preceding-code-block-western">You may see perl
code that simply looks like this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">/patt/;</font></p>
<p class="western">This is functionally equivalent to this:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$_ =~ m/patt/;</font></p>
<p class="text-body-preceding-code-block-western">Here are some
examples:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># spam filter</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $email = "This is a great
Free Offer\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($email =~ m{Free Offer})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ $email="*deleted spam*\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "$email\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># upgrade my car</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $car = "my car is a
toyota\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$car =~ s{toyota}{jaguar};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "$car\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># simple encryption, Caesar cypher</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $love_letter = "How I love
thee.\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$love_letter =~
tr{A-Za-z}{N-ZA-Mn-za-m};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "encrypted: $love_letter";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$love_letter =~
tr{A-Za-z}{N-ZA-Mn-za-m};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "decrypted:
$love_letter\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; *deleted spam*</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; my car is a jaguar</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; encrypted: Ubj V ybir gurr.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; decrypted: How I love thee.</font></p>
<p class="western">The above examples all look for fixed patterns
within the string. Regular expressions also allow you to look for
patterns with different types of "wildcards". 
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.1.Variable Interpolation|outline"></a>
20.1 Variable Interpolation</h2>
<p class="text-body-preceding-code-block-western">The braces that
surround the pattern act as double-quote marks, subjecting the
pattern to one pass of variable interpolation as if the pattern were
contained in double-quotes. This allows the pattern to be contained
within variables and interpolated during the regular expression.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $actual = "Toyota";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $wanted = "Jaguar";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $car = "My car is a
Toyota\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$car =~ s{$actual}{$wanted};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print $car;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; My car is a Jaguar</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.2.Wildcard Example|outline"></a>
20.2 Wildcard Example</h2>
<p class="text-body-preceding-code-block-western">In the example
below, we process an array of lines, each containing the pattern
{filename: } followed by one or more non-whitespace characters
forming the actual filename. Each line also contains the pattern
{size: } followed by one or more digits that indicate the actual size
of that file.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my @lines = split "\n",
&lt;&lt;"MARKER" </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">filename: output.txt size: 1024</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">filename: input.dat size: 512</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">filename: address.db size: 1048576</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">MARKER</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">foreach my $line (@lines)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	####################################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# \S is a wildcard meaning </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# "anything that is not
white-space".</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	# the "+" means "one
or more"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	####################################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	if($line =~ m{filename: (\S+)})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		my $name = $1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		###########################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		# \d is a wildcard meaning </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		# "any digit, 0-9".</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		###########################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		$line =~ m{size: (\d+)};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		my $size = $1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		print "$name,$size\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; output.txt,1024</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; input.dat,512</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; address.db,1048576</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.3.Defining a Pattern|outline"></a>
20.3 Defining a Pattern</h2>
<p class="western">A pattern can be a literal pattern such as <font face="Courier, monospace">{Free
Offer}. </font>It can contain wildcards such as <font face="Courier, monospace">{\d}</font>.
It can also contain metacharacters such as the parenthesis. Notice in
the above example, the parenthesis were in the pattern but did not
occur in the string, yet the pattern matched. 
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.4.Metacharacters|outline"></a>
20.4 Metacharacters</h2>
<p class="text-body-preceding-code-block-western">Metacharacters do
not get interpreted as literal characters. Instead they tell perl to
interpret the metacharacter (and sometimes the characters around
metacharacter) in a different way. The following are metacharacters
in perl regular expression patterns:</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">\ | ( ) [ ] { } ^ $ * + ? .</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
 
</p>
	<dl>
		<dd>
		<table style="page-break-after: avoid; page-break-inside: avoid; border: black solid thin;" cellpadding="4" cellspacing="0" width="528">
			<col width="51">
			<col width="459">
			<tbody><tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">\</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(backslash)
					if next character combined with this backslash forms a character
					class shortcut, then match that character class. If not a
					shortcut, then simply treat next character as a
					non-metacharacter.</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">|</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">alternation:
					 (patt1  |  patt2)    means    (patt1  OR  patt2)</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">( )</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">grouping
					(clustering) and capturing 
					</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">(?: )</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">grouping
					(clustering) only. no capturing. (somewhat faster)</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">.</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">match any
					single character (usually not "\n")</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">[ ]</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">define a
					character class, match any single character in class</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">*</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(quantifier):
					match previous item zero or more times</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">+</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(quantifier):
					match previous item one or more times</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">?</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(quantifier):
					match previous item zero or one time</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">{ }</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(quantifier):
					match previous item a number of times in given range</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">^</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(position
					marker): beginning of string (or possibly after "\n")</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="51">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					<font face="Courier, monospace">$</font></p>
				</td>
				<td width="459">
					<p class="western" style="page-break-inside: avoid;">(position
					marker): end of string (or possibly before "\n")</p>
				</td>
			</tr>
		</tbody></table>
	</dd></dl>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Examples below.
Change the value assigned to $str and re-run the script. Experiment
with what matches and what does not match the different regular
expression patterns.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = "Dear sir, hello and
goodday! "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">." dogs and cats and sssnakes
put me to sleep."</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">." zzzz. Hummingbirds are
ffffast. "</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">." Sincerely, John";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># | alternation</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match "hello" or
"goodbye"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{hello|goodbye}){warn
"alt";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># () grouping and capturing</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'goodday' or 'goodbye'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{(good(day|bye))})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{warn "group matched, captured
'$1'";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># . any single character</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'cat' 'cbt' 'cct' 'c%t' 'c+t'
'c?t' ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{c.t}){warn "period";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># [] define a character class: 'a' or
'o' or 'u'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'cat' 'cot' 'cut'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{c[aou]t}){warn "class";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># * quantifier, match previous item
zero or more</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match '' or 'z' or 'zz' or 'zzz' or
'zzzzzzzz'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{z*}){warn "asterisk";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># + quantifier, match previous item
one or more</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'snake' 'ssnake'
'sssssssnake' </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{s+nake}){warn "plus
sign";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># ? quantifier, previous item is
optional</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match only 'dog' and 'dogs'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{dogs?}){warn
"question";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># {} quantifier, match previous, 3 &lt;=
qty &lt;= 5</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match only 'fffast', 'ffffast', and
'fffffast'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{f{3,5}ast}){warn "curly
brace";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># ^ position marker, matches
beginning of string</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'Dear' only if it occurs at
start of string</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{^Dear}){warn "caret";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># $ position marker, matches end of
string</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># match 'John' only if it occurs at
end of string</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{John$}){warn "dollar";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; alt at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; group matched, captured
'goodday' at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; period at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; class at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; asterisk at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; plus sign at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; question at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; curly brace at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; caret at ...</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; dollar at ...</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.5.Capturing and Clustering Parenthesis|outline"></a>
20.5 Capturing and Clustering Parenthesis</h2>
<p class="western">Normal parentheses will both cluster and capture
the pattern they contain. Clustering affects the order of evaluation
similar to the way parentheses affect the order of evaluation within
a mathematical expression. Normally, multiplication has a higher
precedence than addition. The expression "2 + 3 * 4" does
the multiplication first and then the addition, yielding the result
of "14". The expression "(2 + 3) * 4" forces the
addition to occur first, yielding the result of "20".</p>
<p class="western">Clustering parentheses work in the same fashion.
The pattern {cats?} will apply the "?" quantifier to the
letter "s", matching either "cat" or "cats".
The pattern {(cats)?} will apply the "?" quantifier to the
entire pattern within the parentheses, matching "cats" or
null string.</p>
<h3 class="western"><a name="20.5.1.$1, $2, $3, etc Capturing parentheses|outline"></a>
20.5.1 $1, $2, $3, etc Capturing parentheses</h3>
<p class="text-body-preceding-code-block-western">Clustering
parentheses will also Capture the part of the string that matched the
pattern within parentheses. The captured values are accessible
through some "magical" variables called $1, $2, $3, ...
Each left parenthesis increments the number used to access the
captured string. The left parenthesis are counted from left to right
as they occur within the pattern, starting at 1.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $test="Firstname: John
Lastname: Smith";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">############################################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#                   $1             
$2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$test=~m{Firstname: (\w+) Lastname:
(\w+)};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $first = $1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $last  = $2;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "Hello, $first $last\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Hello, John Smith</font></p>
<p class="text-body-preceding-code-block-western">Because capturing
takes a little extra time to store the captured result into the $1,
$2, ... variables, sometimes you just want to cluster without the
overhead of capturing. In the below example, we want to cluster
"day|bye" so that the alternation symbol "|" will
go with "day" or "bye". Without the clustering
parenthesis, the pattern would match "goodday" or "bye",
rather than "goodday" or "goodbye". The pattern
contains capturing parens around the entire pattern, so we do not
need to capture the "day|bye" part of the pattern,
therefore we use cluster-only parentheses.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str =~ m{(good(?:day|bye))})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">	{warn "group matched, captured
'$1'";}</font></p>
<p class="text-body-preceding-code-block-western">Cluster-only
parenthesis don't capture the enclosed pattern, and they don't count
when determining which magic variable, $1, $2, $3 ..., will contain
the values from the capturing parentheses.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $test = 'goodday John';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">##########################################</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">#             $1                $2</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($test =~ m{(good(?:day|bye))
(\w+)})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "You said $1 to $2\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; You said goodday to John</font></p>
<h3 class="western"><a name="20.5.2.Capturing parentheses not capturing|outline"></a>
20.5.2 Capturing parentheses not capturing</h3>
<p class="western">If a regular expression containing capturing
parentheses does not match the string, the magic variables $1, $2,
$3, etc will retain whatever PREVIOUS value they had from any
PREVIOUS regular expression. This means that you MUST check to make
sure the regular expression matches BEFORE you use the $1, $2, $3,
etc variables.</p>
<p class="western">In the example below, the second regular
expression does not match, therefore $1 retains its old value of
'be'. Instead of printing out something like "Name is Horatio"
or "Name is" and failing on an undefined value, perl
instead keeps the old value for $1 and prints "Name is 'be'",
instead.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string1 = 'To be, or not to be';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">$string1 =~ m{not to (\w+)}; #
matches, $1='be'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "The question is to $1";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string2 = 'that is the question';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
   <font face="Courier, monospace">$string2 =~ m{I knew him once,
(\w+)}; # no match</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">warn "Name is '$1'"; </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace"># no match, so $1 retains its old
value 'be'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; The question is to be at
./script.pl line 7.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Name is 'be' at ./script.pl line
11.</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.6.Character Classes|outline"></a>
20.6 Character Classes</h2>
<p class="text-body-preceding-code-block-western">The "."
metacharacter will match any single character. This is equivalent to
a character class that includes every possible character. You can
easily define smaller character classes of your own using the square
brackets []. Whatever characters are listed within the square
brackets are part of that character class. Perl will then match any
one character within that class.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">[aeiouAEIOU]	any vowel</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">[0123456789]	any digit</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.6.1.Metacharacters Within Character Classes|outline"></a>
20.6.1 Metacharacters Within Character Classes</h3>
<p class="western">Within the square brackets used to define a
character class, all previously defined metacharacters cease to act
as metacharacters and are interpreted as simple literal characters. 
</p>
<p class="text-body-preceding-code-block-western">Characters classes
have their own special metacharacters.</p>
<div align="RIGHT">
	<table style="page-break-before: auto; page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="527">
		<col width="71">
		<col width="438">
		<tbody><tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\</p>
			</td>
			<td width="438">
				<p class="western" style="page-break-inside: avoid;">(backslash)
				demeta the next character</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">-</p>
			</td>
			<td width="438">
				<p class="western" style="page-break-inside: avoid;">(hyphen)
				Indicates a consecutive character range, inclusively.</p>
				<p class="western" style="page-break-inside: avoid;">[a-f]
				indicates the letters a,b,c,d,e,f.</p>
				<p class="western" style="page-break-inside: avoid; page-break-after: avoid;">
				Character ranges are based off of ASCII numeric values.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">^</p>
			</td>
			<td width="438">
				<p class="western" style="page-break-inside: avoid;">If it is the
				first character of the class, then this indicates the class is
				any character EXCEPT the ones in the square brackets.</p>
				<p class="western" style="page-break-inside: avoid;">Warning:
				[^aeiou] means anything but a lower case vowel. This is not the
				same as "any consonant". The class [^aeiou] will match
				punctuation, numbers, and unicode characters.</p>
			</td>
		</tr>
	</tbody></table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.7.Shortcut Character Classes|outline"></a>
20.7 Shortcut Character Classes</h2>
<p class="text-body-preceding-code-block-western">Perl has shortcut
character classes for some more common classes.</p>
<div align="RIGHT">
	<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="526">
		<col width="71">
		<col width="132">
		<col width="298">
		<tbody><tr valign="TOP">
			<th width="71">
				<p class="western" style="page-break-inside: avoid;">shortcut</p>
			</th>
			<th width="132">
				<p class="western" style="page-break-inside: avoid;">class</p>
			</th>
			<th width="298">
				<p class="western" style="page-break-inside: avoid;">description</p>
			</th>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\d</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[0-9]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any <b><font size="4">d</font></b>igit</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\D</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[^0-9]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any NON-digit</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\s</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[
				\t\n\r\f]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any
				white<b><font size="4">s</font></b>pace</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\S</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[^
				\t\n\r\f]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any
				NON-whitespace</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\w</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[a-zA-Z0-9_]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any <b><font size="4">w</font></b>ord
				character (valid perl identifier)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="71">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\W</p>
			</td>
			<td width="132">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">[^a-zA-Z0-9_]</p>
			</td>
			<td width="298">
				<p class="western" style="page-break-inside: avoid;">any NON-word
				character</p>
			</td>
		</tr>
	</tbody></table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.8.Greedy (Maximal) Quantifiers|outline"></a>
20.8 Greedy (Maximal) Quantifiers</h2>
<p class="text-body-preceding-code-block-western">Quantifiers are
used within regular expressions to indicate how many times the
previous item occurs within the pattern. By default, quantifiers are
"greedy" or "maximal", meaning that they will
match as many characters as possible and still be true.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: avoid;">
<br>
</p>
<div align="RIGHT">
	<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="526">
		<col width="110">
		<col width="398">
		<tbody><tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">*</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match zero or
				more times (match as much as possible)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">+</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match one or
				more times (match as much as possible)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">?</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match zero or
				one times (match as much as possible)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">{count}</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match exactly
				"count" times</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">{min,
				}</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match at
				least "min" times (match as much as possible)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">{min,max}</p>
			</td>
			<td width="398">
				<p class="western" style="page-break-inside: avoid;">match at
				least "min" and at most "max" times</p>
				<p class="western" style="page-break-inside: avoid;">(match as
				much as possible)</p>
			</td>
		</tr>
	</tbody></table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.9.Thrifty (Minimal) Quantifiers|outline"></a>
20.9 Thrifty (Minimal) Quantifiers</h2>
<p class="text-body-preceding-code-block-western">Placing a "?"
after a quantifier disables greedyness, making them "non-greedy",
"thrifty", or "minimal" quantifiers. Minimal
quantifiers match as few characters as possible and still be true.</p>
<div align="RIGHT">
	<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="525">
		<col width="110">
		<col width="397">
		<tbody><tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">*?</p>
			</td>
			<td width="397">
				<p class="western" style="page-break-inside: avoid;">match zero or
				more times 
				</p>
				<p class="western" style="page-break-inside: avoid;">(match as
				little as possible and still be true)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">+?</p>
			</td>
			<td width="397">
				<p class="western" style="page-break-inside: avoid;">match one or
				more times 
				</p>
				<p class="western" style="page-break-inside: avoid;">(match as
				little as possible and still be true)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">{min,}?</p>
			</td>
			<td width="397">
				<p class="western" style="page-break-inside: avoid;">match at
				least min times</p>
				<p class="western" style="page-break-inside: avoid;">(match as
				little as possible and still be true)</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="110">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">{min,
				max}?</p>
			</td>
			<td width="397">
				<p class="western" style="page-break-inside: avoid;">match at
				least "min" and at most "max" times</p>
				<p class="western" style="page-break-inside: avoid;">(match as
				little as possible and still be true)</p>
			</td>
		</tr>
	</tbody></table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">This example shows
the difference between minimal and maximal quantifiers.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = "12340000";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($string =~ m{^(\d+)0+$})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "greedy '$1'\n"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($string =~ m{^(\d+?)0+$})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "thrifty '$1'\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; greedy '1234000'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; thrifty '1234'</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.10.Position Assertions / Position Anchors|outline"></a>
20.10 Position Assertions / Position Anchors</h2>
<p class="text-body-preceding-code-block-western">Inside a regular
expression pattern, some symbols do not translate into a character or
character class. Instead, they translate into a "position"
within the string. If a position anchor occurs within a pattern, the
pattern before and after that anchor must occur within a certain
position within the string.</p>
<div align="RIGHT">
	<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="526">
		<col width="61">
		<col width="448">
		<tbody><tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">^</p>
				<p class="western" style="page-break-inside: avoid;" align="CENTER"><br>
				</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">Matches the
				beginning of the string.</p>
				<p class="western" style="page-break-inside: avoid;">If the /m
				(multiline) modifier is present, matches "\n" also.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">$</p>
				<p class="western" style="page-break-inside: avoid;" align="CENTER"><br>
				</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">Matches the
				end of the string.</p>
				<p class="western" style="page-break-inside: avoid;">If the /m
				(multiline) modifier is present, matches "\n" also.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\A</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">Match the
				beginning of string only. Not affected by /m modifier.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\z</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">Match the end
				of string only. Not affected by /m modifier.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\Z</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">Matches the
				end of the string only, but will chomp() a "\n" if that
				was the last character in string.</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\b</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">word
				"b"oundary</p>
				<p class="western" style="page-break-inside: avoid;">A word
				boundary occurs in four places.</p>
				<p class="western" style="page-break-inside: avoid;">1) at a
				transition from a \w character to a \W character</p>
				<p class="western" style="page-break-inside: avoid;">2) at a
				transition from a \W character to a \w character</p>
				<p class="western" style="page-break-inside: avoid;">3) at the
				beginning of the string</p>
				<p class="western" style="page-break-inside: avoid;">4) at the end
				of the string</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\B</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">NOT \b</p>
			</td>
		</tr>
		<tr valign="TOP">
			<td width="61">
				<p class="western" style="page-break-inside: avoid;" align="CENTER">\G</p>
			</td>
			<td width="448">
				<p class="western" style="page-break-inside: avoid;">usually used
				with /g modifier (probably want /c modifier too).</p>
				<p class="western" style="page-break-inside: avoid;">Indicates the
				position after the character of the last pattern match performed
				on the string. If this is the first regular expression begin
				performed on the string then \G will match the beginning of the
				string. Use the pos() function to get and set the current \G
				position within the string.</p>
			</td>
		</tr>
	</tbody></table>
</div>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.10.1.The \b Anchor|outline"></a>
20.10.1 The \b Anchor</h3>
<p class="text-body-preceding-code-block-western">Use the \b anchor
when you want to match a whole word pattern but not part of a word.
This example matches "jump" but not "jumprope":</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $test1='He can jump very high.';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($test1=~m{\bjump\b})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "test1 matches\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $test2='Pick up that jumprope.';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">unless($test2=~m{\bjump\b})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "test2 does not
match\n"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; test1 matches</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; test2 does not match </font>
</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.10.2.The \G Anchor|outline"></a>
20.10.2 The \G Anchor</h3>
<p class="western">The \G anchor is a sophisticated anchor used to
perform a progression of many regular expression pattern matches on
the same string. The \G anchor represents the position within the
string where the previous regular expression finished. The first time
a regular expression is performed on a string, the \G anchor
represents the beginning of the string.</p>
<p class="western">The location of the \G anchor within a string can
be determined by calling the pos() function on the string. The pos()
function will return the character index in the string (index zero is
to the left of the first character in the string) representing the
location of the \G anchor. Assigning to pos($str) will change the
position of the \G anchor for that string.</p>
<p class="western">The \G anchor is usually used with the "cg"
modifiers. The "cg" modifiers tell perl to NOT reset the \G
anchor to zero if the regular expression fails to match. This will
allow a series of regular expressions to operate on a string, using
the \G anchor to indicate the location where the previous regular
expression finished. Without the "cg" modifiers, the first
regular expression that fails to match will reset the \G anchor back
to zero.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">The example below
uses the \G anchor to extract bits of information from a single
string. After every regular expression, the script prints the pos()
value of the string. Notice how the pos() value keeps increasing.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = "Firstname: John
Lastname: Smith Bookcollection: Programming Perl, Perl Cookbook,
Impatient Perl";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str=~m{\GFirstname: (\w+) }cg)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $first = $1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "pos is ".pos($str)."\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($str=~m{\GLastname: (\w+) }cg)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $last = $1;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "pos is ".pos($str)."\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str=~m{\GBookcollection: }cg;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while($str=~m{\G\s*([^,]+),?}cg)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "book is '$1'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "pos is ".pos($str)."\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pos is 16</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pos is 32</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; book is 'Programming Perl'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pos is 65</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; book is 'Perl Cookbook'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; pos is 80</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; book is 'Impatient Perl'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; pos is 95</font></p>
<p class="western">Another way to code the above script is to use
substitution regular expressions and substitute each matched part
with empty strings. The problem is that a substitution creates  a new
string and copies the remaining characters to that string, resulting
in a much slower script. In the above example, the speed difference
would not be noticable to the user, but if you have a script that is
parsing through a lot of text, the difference can be quite
significant.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.11.Modifiers|outline"></a>
20.11 Modifiers</h2>
<p class="text-body-preceding-code-block-western">Regular expressions
can take optional modifiers that tell perl additional information
about how to interpret the regular expression. Modifiers are placed
after the regular expression, outside any curly braces.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str =~ m{pattern}modifiers;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str =~ s{oldpatt}{newpatt}modifiers;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">$str =~ tr{oldset}{newset}modifiers;</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.11.1.Global Modifiers|outline"></a>
20.11.1 Global Modifiers</h3>
<p class="text-body-preceding-code-block-western">The following
modifiers can be used with m{}, s{}{}, or tr{}{}.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
	<dl>
		<dd>
		<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="526">
			<col width="72">
			<col width="436">
			<tbody><tr valign="TOP">
				<td width="72">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					i</p>
				</td>
				<td width="436">
					<p class="western" style="page-break-inside: avoid;">case
					Insensitive, m{cat}i matches cat, Cat, CaT, CAt, CAT, etc</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="72">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					x</p>
				</td>
				<td width="436">
					<p class="western" style="page-break-inside: avoid;">ignore
					spaces and tabs and carriage returns in pattern. This allows the
					pattern to be spread out over multiple lines and for regular
					perl comments to be inserted within the pattern but be ignored
					by the regular expression engine.</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="72">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					s</p>
				</td>
				<td width="436">
					<p class="western" style="page-break-inside: avoid;">treat string
					as a Single line. 
					</p>
					<p class="western" style="page-break-inside: avoid;">"."
					will match "\n" within the string.</p>
					<p class="western" style="page-break-inside: avoid;">^ and $
					position anchors will only match literal beginning and end of
					string.</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="72">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					m</p>
				</td>
				<td width="436">
					<p class="western" style="page-break-inside: avoid;">treat string
					as Multiple lines.  (DEFAULT)</p>
					<p class="western" style="page-break-inside: avoid;">"."
					will NOT match "\n"</p>
					<p class="western" style="page-break-inside: avoid;">^ and $
					position anchors will match literal beginning and end of string
					and also "\n" characters within the string.</p>
					<p class="western" style="page-break-inside: avoid;">^ and $
					indicate start/end of "line" instead of start/end of
					string.</p>
					<p class="western" style="page-break-inside: avoid;">^ matches
					after "\n"</p>
					<p class="western" style="page-break-inside: avoid;">$ matches
					before "\n"</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="72">
					<p class="western" style="page-break-inside: avoid;" align="CENTER">
					o</p>
				</td>
				<td width="436">
					<p class="western" style="page-break-inside: avoid;">compile the
					pattern Once. possible speed improvement.</p>
				</td>
			</tr>
		</tbody></table>
	</dd></dl>
<p class="western" style="page-break-inside: avoid; page-break-before: auto; page-break-after: auto;">
<br><br>
</p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.11.2.The m And s Modifiers|outline"></a>
20.11.2 The m And s Modifiers</h3>
<p class="western">The default behaviour of perl regular expressions
is "m", treating strings as a multiple lines. If neither a
"m" or "s" modifier is used on a regular
expression, perl will default to "m" behaviour.</p>
<p class="western">If the "m" modifier is used, then the
"^" anchor will match the beginning of the string or "\n"
characters, the "$" anchor will match the end of the string
or any "\n" characters, and the "." character set
will match any character EXCEPT "\n". If a string contains
multiple lines separated by "\n", then the default
behaviour (the "m" behaviour) is to treat the string as
multiple lines, using "^" and "$" to indicate
start and end of lines.</p>
<p class="western">If the "s" modifier is used, then the
"^" anchor will only match the literal beginning of the
string, the "$" anchor will only match the literal end of
string, and the "." class will match any character
including "\n". With the "s" modifier, even if
the string is multiple lines with embedded "\n" characters,
the "s" modifier forces perl to treat it as a single line.</p>
<p class="western">This example shows the exact same pattern bound to
the exact same string. The only difference is the modifier used on
the regular expression. Notice in the "s" version, the
captured string includes the newline "\n" characters which
shows up in the printed output. The singleline version prints out the
captured pattern across three different lines.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = "Library:
Programming Perl \n"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."Perl Cookbook\n"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">		."Impatient Perl";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($string =~ m{Library: (.*)})</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "default is '$1'\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($string =~ m{Library: (.*)}m)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "multiline is '$1'\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if($string =~ m{Library: (.*)}s)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{ print "singleline is '$1'\n";
}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; default is 'Programming Perl '</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; multiline is 'Programming Perl '</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; singleline is 'Programming Perl</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Perl Cookbook</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; Impatient Perl'</font></p>
<h3 class="western" style="page-break-inside: avoid;"><a name="20.11.3.The x Modifier|outline"></a>
20.11.3 The x Modifier</h3>
<p class="text-body-preceding-code-block-western">The x modifier
allows a complex regular expression pattern to be spread out over
multiple lines, with comments, for easier reading. Most whitespace
within a pattern with the x modifier is ignored. The following
pattern is looking for a number that follows scientific notation. The
pattern is spread out over multiple lines with comments to support
maintainability.</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $string = '- 134.23423 e -12';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">if( $string =~ m </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">^ \s* ([-+]?) # positive or
negative or optional</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">\s* ( \d+ )   # integer portion</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
      <font face="Courier, monospace">( \. \d+ )?	  # fractional is
optional</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">( \s* e \s* [+-]? \d+)? # exponent
is optional</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">}x )</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $sign = $1     || '';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $integer = $2  || '';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $fraction = $3 || '';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	my $exponent = $4 || '';</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "sign is '$sign'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "integer is
'$integer'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "fraction is
'$fraction'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "exponent is
'$exponent'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; sign is '-'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; integer is '134'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; fraction is '.23423'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; exponent is ' e -12'</font></p>
<p class="western">A couple of notes for the above example: The x
modifier strips out all spaces, tabs, and carriage returns in the
pattern. If the pattern expects whitespace in the string, it must be
explicitely stated using \s or \t or \n or some similar character
class. Also, it's always a good idea to anchor your regular
expression somewhere in your string, with "^" or "$"
or "\G". The double-pipe expressions guarantee that the
variables are assigned to whatever the pattern matched or empty
string if no match occurred. Without them, an unmatched pattern match
will yield an "undef" in the $1 (or $2 or $3) variable
associated with the match.</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.12.Modifiers For m{} Operator|outline"></a>
20.12 Modifiers For m{} Operator</h2>
<p class="text-body-preceding-code-block-western">The following
modifiers apply to the m{pattern} operator only:</p>
	<dl>
		<dd>
		<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="527">
			<col width="71">
			<col width="438">
			<tbody><tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">g</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Globally
					find all matchs. Without this modifier, m{} will find the first
					occurrence of the pattern.</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">cg</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Continue
					search after Global search fails. This maintains the \G marker
					at its last matched position. Without this modifier, the \G
					marker is reset to zero if the pattern does not match.</p>
				</td>
			</tr>
		</tbody></table>
	</dd></dl>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.13.Modifiers for s{}{} Operator|outline"></a>
20.13 Modifiers for s{}{} Operator</h2>
<p class="text-body-preceding-code-block-western">The following
modifiers apply to the s{oldpatt}{newpatt} operator only.</p>
	<dl>
		<dd>
		<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="527">
			<col width="71">
			<col width="438">
			<tbody><tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">g</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Globally
					replace all occurrences of oldpatt with newpatt</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">e</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">interpret
					newpatt as a perl-based string Expression. 
					</p>
					<p class="western" style="page-break-inside: avoid;">the result
					of the expression becomes the replacement string.</p>
				</td>
			</tr>
		</tbody></table>
	</dd></dl>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.14.Modifiers for tr{}{} Operator|outline"></a>
20.14 Modifiers for tr{}{} Operator</h2>
<p class="text-body-preceding-code-block-western">The following
modifiers apply to the tr{oldset}{newset} operator only.</p>
	<dl>
		<dd>
		<table style="page-break-inside: avoid;border: black solid thin;" cellpadding="4" cellspacing="0" width="527">
			<col width="71">
			<col width="438">
			<tbody><tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">c</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Complement
					the searchlist</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">d</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Delete found
					but unreplaced characters</p>
				</td>
			</tr>
			<tr valign="TOP">
				<td width="71">
					<p class="western" style="page-break-inside: avoid;">s</p>
				</td>
				<td width="438">
					<p class="western" style="page-break-inside: avoid;">Squash
					duplicate replaced chracters</p>
				</td>
			</tr>
		</tbody></table>
	</dd></dl>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.15.The qr{} function|outline"></a>
20.15 The qr{} function</h2>
<p class="text-body-preceding-code-block-western">The qr{} function
takes a string and interprets it as a regular expression, returning a
value that can be stored in a scalar for pattern matching at a later
time.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">my $number =
qr{[+-]?\s*\d+(?:\.\d+)?\s*(?:e\s*[+-]?\s*\d+)?};</font></p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.16.Common Patterns|outline"></a>
20.16 Common Patterns</h2>
<p class="text-body-preceding-code-block-western">Some simple and
common regular expression patterns are shown here:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str =~ s{\s}{}g;		# remove all
whitespace</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str =~ s{#.*}{};		# remove perl
comments</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">next if($str =~ m{^\s*$});# next if
only whitespace</font></p>
<p class="western">For common but more complicated regular
expressions, check out the Regexp::Common module on CPAN.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<h2 class="western" style="page-break-inside: avoid;"><a name="20.17.Regexp::Common|outline"></a>
20.17 Regexp::Common</h2>
<p class="text-body-preceding-code-block-western">The Regexp::Common
module contains many common, but fairly complicated, regular
expression patterns (balanced parentheses and brackets, delimited
text with escapes, integers and floating point numbers of different
bases, email addresses, and others). If you are doing some
complicated pattern matching, it might be worth a moment to check out
Regexp::Common and see if someone already did the work to match the
pattern you need.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt; install Regexp::Common</font></p>
<p class="western">Once Regexp::Common is installed, perl scripts
that use it will have a "magic" hash called %RE imported
into their namespace. The keys to this hash are human understandable
names, the data in the hash are the patterns to use within regular
expressions.</p>
<p class="text-body-preceding-code-block-western">Here is how to find
out what the floating point number pattern looks like in
Regexp::Common:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Regexp::Common;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $patt = $RE{num}{real};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "$patt\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;
(?:(?i)(?:[+-]?)(?:(?=[0123456789]|[.])(?:[0123456789]*)(?:(?:[.])(?:[0123456789]{0,}))?)(?:(?:[E])(?:(?:[+-]?)(?:[0123456789]+))|))</font></p>
<p class="western">As complicated as this is, it is a lot easier to
reuse someone else's code than to try and reinvent your own, faulty,
lopsided, wheel. 
</p>
<p class="text-body-preceding-code-block-western">The hash lookup can
be used directly within your regular expression:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Regexp::Common;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $str = "this is -12.423E-42
the number";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$str =~ m{($RE{num}{real})};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "match is '$1'\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; match is '-12.423E-42'</font></p>
<h1 class="western" style="page-break-inside: avoid;"><a name="21.Parsing with Parse::RecDescent|outline"></a>
21 Parsing with Parse::RecDescent</h1>
<p class="western">Perl's regular expression patterns are sufficient
for many situations, such as extracting information out of a tab
separated database that is organized by lastname, firstname,
date-of-birth, address, city, state, ZIP, phonenumber. The data is
always in a fixed location, and a regular expression can be used to
perform searches within that data.</p>
<p class="text-body-preceding-code-block-western">If the data being
parsed is not quite so rigid in its definition, regular expressions
may become a cumbersome means to extract the desired data. Instead,
the Parse::RecDescent module may prove useful in that it allows whole
gramatical rules to be defined, and the module parses the data
according to those rules.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt; install Parse::RecDescent</font></p>
<p class="western">Parse::RecDescent describes itself as a module
that incrementally generates top-down recursive-descent text parsers
from simple yacc-like grammar specifications. In simpler terms,
Parse::RecDescent uses regular expression styled patterns to define
grammar rules, and these rules can be combined fairly easily to
create complex rules.</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="text-body-preceding-code-block-western">Here is a quick
example from perldoc  Parse::RecDescent</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Parse::RecDescent;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "try typing these
lines:\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "He's dead, Jim!\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "Dammit, Jim, I'm a
doctor, not a magician!\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "press &lt;CTL&gt;&lt;D&gt;
when finished\n";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $grammar = </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">q{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">McCoy: 	</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">curse "," name ",
I'm a doctor, not a" job "!"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">{ print "Just do what you
can, Bones.\n"; }</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">| pronoun "dead," name
"!"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
    <font face="Courier, monospace">{ print "Shut up,
Bones.\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
  <font face="Courier, monospace">| &lt;error&gt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">curse: 'Dammit' | 'Goddammit'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">name: 'Jim' | 'Spock' | 'Scotty'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">job: 'magician' | 'miracle worker' |
'perl hacker'</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">pronoun: "He's" | "She's"
| "It's" | "They're"</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">};</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $parse = new
Parse::RecDescent($grammar);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">print "&gt; ";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">while(&lt;&gt;)</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	{</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	$parse-&gt;McCoy($_);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	print "&gt; ";</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; try typing these lines:</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; He's dead, Jim!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Dammit, Jim, I'm a doctor, not a
magician!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; press &lt;CTL&gt;&lt;D&gt; when
finished</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; &gt; Dammit, Jim, I'm a doctor,
not a magician!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Just do what you can, Bones.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; &gt; He's dead, Jim!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; Shut up, Bones.</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt; &gt; You green blooded Vulcan!</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">&gt;	ERROR (line 1): Invalid McCoy: </font>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt;		Was expecting curse, or pronoun</font></p>
<p class="western">Parse::RecDescent is not the solution for every
pattern matching problem. Parse::RecDescent is slower than simple
regular expressions. Since it recursively descends through its set of
rules, the more rules, the longer it takes to run. Parse::RecDescent
currently must read in the entire text being parsed, which can be a
problem if you are parsing a gigabyte-sized file. And
Parse::RecDescent has an additional learning curve above and beyond
perl's regular expressions. Parse::RecDescent uses perl"s
regular expression patterns in its pattern matching, so you need to
learn basic regular expression patterns before you use
Parse::RecDescent.</p>
<p class="western">If the data you are mining is fairly complex, and
normal regular expressions are becoming difficult to manage, then
Parse::RecDescent would be the next logical module to look at.</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="22.Perl, GUI, and Tk|outline"></a>
22 Perl, GUI, and Tk</h1>
<p class="western">So far, all the examples have had a command line
interface. User input and output occurred through the same command
line used to execute the perl script itself.</p>
<p class="western">Perl has a Graphical User Interface (GUI) toolkit
module available on CPAN called Tk. 
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">cpan&gt; install Tk</font></p>
<p class="text-body-preceding-code-block-western">The Tk module is a
GUI toolkit that contains a plethora of buttons and labels and entry
items and other widgets needed to create a graphical user interface
to your scripts. Once installed, the Tk module has a widget
demonstration program that can be run from the command line to see
what widgets are available and what they look like. At the command
line, type "widget" to run the demonstration program.</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">&gt; widget</font></p>
<p class="text-body-preceding-code-block-western">Here is a simple
"hello world" style program using Tk:</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">use Tk;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">my $top=new MainWindow;</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">$top-&gt;Button</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">(</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-text=&gt;"Hello",</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">	-command=&gt;sub{print "Hi\n";}</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<font face="Courier, monospace">)-&gt;grid(-row=&gt;1,-column=&gt;1);</font></p>
<p style="margin-left: 0.8in; margin-bottom: 0in; page-break-after: avoid;">
<br>
</p>
<p style="margin-left: 0.8in; margin-bottom: 0.14in; page-break-after: auto;">
<font face="Courier, monospace">MainLoop;</font></p>
<p class="western">When the above example is executed, a small GUI
will popup on the screen (the MainWindow item) with a button (the
$top-&gt;Button call) labeled "Hello" (the -text option).
When the mouse left-clicks on the button, the word "Hi" is
printed to the command line (the -command option). The -&gt;grid
method invokes the geometry manager on the widget and places it
somewhere in the GUI (without geometry management, the widget will
not show up in the GUI). The MainLoop is a subroutine call that
invokes the event loop, drawing the GUI, responding to button clicks,
etc.  
</p>
<p class="western">Several large books have been written about the Tk
GUI toolkit for perl. And it would be impossible to give any decent
introduction to this module in a page or two. If you plan on creating
GUI's in your scripts, I recommend the "Mastering Perl/Tk"
book. 
</p>
<p class="western"><br><br>
</p>
<p class="western" style="page-break-before: always;"><br><br>
</p>
<h1 class="western" style="page-break-inside: avoid;"><a name="23. GNU Free Documentation License|outline"></a>
23  GNU Free Documentation License</h1>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">		  Version 1.2, November 2002</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
 <font face="Times, serif">Copyright (C) 2000,2001,2002  Free
Software Foundation, Inc.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
     <font face="Times, serif">59 Temple Place, Suite 330, Boston, MA
 02111-1307  USA</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
 <font face="Times, serif">Everyone is permitted to copy and
distribute verbatim copies</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
 <font face="Times, serif">of this license document, but changing it
is not allowed.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">0. PREAMBLE</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The purpose of this License is to make a
manual, textbook, or other</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">functional and useful document "free"
in the sense of freedom: to</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">assure everyone the effective freedom to
copy and redistribute it,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">with or without modifying it, either
commercially or noncommercially.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Secondarily, this License preserves for the
author and publisher a way</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">to get credit for their work, while not
being considered responsible</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">for modifications made by others.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">This License is a kind of "copyleft",
which means that derivative</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">works of the document must themselves be
free in the same sense.  It</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">complements the GNU General Public License,
which is a copyleft</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">license designed for free software.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">We have designed this License in order to
use it for manuals for free</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">software, because free software needs free
documentation: a free</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">program should come with manuals providing
the same freedoms that the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">software does.  But this License is not
limited to software manuals;</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">it can be used for any textual work,
regardless of subject matter or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">whether it is published as a printed book. 
We recommend this License</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">principally for works whose purpose is
instruction or reference.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">1. APPLICABILITY AND DEFINITIONS</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">This License applies to any manual or other
work, in any medium, that</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">contains a notice placed by the copyright
holder saying it can be</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">distributed under the terms of this
License.  Such a notice grants a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">world-wide, royalty-free license, unlimited
in duration, to use that</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">work under the conditions stated herein. 
The "Document", below,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">refers to any such manual or work.  Any
member of the public is a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">licensee, and is addressed as "you".
 You accept the license if you</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copy, modify or distribute the work in a
way requiring permission</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">under copyright law.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A "Modified Version" of the
Document means any work containing the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Document or a portion of it, either copied
verbatim, or with</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">modifications and/or translated into
another language.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A "Secondary Section" is a named
appendix or a front-matter section of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the Document that deals exclusively with
the relationship of the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">publishers or authors of the Document to
the Document's overall subject</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">(or to related matters) and contains
nothing that could fall directly</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">within that overall subject.  (Thus, if the
Document is in part a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">textbook of mathematics, a Secondary
Section may not explain any</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">mathematics.)  The relationship could be a
matter of historical</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">connection with the subject or with related
matters, or of legal,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">commercial, philosophical, ethical or
political position regarding</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">them.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The "Invariant Sections" are
certain Secondary Sections whose titles</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">are designated, as being those of Invariant
Sections, in the notice</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">that says that the Document is released
under this License.  If a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">section does not fit the above definition
of Secondary then it is not</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">allowed to be designated as Invariant.  The
Document may contain zero</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Invariant Sections.  If the Document does
not identify any Invariant</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Sections then there are none.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The "Cover Texts" are certain
short passages of text that are listed,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">as Front-Cover Texts or Back-Cover Texts,
in the notice that says that</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the Document is released under this
License.  A Front-Cover Text may</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">be at most 5 words, and a Back-Cover Text
may be at most 25 words.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A "Transparent" copy of the
Document means a machine-readable copy,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">represented in a format whose specification
is available to the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">general public, that is suitable for
revising the document</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">straightforwardly with generic text editors
or (for images composed of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">pixels) generic paint programs or (for
drawings) some widely available</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">drawing editor, and that is suitable for
input to text formatters or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">for automatic translation to a variety of
formats suitable for input</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">to text formatters.  A copy made in an
otherwise Transparent file</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">format whose markup, or absence of markup,
has been arranged to thwart</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">or discourage subsequent modification by
readers is not Transparent.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">An image format is not Transparent if used
for any substantial amount</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of text.  A copy that is not "Transparent"
is called "Opaque".</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Examples of suitable formats for
Transparent copies include plain</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">ASCII without markup, Texinfo input format,
LaTeX input format, SGML</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">or XML using a publicly available DTD, and
standard-conforming simple</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">HTML, PostScript or PDF designed for human
modification.  Examples of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">transparent image formats include PNG, XCF
and JPG.  Opaque formats</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">include proprietary formats that can be
read and edited only by</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">proprietary word processors, SGML or XML
for which the DTD and/or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">processing tools are not generally
available, and the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">machine-generated HTML, PostScript or PDF
produced by some word</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">processors for output purposes only.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The "Title Page" means, for a
printed book, the title page itself,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">plus such following pages as are needed to
hold, legibly, the material</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">this License requires to appear in the
title page.  For works in</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">formats which do not have any title page as
such, "Title Page" means</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the text near the most prominent appearance
of the work's title,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">preceding the beginning of the body of the
text.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A section "Entitled XYZ" means a
named subunit of the Document whose</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">title either is precisely XYZ or contains
XYZ in parentheses following</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">text that translates XYZ in another
language.  (Here XYZ stands for a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">specific section name mentioned below, such
as "Acknowledgements",</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">"Dedications", "Endorsements",
or "History".)  To "Preserve the Title"</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of such a section when you modify the
Document means that it remains a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">section "Entitled XYZ" according
to this definition.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The Document may include Warranty
Disclaimers next to the notice which</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">states that this License applies to the
Document.  These Warranty</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Disclaimers are considered to be included
by reference in this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License, but only as regards disclaiming
warranties: any other</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">implication that these Warranty Disclaimers
may have is void and has</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">no effect on the meaning of this License.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">2. VERBATIM COPYING</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may copy and distribute the Document in
any medium, either</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">commercially or noncommercially, provided
that this License, the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copyright notices, and the license notice
saying this License applies</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">to the Document are reproduced in all
copies, and that you add no other</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">conditions whatsoever to those of this
License.  You may not use</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">technical measures to obstruct or control
the reading or further</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copying of the copies you make or
distribute.  However, you may accept</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">compensation in exchange for copies.  If
you distribute a large enough</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">number of copies you must also follow the
conditions in section 3.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may also lend copies, under the same
conditions stated above, and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">you may publicly display copies.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">3. COPYING IN QUANTITY</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If you publish printed copies (or copies in
media that commonly have</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">printed covers) of the Document, numbering
more than 100, and the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Document's license notice requires Cover
Texts, you must enclose the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copies in covers that carry, clearly and
legibly, all these Cover</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Texts: Front-Cover Texts on the front
cover, and Back-Cover Texts on</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the back cover.  Both covers must also
clearly and legibly identify</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">you as the publisher of these copies.  The
front cover must present</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the full title with all words of the title
equally prominent and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">visible.  You may add other material on the
covers in addition.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Copying with changes limited to the covers,
as long as they preserve</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the title of the Document and satisfy these
conditions, can be treated</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">as verbatim copying in other respects.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If the required texts for either cover are
too voluminous to fit</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">legibly, you should put the first ones
listed (as many as fit</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">reasonably) on the actual cover, and
continue the rest onto adjacent</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">pages.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If you publish or distribute Opaque copies
of the Document numbering</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">more than 100, you must either include a
machine-readable Transparent</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copy along with each Opaque copy, or state
in or with each Opaque copy</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">a computer-network location from which the
general network-using</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">public has access to download using
public-standard network protocols</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">a complete Transparent copy of the
Document, free of added material.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If you use the latter option, you must take
reasonably prudent steps,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">when you begin distribution of Opaque
copies in quantity, to ensure</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">that this Transparent copy will remain thus
accessible at the stated</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">location until at least one year after the
last time you distribute an</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Opaque copy (directly or through your
agents or retailers) of that</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">edition to the public.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">It is requested, but not required, that you
contact the authors of the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Document well before redistributing any
large number of copies, to give</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">them a chance to provide you with an
updated version of the Document.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">4. MODIFICATIONS</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may copy and distribute a Modified
Version of the Document under</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the conditions of sections 2 and 3 above,
provided that you release</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the Modified Version under precisely this
License, with the Modified</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Version filling the role of the Document,
thus licensing distribution</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">and modification of the Modified Version to
whoever possesses a copy</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of it.  In addition, you must do these
things in the Modified Version:</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A. Use in the Title Page (and on the
covers, if any) a title distinct</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">from that of the Document, and from
those of previous versions</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">(which should, if there were any, be
listed in the History section</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">of the Document).  You may use the same
title as a previous version</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">if the original publisher of that
version gives permission.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">B. List on the Title Page, as authors, one
or more persons or entities</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">responsible for authorship of the
modifications in the Modified</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">Version, together with at least five of
the principal authors of the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">Document (all of its principal authors,
if it has fewer than five),</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">unless they release you from this
requirement.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">C. State on the Title page the name of the
publisher of the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">Modified Version, as the publisher.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">D. Preserve all the copyright notices of
the Document.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">E. Add an appropriate copyright notice for
your modifications</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">adjacent to the other copyright notices.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">F. Include, immediately after the copyright
notices, a license notice</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">giving the public permission to use the
Modified Version under the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">terms of this License, in the form shown
in the Addendum below.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">G. Preserve in that license notice the full
lists of Invariant Sections</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">and required Cover Texts given in the
Document's license notice.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">H. Include an unaltered copy of this
License.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">I. Preserve the section Entitled "History",
Preserve its Title, and add</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">to it an item stating at least the
title, year, new authors, and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">publisher of the Modified Version as
given on the Title Page.  If</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">there is no section Entitled "History"
in the Document, create one</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">stating the title, year, authors, and
publisher of the Document as</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">given on its Title Page, then add an
item describing the Modified</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">Version as stated in the previous
sentence.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">J. Preserve the network location, if any,
given in the Document for</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">public access to a Transparent copy of
the Document, and likewise</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">the network locations given in the
Document for previous versions</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">it was based on.  These may be placed in
the "History" section.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">You may omit a network location for a
work that was published at</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">least four years before the Document
itself, or if the original</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">publisher of the version it refers to
gives permission.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">K. For any section Entitled
"Acknowledgements" or "Dedications",</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">Preserve the Title of the section, and
preserve in the section all</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">the substance and tone of each of the
contributor acknowledgements</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">and/or dedications given therein.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">L. Preserve all the Invariant Sections of
the Document,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">unaltered in their text and in their
titles.  Section numbers</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">or the equivalent are not considered
part of the section titles.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">M. Delete any section Entitled
"Endorsements".  Such a section</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">may not be included in the Modified
Version.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">N. Do not retitle any existing section to
be Entitled "Endorsements"</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
   <font face="Times, serif">or to conflict in title with any
Invariant Section.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">O. Preserve any Warranty Disclaimers.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If the Modified Version includes new
front-matter sections or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">appendices that qualify as Secondary
Sections and contain no material</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copied from the Document, you may at your
option designate some or all</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of these sections as invariant.  To do
this, add their titles to the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">list of Invariant Sections in the Modified
Version's license notice.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">These titles must be distinct from any
other section titles.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may add a section Entitled
"Endorsements", provided it contains</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">nothing but endorsements of your Modified
Version by various</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">parties--for example, statements of peer
review or that the text has</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">been approved by an organization as the
authoritative definition of a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">standard.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may add a passage of up to five words
as a Front-Cover Text, and a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">passage of up to 25 words as a Back-Cover
Text, to the end of the list</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of Cover Texts in the Modified Version. 
Only one passage of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Front-Cover Text and one of Back-Cover Text
may be added by (or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">through arrangements made by) any one
entity.  If the Document already</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">includes a cover text for the same cover,
previously added by you or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">by arrangement made by the same entity you
are acting on behalf of,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">you may not add another; but you may
replace the old one, on explicit</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">permission from the previous publisher that
added the old one.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The author(s) and publisher(s) of the
Document do not by this License</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">give permission to use their names for
publicity for or to assert or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">imply endorsement of any Modified Version.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">5. COMBINING DOCUMENTS</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may combine the Document with other
documents released under this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License, under the terms defined in section
4 above for modified</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">versions, provided that you include in the
combination all of the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Invariant Sections of all of the original
documents, unmodified, and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">list them all as Invariant Sections of your
combined work in its</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">license notice, and that you preserve all
their Warranty Disclaimers.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The combined work need only contain one
copy of this License, and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">multiple identical Invariant Sections may
be replaced with a single</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copy.  If there are multiple Invariant
Sections with the same name but</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">different contents, make the title of each
such section unique by</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">adding at the end of it, in parentheses,
the name of the original</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">author or publisher of that section if
known, or else a unique number.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Make the same adjustment to the section
titles in the list of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Invariant Sections in the license notice of
the combined work.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">In the combination, you must combine any
sections Entitled "History"</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">in the various original documents, forming
one section Entitled</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">"History"; likewise combine any
sections Entitled "Acknowledgements",</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">and any sections Entitled "Dedications".
 You must delete all sections</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Entitled "Endorsements".</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">6. COLLECTIONS OF DOCUMENTS</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may make a collection consisting of the
Document and other documents</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">released under this License, and replace
the individual copies of this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License in the various documents with a
single copy that is included in</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the collection, provided that you follow
the rules of this License for</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">verbatim copying of each of the documents
in all other respects.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may extract a single document from such
a collection, and distribute</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">it individually under this License,
provided you insert a copy of this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License into the extracted document, and
follow this License in all</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">other respects regarding verbatim copying
of that document.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">7. AGGREGATION WITH INDEPENDENT WORKS</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">A compilation of the Document or its
derivatives with other separate</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">and independent documents or works, in or
on a volume of a storage or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">distribution medium, is called an
"aggregate" if the copyright</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">resulting from the compilation is not used
to limit the legal rights</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of the compilation's users beyond what the
individual works permit.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">When the Document is included in an
aggregate, this License does not</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">apply to the other works in the aggregate
which are not themselves</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">derivative works of the Document.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If the Cover Text requirement of section 3
is applicable to these</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copies of the Document, then if the
Document is less than one half of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the entire aggregate, the Document's Cover
Texts may be placed on</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">covers that bracket the Document within the
aggregate, or the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">electronic equivalent of covers if the
Document is in electronic form.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Otherwise they must appear on printed
covers that bracket the whole</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">aggregate.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">8. TRANSLATION</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Translation is considered a kind of
modification, so you may</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">distribute translations of the Document
under the terms of section 4.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Replacing Invariant Sections with
translations requires special</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">permission from their copyright holders,
but you may include</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">translations of some or all Invariant
Sections in addition to the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">original versions of these Invariant
Sections.  You may include a</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">translation of this License, and all the
license notices in the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Document, and any Warranty Disclaimers,
provided that you also include</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the original English version of this
License and the original versions</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of those notices and disclaimers.  In case
of a disagreement between</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the translation and the original version of
this License or a notice</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">or disclaimer, the original version will
prevail.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If a section in the Document is Entitled
"Acknowledgements",</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">"Dedications", or "History",
the requirement (section 4) to Preserve</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">its Title (section 1) will typically
require changing the actual</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">title.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">9. TERMINATION</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">You may not copy, modify, sublicense, or
distribute the Document except</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">as expressly provided for under this
License.  Any other attempt to</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">copy, modify, sublicense or distribute the
Document is void, and will</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">automatically terminate your rights under
this License.  However,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">parties who have received copies, or
rights, from you under this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License will not have their licenses
terminated so long as such</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">parties remain in full compliance.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">10. FUTURE REVISIONS OF THIS LICENSE</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">The Free Software Foundation may publish
new, revised versions</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of the GNU Free Documentation License from
time to time.  Such new</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">versions will be similar in spirit to the
present version, but may</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">differ in detail to address new problems or
concerns.  See</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif"><span><a href="http://www.gnu.org/copyleft/" class="smarterwiki-linkify">http://www.gnu.org/copyleft/</a>.</span></font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Each version of the License is given a
distinguishing version number.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If the Document specifies that a particular
numbered version of this</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">License "or any later version"
applies to it, you have the option of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">following the terms and conditions either
of that specified version or</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">of any later version that has been
published (not as a draft) by the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">Free Software Foundation.  If the Document
does not specify a version</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">number of this License, you may choose any
version ever published (not</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">as a draft) by the Free Software
Foundation.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">ADDENDUM: How to use this License for your
documents</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">To use this License in a document you have
written, include a copy of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">the License in the document and put the
following copyright and</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">license notices just after the title page:</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">Copyright (c)  YEAR  YOUR NAME.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">Permission is granted to copy,
distribute and/or modify this document</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">under the terms of the GNU Free
Documentation License, Version 1.2</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">or any later version published by the
Free Software Foundation;</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">A copy of the license is included in
the section entitled "GNU</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">Free Documentation License".</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If you have Invariant Sections, Front-Cover
Texts and Back-Cover Texts,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">replace the "with...Texts." line
with this:</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">with the Invariant Sections being LIST
THEIR TITLES, with the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
    <font face="Times, serif">Front-Cover Texts being LIST, and with
the Back-Cover Texts being LIST.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If you have Invariant Sections without
Cover Texts, or some other</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">combination of the three, merge those two
alternatives to suit the</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">situation.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">If your document contains nontrivial
examples of program code, we</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">recommend releasing these examples in
parallel under your choice of</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">free software license, such as the GNU
General Public License,</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<font face="Times, serif">to permit their use in free software.</font></p>
<p class="western" style="margin-bottom: 0in; page-break-inside: avoid; page-break-after: auto;">
<br>
</p>
<p class="western" style="margin-bottom: 0in; page-break-before: always;">
<br>
</p>
	<div id="Alphabetical-Index2_Head" dir="LTR">
		<p style="margin-top: 0.17in; page-break-after: avoid;"><font face="Courier, monospace"><font style="font-size: 16pt;" size="4"><b>Alphabetical
		Index</b></font></font></p>
	<p style="margin-bottom: 0in;"> <font face="Courier, monospace">\G	116</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">`	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">^	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-d	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-e	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-f	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-l	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-p	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-r	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-S	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-T	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-w	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">-z	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">!	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">!=	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">?:	26</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">@_	67</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">@ARGV	96</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">@INC	75</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">**
	operator	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\A	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\b	115,
	116</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\B	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\d	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\D	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\G	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\s	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\S	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\w	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\W	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\z	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">\Z	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&amp;&amp;	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&lt;	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&lt;=	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&lt;=&gt;	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&lt;$fh&gt;	102</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">==	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&gt;	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">&gt;=	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">||	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">||=	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">$1	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">$2	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">$3	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">$a	33</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">$b	33</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">abs	15</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">anchor	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">and	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Anonymous
	Referents	47</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Anonymous
	Subroutines	66</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Arguments	67</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Arrays	28</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Autovivify	9,
	10</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">AUTOVIVIFY	9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Backtick
	Operator	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">BEGIN	72</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">bind	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">bless	78,
	90</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">BLOCK	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Booleans	21</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">caller()	70</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">can	83</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Capturing
	parentheses	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Capturing
	Parenthesis	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Character
	Classes	112</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">CHECK	73</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">chomp	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Class	86</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Cloning	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">close	101</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">CLOSURES	61</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Clustering
	parentheses	111</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">cmp	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Command
	Line Arguments	95</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Comparators	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Compiling	72</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Complex
	Data Structures	49</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Comprehensive
	Perl Archive Network	9, 91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">concatenation	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Conditional
	Operator	26</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">constructors	90</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">continue	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Control
	Flow	54</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Copy	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">cos	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">CPAN	9,
	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">CPAN,
	The Perl Module	92</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">CPAN,
	The Web Site	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Data
	Persistence	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">dclone	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Deep
	Cloning	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Default
	Values	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">DEGREES	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">delete	37</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">dereferencing	45</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">DESTROY	89</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Do
	What I Mean	9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Double
	quotes	11</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">DWIM	9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">e	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">each	38</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">else	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">elsif	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">END	73</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">eq	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">exists	35</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">exp	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">exponentiation	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">FALSE	22</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">File	101</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">File
	Globbing	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">File
	Tests	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">File
	Tree Searching	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">File::Find
		103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">find	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">for	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">foreach	31,
	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Fubar	10</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Garbage
	Collection	60</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">ge	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Getopt::Declare	98</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">glob	103</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Greedy	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">GUI	125</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">h2xs	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Hashes	34</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Header	8</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">if	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Implied
	Arguments	68</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">import	76</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Inheritance	81,
	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">INIT	73</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">int	15</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Interpreting	72</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">INVOCANT	80</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">isa	83</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">join	13</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">keys	37</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Label	55,
	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">last
	LABEL;	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">le	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">length	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Lexical
	Scope	58</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Lexical
	Variables	59</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">List
	Context	43</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">local()	63</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">log	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">logarithms	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Logical
	Operators	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">lt	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">m	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">m And
	s Modifiers	118</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">main	57</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Maximal	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Metacharacters	109</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Method	79,
	90</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Minimal	114</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Modifiers	118</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Modules	73,
	89</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Multidimensional
	Arrays	51</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Named
	Referents	46</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Named
	Subroutines	65</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">NAMESPACE	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">ne	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">next
	LABEL;	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">not	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">nstore	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Numeric
	Functions	15</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Numify	18</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Object
	Destruction	89</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Object
	Oriented Perl	84</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Object
	Oriented Review	89</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">oct	19</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">open	101</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Operating
	System	104</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">or	24</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">our	57</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Overriding
	Methods	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Package	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Package
	Declaration	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">package
	QUALIFIED	57</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Parse::RecDescent	122</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">PERL5LIB	76</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">perldoc	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Persistence	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Plain
	Old Documentation	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">pm	73</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">POD	94</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Polymorphism	86</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">pop	30</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Position
	Anchors	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Position
	Assertions	115</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Procedural
	Perl	84</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">pseudorandom
	number	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">push	30</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">qr	121</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Quantifiers	113,
	114</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">quotes	11</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">qw	13</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">RADIANS	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">rand	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">random
	numbers	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">read	101</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">redo
	LABEL;	56</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">ref()	53</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Reference
	Material	8, 9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">References	45</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">referent	45</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Regexp::Common	122</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Regular
	Expressions	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">repetition	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">require	76</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">retrieve	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">return	69</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Returning
	False	69</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">reverse	33</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">round	15</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">s	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">scalar
	(@array)	30</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Scalars	10</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Script
	Header	8</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">seed
	the PRNG	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">shift	31</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Shortcut
	Character Classes	113</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">sigil	10</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">sin	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Single
	quotes	11</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">sort	32</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">spaceship
	operator	23</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">splice	34</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">split	13</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">sprintf	18</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">sqrt	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">srand	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">String
	Literals	11</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Stringification
	of References	52</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Stringify	17</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Strings	11</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Subroutines	65</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">substr	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">SUPER::	87,
	91</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">system()	104</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">tan	16</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">ternary
	operator	26</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Thrifty	114</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Tk	125</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Tk::ExecuteCommand.	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">TMTOWTDI	9</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">tr	105</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">trinary
	operator	26</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">TRUE	22</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">truncate	15</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">Undefined	20</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">unless	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">unshift	31</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">until	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">use	74</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">use
	base	82</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">use
	lib	76</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">use
	Module	90</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">values	38</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">wantarray	71</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">while	55</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">write	102</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">x
	Modifier	120</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">x
	operator	12</font></p>
	<p style="margin-bottom: 0in;"><font face="Courier, monospace">xor	24</font></p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;"><br>
</p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><font face="Courier, monospace">The
End<a href="http://www.greglondon.com/">.</a></font></p>
<p class="western" style="margin-bottom: 0in;" align="CENTER"><br>
</p>
</div>
</body></html>
